--- src/merged\Terraria\Main.cs
+++ src/Terraria\Terraria\Main.cs
@@ -11671,8 +11671,7 @@
 							Main.butterflyCageMode[num17, num18] = (byte)Main.rand.Next(5);
 							if (Main.rand.Next(2) == 0)
 							{
-								byte* expr_3D6A = ref Main.butterflyCageMode[num17, num18];
-								*expr_3D6A += 10;
+								Main.butterflyCageMode[num17, num18] += 10;
 							}
 						}
 						int num19 = Main.rand.Next(3, 16);
@@ -11714,13 +11713,11 @@
 										{
 											if (Main.butterflyCageMode[num17, num18] >= 10)
 											{
-												byte* expr_3F3E = ref Main.butterflyCageMode[num17, num18];
-												*expr_3F3E -= 10;
+												Main.butterflyCageMode[num17, num18] -= 10;
 											}
 											else
 											{
-												byte* expr_3F60 = ref Main.butterflyCageMode[num17, num18];
-												*expr_3F60 += 10;
+												Main.butterflyCageMode[num17, num18] += 10;
 											}
 										}
 									}
@@ -11744,13 +11741,11 @@
 									{
 										if (Main.butterflyCageMode[num17, num18] >= 10)
 										{
-											byte* expr_406B = ref Main.butterflyCageMode[num17, num18];
-											*expr_406B -= 10;
+											Main.butterflyCageMode[num17, num18] -= 10;
 										}
 										else
 										{
-											byte* expr_408D = ref Main.butterflyCageMode[num17, num18];
-											*expr_408D += 10;
+											Main.butterflyCageMode[num17, num18] += 10;
 										}
 									}
 								}
@@ -13975,16 +13970,14 @@
 		public static string GetInputText(string oldString)
 		{
 #if CLIENT
-			Main.<>c__DisplayClass6 <>c__DisplayClass = new Main.<>c__DisplayClass6();
-			<>c__DisplayClass.oldString = oldString;
 			if (!Main.hasFocus)
 			{
-				return <>c__DisplayClass.oldString;
+				return oldString;
 			}
 			Main.inputTextEnter = false;
 			Main.inputTextEscape = false;
-			string text = <>c__DisplayClass.oldString;
-			<>c__DisplayClass.newKeys = "";
+			string text = oldString;
+			string newKeys = "";
 			if (text == null)
 			{
 				text = "";
@@ -13998,17 +13991,16 @@
 				}
 				else if (Main.inputText.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.X) && !Main.oldInputText.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.X))
 				{
-					PlatformUtilties.SetClipboard(<>c__DisplayClass.oldString);
+					PlatformUtilties.SetClipboard(oldString);
 					text = "";
 				}
 				else if ((Main.inputText.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.C) && !Main.oldInputText.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.C)) || (Main.inputText.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.Insert) && !Main.oldInputText.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.Insert)))
 				{
-					PlatformUtilties.SetClipboard(<>c__DisplayClass.oldString);
+					PlatformUtilties.SetClipboard(oldString);
 				}
 				else if (Main.inputText.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.V) && !Main.oldInputText.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.V))
 				{
-					Main.<>c__DisplayClass6 expr_13B = <>c__DisplayClass;
-					expr_13B.newKeys += PlatformUtilties.GetClipboard();
+					newKeys += PlatformUtilties.GetClipboard();
 				}
 			}
 			else
@@ -14017,11 +14009,11 @@
 				{
 					if (Main.inputText.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.Delete) && !Main.oldInputText.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.Delete))
 					{
-						Thread thread = new Thread(delegate
-						{
-							if (<>c__DisplayClass.oldString.Length > 0)
-							{
-								Clipboard.SetText(<>c__DisplayClass.oldString);
+						Thread thread = new Thread((ThreadStart)delegate
+						{
+							if (oldString.Length > 0)
+							{
+								Clipboard.SetText(oldString);
 							}
 						});
 						thread.SetApartmentState(ApartmentState.STA);
@@ -14033,7 +14025,7 @@
 					}
 					if (Main.inputText.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.Insert) && !Main.oldInputText.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.Insert))
 					{
-						Thread thread2 = new Thread(delegate
+						Thread thread2 = new Thread((ThreadStart)delegate
 						{
 							string text2 = Clipboard.GetText();
 							for (int l = 0; l < text2.Length; l++)
@@ -14043,7 +14035,7 @@
 									text2 = text2.Replace(string.Concat(text2[l--]), "");
 								}
 							}
-							<>c__DisplayClass.newKeys += text2;
+							newKeys += text2;
 						});
 						thread2.SetApartmentState(ApartmentState.STA);
 						thread2.Start();
@@ -14066,13 +14058,12 @@
 					}
 					else if (num >= 32 && num != 127)
 					{
-						Main.<>c__DisplayClass6 expr_25B = <>c__DisplayClass;
-						expr_25B.newKeys += str;
+						newKeys += str;
 					}
 				}
 			}
 			Main.keyCount = 0;
-			text += <>c__DisplayClass.newKeys;
+			text += newKeys;
 			Main.oldInputText = Main.inputText;
 			Main.inputText = Keyboard.GetState();
 			Microsoft.Xna.Framework.Input.Keys[] pressedKeys = Main.inputText.GetPressedKeys();
@@ -18169,7 +18160,7 @@
 												expr_6D05_cp_0.velocity.Y = expr_6D05_cp_0.velocity.Y - 2f;
 												Main.dust[num147].noGravity = true;
 											}
-											color.A = Main.mouseTextColor / 2;
+											color.A = (byte)(Main.mouseTextColor / 2);
 											color.G = Main.mouseTextColor;
 											color.B = Main.mouseTextColor;
 										}
@@ -18181,8 +18172,8 @@
 												int num148 = Dust.NewDust(new Vector2((float)(j * 16), (float)(i * 16)), 16, 16, 43, 0f, 0f, 254, newColor, 0.5f);
 												Main.dust[num148].velocity *= 0f;
 											}
-											byte b4 = (Main.mouseTextColor + color.G * 2) / 3;
-											byte b5 = (Main.mouseTextColor + color.B * 2) / 3;
+											byte b4 = (byte)((Main.mouseTextColor + color.G * 2) / 3);
+											byte b5 = (byte)((Main.mouseTextColor + color.B * 2) / 3);
 											if (b4 > color.G)
 											{
 												color.G = b4;
@@ -18446,9 +18437,9 @@
 												}
 												Microsoft.Xna.Framework.Color color11 = color;
 												Microsoft.Xna.Framework.Color color12 = array[num152];
-												color11.R = (color.R + color12.R) / 2;
-												color11.G = (color.G + color12.G) / 2;
-												color11.B = (color.B + color12.B) / 2;
+												color11.R = (byte)((color.R + color12.R) / 2);
+												color11.G = (byte)((color.G + color12.G) / 2);
+												color11.B = (byte)((color.B + color12.B) / 2);
 												if (flag16)
 												{
 													color11 = tile.actColor(color11);
@@ -18493,9 +18484,9 @@
 												}
 												Microsoft.Xna.Framework.Color color13 = color;
 												Microsoft.Xna.Framework.Color color14 = array[num155];
-												color13.R = (color.R + color14.R) / 2;
-												color13.G = (color.G + color14.G) / 2;
-												color13.B = (color.B + color14.B) / 2;
+												color13.R = (byte)((color.R + color14.R) / 2);
+												color13.G = (byte)((color.G + color14.G) / 2);
+												color13.B = (byte)((color.B + color14.B) / 2);
 												if (flag18)
 												{
 													color13 = tile.actColor(color13);
@@ -19358,7 +19349,7 @@
 				}
 				if (type5 == 334 && frameX2 >= 5000)
 				{
-					short arg_CBC6_0 = frameY3 / 18;
+					short arg_CBC6_0 = (short)(frameY3 / 18);
 					int num300 = (int)frameX2;
 					int num301 = 0;
 					int num302 = num300 % 5000;
@@ -20496,7 +20487,7 @@
 								switch (m)
 								{
 								case 0:
-									IL_77B:
+                                default:
 									num3 = num2;
 									num4 = 0f;
 									goto IL_7AF;
@@ -20513,7 +20504,6 @@
 									num4 = -num2;
 									goto IL_7AF;
 								}
-								goto IL_77B;
 								IL_7AF:
 								position = new Vector2(player.position.X + num3, player.position.Y + player.gfxOffY + num4);
 								this.DrawPlayer(player, position, player.fullRotation, player.fullRotationOrigin, player.ghostFade);
@@ -22165,7 +22155,7 @@
 							if (type >= 87 && type <= 92)
 							{
 								Microsoft.Xna.Framework.Color alpha2 = Main.npc[i].GetAlpha(color9);
-								byte b4 = (Main.tileColor.R + Main.tileColor.G + Main.tileColor.B) / 3;
+								byte b4 = (byte)((Main.tileColor.R + Main.tileColor.G + Main.tileColor.B) / 3);
 								if (alpha2.R < b4)
 								{
 									alpha2.R = b4;
@@ -25738,7 +25728,7 @@
 					Microsoft.Xna.Framework.Color color29 = color25;
 					color29 = projectile.GetAlpha(color29);
 					color29 *= (float)(num171 - num173) / 15f;
-					projectile.oldPos[num173] - Main.screenPosition + new Vector2(num150 + (float)num149, (float)(projectile.height / 2) + projectile.gfxOffY);
+					Vector2 _ = projectile.oldPos[num173] - Main.screenPosition + new Vector2(num150 + (float)num149, (float)(projectile.height / 2) + projectile.gfxOffY);
 					Main.spriteBatch.Draw(texture2D6, projectile.oldPos[num173] + new Vector2((float)projectile.width, (float)projectile.height) / 2f - Main.screenPosition + new Vector2(0f, projectile.gfxOffY), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, y4, texture2D6.Width, num170)), color29, projectile.rotation, new Vector2((float)texture2D6.Width / 2f, (float)num170 / 2f), MathHelper.Lerp(projectile.scale, value9, (float)num173 / 15f), spriteEffects, 0f);
 				}
 				Main.spriteBatch.Draw(texture2D6, projectile.Center - Main.screenPosition + new Vector2(0f, projectile.gfxOffY), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, y4, texture2D6.Width, num170)), projectile.GetAlpha(color25), projectile.rotation, new Vector2((float)texture2D6.Width / 2f, (float)num170 / 2f), projectile.scale, spriteEffects, 0f);
@@ -25757,7 +25747,7 @@
 					Microsoft.Xna.Framework.Color color30 = color25;
 					color30 = projectile.GetAlpha(color30);
 					color30 *= (float)(num175 - num177) / 15f;
-					projectile.oldPos[num177] - Main.screenPosition + new Vector2(num150 + (float)num149, (float)(projectile.height / 2) + projectile.gfxOffY);
+					Vector2 _ = projectile.oldPos[num177] - Main.screenPosition + new Vector2(num150 + (float)num149, (float)(projectile.height / 2) + projectile.gfxOffY);
 					Main.spriteBatch.Draw(texture2D7, projectile.oldPos[num177] + new Vector2((float)projectile.width, (float)projectile.height) / 2f - Main.screenPosition + new Vector2(0f, projectile.gfxOffY), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, y5, texture2D7.Width, num174)), color30, projectile.rotation, new Vector2((float)texture2D7.Width / 2f, (float)num174 / 2f), MathHelper.Lerp(projectile.scale, value10, (float)num177 / 15f), spriteEffects, 0f);
 				}
 				Main.spriteBatch.Draw(texture2D7, projectile.Center - Main.screenPosition + new Vector2(0f, projectile.gfxOffY), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, y5, texture2D7.Width, num174)), Microsoft.Xna.Framework.Color.White, projectile.rotation, new Vector2((float)texture2D7.Width / 2f, (float)num174 / 2f), projectile.scale + 0.2f, spriteEffects, 0f);
@@ -25973,7 +25963,7 @@
 				Vector2 vector27 = new Vector2(projectile.scale);
 				DelegateMethods.f_1 = 1f;
 				DelegateMethods.c_1 = value16 * 0.75f * projectile.Opacity;
-				projectile.oldPos[0] + new Vector2((float)projectile.width, (float)projectile.height) / 2f + Vector2.UnitY * projectile.gfxOffY - Main.screenPosition;
+				Vector2 _ = projectile.oldPos[0] + new Vector2((float)projectile.width, (float)projectile.height) / 2f + Vector2.UnitY * projectile.gfxOffY - Main.screenPosition;
 				Utils.DrawLaser(Main.spriteBatch, tex, value17 - Main.screenPosition, value17 + projectile.velocity * num192 - Main.screenPosition, vector27, new Utils.LaserLineFraming(DelegateMethods.RainbowLaserDraw));
 				DelegateMethods.c_1 = new Microsoft.Xna.Framework.Color(255, 255, 255, 127) * 0.75f * projectile.Opacity;
 				Utils.DrawLaser(Main.spriteBatch, tex, value17 - Main.screenPosition, value17 + projectile.velocity * num192 - Main.screenPosition, vector27 / 2f, new Utils.LaserLineFraming(DelegateMethods.RainbowLaserDraw));
@@ -25993,14 +25983,14 @@
 				DelegateMethods.f_1 = 1f;
 				DelegateMethods.c_1 = c_;
 				DelegateMethods.i_1 = 54000 - (int)Main.time / 2;
-				projectile.oldPos[0] + new Vector2((float)projectile.width, (float)projectile.height) / 2f + Vector2.UnitY * projectile.gfxOffY - Main.screenPosition;
+				Vector2 _ = projectile.oldPos[0] + new Vector2((float)projectile.width, (float)projectile.height) / 2f + Vector2.UnitY * projectile.gfxOffY - Main.screenPosition;
 				Utils.DrawLaser(Main.spriteBatch, tex2, value18 - Main.screenPosition, value18 + projectile.velocity * num193 - Main.screenPosition, vector28, new Utils.LaserLineFraming(DelegateMethods.TurretLaserDraw));
 				DelegateMethods.c_1 = new Microsoft.Xna.Framework.Color(255, 255, 255, 127) * 0.75f * projectile.Opacity;
 				Utils.DrawLaser(Main.spriteBatch, tex2, value18 - Main.screenPosition, value18 + projectile.velocity * num193 - Main.screenPosition, vector28 / 2f, new Utils.LaserLineFraming(DelegateMethods.TurretLaserDraw));
 			}
 			else if (projectile.type == 611)
 			{
-				projectile.position + new Vector2((float)projectile.width, (float)projectile.height) / 2f + Vector2.UnitY * projectile.gfxOffY - Main.screenPosition;
+				Vector2 _ = projectile.position + new Vector2((float)projectile.width, (float)projectile.height) / 2f + Vector2.UnitY * projectile.gfxOffY - Main.screenPosition;
 				Texture2D texture2D17 = Main.projectileTexture[projectile.type];
 				Microsoft.Xna.Framework.Color alpha3 = projectile.GetAlpha(color25);
 				if (projectile.velocity == Vector2.Zero)
@@ -26636,7 +26626,7 @@
 					color47 = projectile.GetAlpha(color47);
 					color47 *= (float)(num239 - num241) / 15f;
 					Microsoft.Xna.Framework.Color alpha7 = projectile.GetAlpha(color25);
-					projectile.oldPos[num241] - Main.screenPosition + new Vector2(num150 + (float)num149, (float)(projectile.height / 2) + projectile.gfxOffY);
+					Vector2 _ = projectile.oldPos[num241] - Main.screenPosition + new Vector2(num150 + (float)num149, (float)(projectile.height / 2) + projectile.gfxOffY);
 					Main.spriteBatch.Draw(texture2D30, projectile.oldPos[num241] + new Vector2((float)projectile.width, (float)projectile.height) / 2f - Main.screenPosition + new Vector2(0f, projectile.gfxOffY), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, y12, texture2D30.Width, num238)), Microsoft.Xna.Framework.Color.Lerp(alpha7, color47, 0.3f), projectile.rotation, new Vector2((float)texture2D30.Width / 2f, (float)num238 / 2f), MathHelper.Lerp(projectile.scale, value37, (float)num241 / 15f), spriteEffects, 0f);
 				}
 				Main.spriteBatch.Draw(texture2D30, projectile.Center - Main.screenPosition + new Vector2(0f, projectile.gfxOffY), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, y12, texture2D30.Width, num238)), projectile.GetAlpha(color25), projectile.rotation, new Vector2((float)texture2D30.Width / 2f, (float)num238 / 2f), projectile.scale, spriteEffects, 0f);
@@ -37874,7 +37864,7 @@
 				Main.screenPosition.X = 0f;
 			}
 			Main.background = 0;
-			byte b = (255 + Main.tileColor.R * 2) / 3;
+			byte b = (byte)((255 + Main.tileColor.R * 2) / 3);
 			Microsoft.Xna.Framework.Color color = new Microsoft.Xna.Framework.Color((int)b, (int)b, (int)b, 255);
 			this.logoRotation += this.logoRotationSpeed * 3E-05f;
 			if ((double)this.logoRotation > 0.1)
@@ -40485,9 +40475,9 @@
 								if (num48 == 4)
 								{
 									color6 = color;
-									color6.R = (255 + color6.R) / 2;
-									color6.G = (255 + color6.R) / 2;
-									color6.B = (255 + color6.R) / 2;
+									color6.R = (byte)((255 + color6.R) / 2);
+									color6.G = (byte)((255 + color6.R) / 2);
+									color6.B = (byte)((255 + color6.R) / 2);
 								}
 								int num49 = 255;
 								int num50 = (int)color6.R - (255 - num49);
@@ -40597,9 +40587,9 @@
 									if (num59 == 4)
 									{
 										color7 = color;
-										color7.R = (255 + color7.R) / 2;
-										color7.G = (255 + color7.R) / 2;
-										color7.B = (255 + color7.R) / 2;
+										color7.R = (byte)((255 + color7.R) / 2);
+										color7.G = (byte)((255 + color7.R) / 2);
+										color7.B = (byte)((255 + color7.R) / 2);
 									}
 									int num60 = (int)color7.R - (255 - num57);
 									if (num60 < 0)
@@ -40653,9 +40643,9 @@
 								if (num67 == 4)
 								{
 									color8 = color;
-									color8.R = (255 + color8.R) / 2;
-									color8.G = (255 + color8.R) / 2;
-									color8.B = (255 + color8.R) / 2;
+									color8.R = (byte)((255 + color8.R) / 2);
+									color8.G = (byte)((255 + color8.R) / 2);
+									color8.B = (byte)((255 + color8.R) / 2);
 								}
 								int num68 = 255;
 								int num69 = (int)color8.R - (255 - num68);
@@ -40743,9 +40733,9 @@
 								break;
 							}
 							Microsoft.Xna.Framework.Color textColor = color;
-							textColor.R = (255 + textColor.R) / 2;
-							textColor.G = (255 + textColor.R) / 2;
-							textColor.B = (255 + textColor.R) / 2;
+							textColor.R = (byte)((255 + textColor.R) / 2);
+							textColor.G = (byte)((255 + textColor.R) / 2);
+							textColor.B = (byte)((255 + textColor.R) / 2);
 							int num77 = 255;
 							int num78 = (int)textColor.R - (255 - num77);
 							if (num78 < 0)
@@ -40823,9 +40813,9 @@
 								color9 = color;
 								break;
 							}
-							color9.R = (255 + color9.R) / 2;
-							color9.G = (255 + color9.G) / 2;
-							color9.B = (255 + color9.B) / 2;
+							color9.R = (byte)((255 + color9.R) / 2);
+							color9.G = (byte)((255 + color9.G) / 2);
+							color9.B = (byte)((255 + color9.B) / 2);
 						}
 						int num83 = (int)(255f * (this.menuItemScale[num35] * 2f - 1f));
 						if (array[num35])
@@ -40866,7 +40856,7 @@
 							}
 							else
 							{
-								color9.A -= Main.mouseTextColor / 5;
+								color9.A -= (byte)(Main.mouseTextColor / 5);
 							}
 						}
 						int num88 = 0;
@@ -41002,9 +40992,9 @@
 				if (num93 == 4)
 				{
 					color10 = color;
-					color10.R = (255 + color10.R) / 2;
-					color10.G = (255 + color10.R) / 2;
-					color10.B = (255 + color10.R) / 2;
+					color10.R = (byte)((255 + color10.R) / 2);
+					color10.G = (byte)((255 + color10.R) / 2);
+					color10.B = (byte)((255 + color10.R) / 2);
 				}
 				color10.A = (byte)((float)color10.A * 0.3f);
 				int num94 = 0;
@@ -41037,9 +41027,9 @@
 				if (num96 == 4)
 				{
 					color11 = color;
-					color11.R = (255 + color11.R) / 2;
-					color11.G = (255 + color11.R) / 2;
-					color11.B = (255 + color11.R) / 2;
+					color11.R = (byte)((255 + color11.R) / 2);
+					color11.G = (byte)((255 + color11.R) / 2);
+					color11.B = (byte)((255 + color11.R) / 2);
 				}
 				color11.A = (byte)((float)color11.A * 0.3f);
 				int num97 = 0;
@@ -41733,9 +41723,9 @@
 														}
 														break;
 													}
-													color4.R = (color3.R + color5.R) / 2;
-													color4.G = (color3.G + color5.G) / 2;
-													color4.B = (color3.B + color5.B) / 2;
+													color4.R = (byte)((color3.R + color5.R) / 2);
+													color4.G = (byte)((color3.G + color5.G) / 2);
+													color4.B = (byte)((color3.B + color5.B) / 2);
 													color4.R = (byte)((float)color4.R * x);
 													color4.G = (byte)((float)color4.G * y);
 													color4.B = (byte)((float)color4.B * z);
@@ -41783,9 +41773,9 @@
 													num29 = 8;
 													break;
 												}
-												color7.R = (color3.R + color8.R) / 2;
-												color7.G = (color3.G + color8.G) / 2;
-												color7.B = (color3.B + color8.B) / 2;
+												color7.R = (byte)((color3.R + color8.R) / 2);
+												color7.G = (byte)((color3.G + color8.G) / 2);
+												color7.B = (byte)((color3.B + color8.B) / 2);
 												color7.R = (byte)((float)color7.R * x);
 												color7.G = (byte)((float)color7.G * y);
 												color7.B = (byte)((float)color7.B * z);
@@ -42052,9 +42042,9 @@
 													}
 													break;
 												}
-												color15.R = (color14.R + color16.R) / 2;
-												color15.G = (color14.G + color16.G) / 2;
-												color15.B = (color14.B + color16.B) / 2;
+												color15.R = (byte)((color14.R + color16.R) / 2);
+												color15.G = (byte)((color14.G + color16.G) / 2);
+												color15.B = (byte)((color14.B + color16.B) / 2);
 												color15.R = (byte)((float)color15.R * x);
 												color15.G = (byte)((float)color15.G * y);
 												color15.B = (byte)((float)color15.B * z);
@@ -42092,9 +42082,9 @@
 													num57 = 8;
 													break;
 												}
-												color18.R = (color14.R + color19.R) / 2;
-												color18.G = (color14.G + color19.G) / 2;
-												color18.B = (color14.B + color19.B) / 2;
+												color18.R = (byte)((color14.R + color19.R) / 2);
+												color18.G = (byte)((color14.G + color19.G) / 2);
+												color18.B = (byte)((color14.B + color19.B) / 2);
 												color18.R = (byte)((float)color18.R * x);
 												color18.G = (byte)((float)color18.G * y);
 												color18.B = (byte)((float)color18.B * z);
@@ -42334,9 +42324,9 @@
 													}
 													break;
 												}
-												color26.R = (color25.R + color27.R) / 2;
-												color26.G = (color25.G + color27.G) / 2;
-												color26.B = (color25.B + color27.B) / 2;
+												color26.R = (byte)((color25.R + color27.R) / 2);
+												color26.G = (byte)((color25.G + color27.G) / 2);
+												color26.B = (byte)((color25.B + color27.B) / 2);
 												color26.R = (byte)((float)color26.R * x);
 												color26.G = (byte)((float)color26.G * y);
 												color26.B = (byte)((float)color26.B * z);
@@ -42365,9 +42355,9 @@
 													num77 = 8;
 													break;
 												}
-												color28.R = (color25.R + color29.R) / 2;
-												color28.G = (color25.G + color29.G) / 2;
-												color28.B = (color25.B + color29.B) / 2;
+												color28.R = (byte)((color25.R + color29.R) / 2);
+												color28.G = (byte)((color25.G + color29.G) / 2);
+												color28.B = (byte)((color25.B + color29.B) / 2);
 												color28.R = (byte)((float)color28.R * x);
 												color28.G = (byte)((float)color28.G * y);
 												color28.B = (byte)((float)color28.B * z);
@@ -42904,9 +42894,9 @@
 														}
 														break;
 													}
-													color4.R = (color3.R + color5.R) / 2;
-													color4.G = (color3.G + color5.G) / 2;
-													color4.B = (color3.B + color5.B) / 2;
+													color4.R = (byte)((color3.R + color5.R) / 2);
+													color4.G = (byte)((color3.G + color5.G) / 2);
+													color4.B = (byte)((color3.B + color5.B) / 2);
 													color4.R = (byte)((float)color4.R * num5);
 													color4.G = (byte)((float)color4.G * num6);
 													color4.B = (byte)((float)color4.B * num7);
@@ -42954,9 +42944,9 @@
 													num35 = 8;
 													break;
 												}
-												color7.R = (color3.R + color8.R) / 2;
-												color7.G = (color3.G + color8.G) / 2;
-												color7.B = (color3.B + color8.B) / 2;
+												color7.R = (byte)((color3.R + color8.R) / 2);
+												color7.G = (byte)((color3.G + color8.G) / 2);
+												color7.B = (byte)((color3.B + color8.B) / 2);
 												color7.R = (byte)((float)color7.R * num5);
 												color7.G = (byte)((float)color7.G * num6);
 												color7.B = (byte)((float)color7.B * num7);
@@ -43223,9 +43213,9 @@
 													}
 													break;
 												}
-												color15.R = (color14.R + color16.R) / 2;
-												color15.G = (color14.G + color16.G) / 2;
-												color15.B = (color14.B + color16.B) / 2;
+												color15.R = (byte)((color14.R + color16.R) / 2);
+												color15.G = (byte)((color14.G + color16.G) / 2);
+												color15.B = (byte)((color14.B + color16.B) / 2);
 												color15.R = (byte)((float)color15.R * num5);
 												color15.G = (byte)((float)color15.G * num6);
 												color15.B = (byte)((float)color15.B * num7);
@@ -43263,9 +43253,9 @@
 													num63 = 8;
 													break;
 												}
-												color18.R = (color14.R + color19.R) / 2;
-												color18.G = (color14.G + color19.G) / 2;
-												color18.B = (color14.B + color19.B) / 2;
+												color18.R = (byte)((color14.R + color19.R) / 2);
+												color18.G = (byte)((color14.G + color19.G) / 2);
+												color18.B = (byte)((color14.B + color19.B) / 2);
 												color18.R = (byte)((float)color18.R * num5);
 												color18.G = (byte)((float)color18.G * num6);
 												color18.B = (byte)((float)color18.B * num7);
@@ -43499,9 +43489,9 @@
 													}
 													break;
 												}
-												color26.R = (color25.R + color27.R) / 2;
-												color26.G = (color25.G + color27.G) / 2;
-												color26.B = (color25.B + color27.B) / 2;
+												color26.R = (byte)((color25.R + color27.R) / 2);
+												color26.G = (byte)((color25.G + color27.G) / 2);
+												color26.B = (byte)((color25.B + color27.B) / 2);
 												color26.R = (byte)((float)color26.R * num5);
 												color26.G = (byte)((float)color26.G * num6);
 												color26.B = (byte)((float)color26.B * num7);
@@ -43530,9 +43520,9 @@
 													num83 = 8;
 													break;
 												}
-												color28.R = (color25.R + color29.R) / 2;
-												color28.G = (color25.G + color29.G) / 2;
-												color28.B = (color25.B + color29.B) / 2;
+												color28.R = (byte)((color25.R + color29.R) / 2);
+												color28.G = (byte)((color25.G + color29.G) / 2);
+												color28.B = (byte)((color25.B + color29.B) / 2);
 												color28.R = (byte)((float)color28.R * num5);
 												color28.G = (byte)((float)color28.G * num6);
 												color28.B = (byte)((float)color28.B * num7);
@@ -45427,9 +45417,9 @@
 				}
 			}
 			Main.tileColor.A = 255;
-			Main.tileColor.R = (Main.bgColor.R + Main.bgColor.G + Main.bgColor.B + Main.bgColor.R * 7) / 10;
-			Main.tileColor.G = (Main.bgColor.R + Main.bgColor.G + Main.bgColor.B + Main.bgColor.G * 7) / 10;
-			Main.tileColor.B = (Main.bgColor.R + Main.bgColor.G + Main.bgColor.B + Main.bgColor.B * 7) / 10;
+			Main.tileColor.R = (byte)((Main.bgColor.R + Main.bgColor.G + Main.bgColor.B + Main.bgColor.R * 7) / 10);
+			Main.tileColor.G = (byte)((Main.bgColor.R + Main.bgColor.G + Main.bgColor.B + Main.bgColor.G * 7) / 10);
+			Main.tileColor.B = (byte)((Main.bgColor.R + Main.bgColor.G + Main.bgColor.B + Main.bgColor.B * 7) / 10);
 			Main.backColor = Main.bgColor;
 			Main.trueBackColor = Main.backColor;
 			Lighting.Initialize(true);
@@ -46920,10 +46910,10 @@
 										num26 = (float)color4.B * num17;
 										num27 = (float)color4.A * num17;
 										color4 = new Microsoft.Xna.Framework.Color((int)((byte)num24), (int)((byte)num25), (int)((byte)num26), (int)((byte)num27));
-										color3.R = (color2.R * 3 + color4.R * 2) / 5;
-										color3.G = (color2.G * 3 + color4.G * 2) / 5;
-										color3.B = (color2.B * 3 + color4.B * 2) / 5;
-										color3.A = (color2.A * 3 + color4.A * 2) / 5;
+										color3.R = (byte)((color2.R * 3 + color4.R * 2) / 5);
+										color3.G = (byte)((color2.G * 3 + color4.G * 2) / 5);
+										color3.B = (byte)((color2.B * 3 + color4.B * 2) / 5);
+										color3.A = (byte)((color2.A * 3 + color4.A * 2) / 5);
 										Main.spriteBatch.Draw(Main.liquidTexture[num12], value - Main.screenPosition + new Vector2((float)num28, (float)num29) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(value2.X + num28, value2.Y + num29, width, height)), color3, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
 									}
 								}
@@ -51117,9 +51107,9 @@
 				}
 			}
 			Main.tileColor.A = 255;
-			Main.tileColor.R = (Main.bgColor.R + Main.bgColor.G + Main.bgColor.B + Main.bgColor.R * 7) / 10;
-			Main.tileColor.G = (Main.bgColor.R + Main.bgColor.G + Main.bgColor.B + Main.bgColor.G * 7) / 10;
-			Main.tileColor.B = (Main.bgColor.R + Main.bgColor.G + Main.bgColor.B + Main.bgColor.B * 7) / 10;
+			Main.tileColor.R = (byte)((Main.bgColor.R + Main.bgColor.G + Main.bgColor.B + Main.bgColor.R * 7) / 10);
+			Main.tileColor.G = (byte)((Main.bgColor.R + Main.bgColor.G + Main.bgColor.B + Main.bgColor.G * 7) / 10);
+			Main.tileColor.B = (byte)((Main.bgColor.R + Main.bgColor.G + Main.bgColor.B + Main.bgColor.B * 7) / 10);
 			Main.tileColor = SkyManager.Instance.ProcessTileColor(Main.tileColor);
 			float num54 = (float)(Main.maxTilesX / 4200);
 			num54 *= num54;

