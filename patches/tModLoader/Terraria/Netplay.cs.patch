--- src/Terraria\Terraria\Netplay.cs
+++ src/tModLoader\Terraria\Netplay.cs
@@ -1,5 +_,7 @@
 using System;
+using System.Collections.Concurrent;
 using System.IO;
+using System.Linq;
 using System.Net;
 using System.Net.Sockets;
 
@@ -7,6 +_,7 @@
 using System.Runtime.CompilerServices;
 #endif
 using System.Threading;
+using System.Threading.Tasks;
 using Terraria.IO;
 using Terraria.Net;
 using Terraria.Net.Sockets;
@@ -48,6 +_,20 @@
 
 		public static event Action OnDisconnect;
 
+		private static readonly ConcurrentQueue<Task> mainThreadTasks = new ConcurrentQueue<Task>();
+
+		internal static void OnUpdate() {
+			Task t;
+			while (mainThreadTasks.TryDequeue(out t))
+				t.RunSynchronously();
+		}
+
+		private static void InvokeOnMainThread(Action action) {
+			var t = new Task(action);
+			mainThreadTasks.Enqueue(t);
+			t.Wait();
+		}
+
 		private static void OpenPort()
 		{
 			Netplay.portForwardIP = Netplay.GetLocalIPAddress();
@@ -218,9 +_,9 @@
 				catch
 				{
 #if MAC
-                    Thread.Sleep(200);
-                    Netplay.Connection.Socket.Close();
-                    Netplay.Connection.Socket = new TcpSocket();
+					Thread.Sleep(200);
+					Netplay.Connection.Socket.Close();
+					Netplay.Connection.Socket = new TcpSocket();
 #endif
 					if (!Netplay.disconnect && Main.gameMenu)
 					{
@@ -275,7 +_,7 @@
 					{
 						if (NetMessage.buffer[256].checkBytes)
 						{
-							NetMessage.CheckBytes(256);
+							InvokeOnMainThread(() => NetMessage.CheckBytes(256));
 						}
 						Netplay.Connection.IsActive = true;
 						if (Netplay.Connection.State == 0)
@@ -359,7 +_,6 @@
 									});
 							}
 						}
-						Thread.Sleep(1);
 					}
 					else if (Netplay.Connection.IsActive)
 					{
@@ -438,7 +_,7 @@
 			{
 				Netplay.Clients[num].Reset();
 				Netplay.Clients[num].Socket = client;
-				Console.WriteLine(client.GetRemoteAddress() + " is connecting...");
+				//Console.WriteLine(client.GetRemoteAddress() + " is connecting...");
 			}
 			if (Netplay.FindNextOpenClientSlot() == -1)
 			{
@@ -548,19 +_,20 @@
 					}
 				}
 				IL_165:
+				if (NetMessage.buffer.Any(b => b.checkBytes) || Clients.Any(c => c.PendingTermination)) InvokeOnMainThread(() => {
+					for (int k = 0; k < 256; k++) {
+						if (NetMessage.buffer[k].checkBytes) {
+							NetMessage.CheckBytes(k);
+						}
+						if (Netplay.Clients[k].PendingTermination) {
+							Netplay.Clients[k].Reset();
+							NetMessage.syncPlayers();
+						}
+					}
+				});
 				int num3 = 0;
 				for (int k = 0; k < 256; k++)
 				{
-					if (NetMessage.buffer[k].checkBytes)
-					{
-						NetMessage.CheckBytes(k);
-					}
-					if (Netplay.Clients[k].PendingTermination)
-					{
-						Netplay.Clients[k].Reset();
-						NetMessage.syncPlayers();
-					}
-					else
 					{
 						if (Netplay.Clients[k].IsConnected())
 						{

