--- src/Terraria\Terraria\IngameOptions.cs
+++ src/tModLoader\Terraria\IngameOptions.cs
@@ -2,7 +_,9 @@
 using Microsoft.Xna.Framework.Graphics;
 using Microsoft.Xna.Framework.Input;
 using System;
+using System.Linq;
 using Terraria.GameContent;
+using Terraria.ModLoader;
 using Terraria.Social;
 using Terraria.UI;
 
@@ -14,6 +_,7 @@
 		public const int height = 480;
 		public static float[] leftScale = new float[]
 		{
+			0.7f,
 			0.7f,
 			0.7f,
 			0.7f,
@@ -137,6 +_,7 @@
 			bool flag2 = SocialAPI.Network != null && SocialAPI.Network.CanInvite();
 			int num5 = flag2 ? 1 : 0;
 			int num6 = 6 + num5;
+			num6++;
 			Vector2 anchor = new Vector2(value3.X + value2.X / 4f, value3.Y + (float)(num * 5 / 2));
 			Vector2 offset = new Vector2(0f, value2.Y - (float)(num * 5)) / (float)(num6 + 1);
 			for (int i = 0; i <= num6; i++)
@@ -196,35 +_,44 @@
 					Main.PlaySound(10, -1, -1, 1);
 				}
 			}
-			if (flag2 && IngameOptions.DrawLeftSide(sb, Lang.menu[147], 4, anchor, offset, IngameOptions.leftScale, 0.7f, 0.8f, 0.01f))
+			if (IngameOptions.DrawLeftSide(sb, "Mod " + Lang.menu[66], 4, anchor, offset, IngameOptions.leftScale, 0.7f, 0.8f, 0.01f))
 			{
 				IngameOptions.leftHover = 4;
 				if (flag)
 				{
+					IngameOptions.category = 4;
+					Main.PlaySound(10, -1, -1, 1);
+				}
+			}
+			if (flag2 && IngameOptions.DrawLeftSide(sb, Lang.menu[147], 5, anchor, offset, IngameOptions.leftScale, 0.7f, 0.8f, 0.01f))
+			{
+				IngameOptions.leftHover = 5;
+				if (flag)
+				{
 					IngameOptions.Close();
 					SocialAPI.Network.OpenInviteInterface();
 				}
 			}
-			if (IngameOptions.DrawLeftSide(sb, Lang.menu[131], 4 + num5, anchor, offset, IngameOptions.leftScale, 0.7f, 0.8f, 0.01f))
-			{
-				IngameOptions.leftHover = 4 + num5;
+			if (IngameOptions.DrawLeftSide(sb, Lang.menu[131], 5 + num5, anchor, offset, IngameOptions.leftScale, 0.7f, 0.8f, 0.01f))
+			{
+				IngameOptions.leftHover = 5 + num5;
 				if (flag)
 				{
 					IngameOptions.Close();
 					AchievementsUI.Open();
 				}
 			}
-			if (IngameOptions.DrawLeftSide(sb, Lang.menu[118], 5 + num5, anchor, offset, IngameOptions.leftScale, 0.7f, 0.8f, 0.01f))
-			{
-				IngameOptions.leftHover = 5 + num5;
+			if (IngameOptions.DrawLeftSide(sb, Lang.menu[118], 6 + num5, anchor, offset, IngameOptions.leftScale, 0.7f, 0.8f, 0.01f))
+			{
+				IngameOptions.leftHover = 6 + num5;
 				if (flag)
 				{
 					IngameOptions.Close();
 				}
 			}
-			if (IngameOptions.DrawLeftSide(sb, Lang.inter[35], 6 + num5, anchor, offset, IngameOptions.leftScale, 0.7f, 0.8f, 0.01f))
-			{
-				IngameOptions.leftHover = 6 + num5;
+			if (IngameOptions.DrawLeftSide(sb, Lang.inter[35], 7 + num5, anchor, offset, IngameOptions.leftScale, 0.7f, 0.8f, 0.01f))
+			{
+				IngameOptions.leftHover = 7 + num5;
 				if (flag)
 				{
 					IngameOptions.Close();
@@ -266,6 +_,12 @@
 					num3 = 0.801f;
 					num4 = 0.001f;
 					break;
+				case 4:
+					num8 = ModLoader.ModLoader.modHotKeys.Keys.Count + 1;
+					num2 = 0.8f;
+					num3 = 0.801f;
+					num4 = 0.001f;
+					break;
 			}
 			Vector2 anchor2 = new Vector2(value3.X + value2.X * 3f / 4f, value3.Y + (float)(num * 5 / 2));
 			Vector2 offset2 = new Vector2(0f, value2.Y - (float)(num * 3)) / (float)(num8 + 1);
@@ -1147,6 +_,72 @@
 							Main.setKey = -1;
 							Main.blockKey = pressedKeys2[0];
 							Main.blockInput = false;
+						}
+					}
+				}
+			}
+			if (IngameOptions.category == 4)
+			{
+				int num13 = 0;
+				anchor2.X -= 30f;
+				int num14 = 0;
+				string[] currentBinding = new string[ModLoader.ModLoader.modHotKeys.Count];
+				int j = 0;
+				foreach (var a in ModLoader.ModLoader.modHotKeys.Values)
+				{
+					currentBinding[j] = a.Item2;
+					j++;
+				}
+				string[] hotKeyName = ModLoader.ModLoader.modHotKeys.Keys.ToArray<string>();
+				for (int i = 0; i < hotKeyName.Length; i++)
+				{
+					if (IngameOptions.DrawRightSide(sb, hotKeyName[i] + (hotKeyName[i].Length <= 18 ? "                    ".Substring(hotKeyName[i].Length) : "  "), num13, anchor2, offset2, IngameOptions.rightScale[num13], (IngameOptions.rightScale[num13] - num2) / (num3 - num2), (Main.setKey == num14) ? Color.Gold : default(Color)))
+					{
+						IngameOptions.rightHover = num13;
+						if (flag)
+						{
+							Main.setKey = num14;
+						}
+					}
+					IngameOptions.valuePosition.X = IngameOptions.valuePosition.X + 10f;
+					if (IngameOptions.DrawValue(sb, (Main.setKey == num14) ? "_" : currentBinding[i], num13, num3, (Main.setKey == num14) ? Color.Gold : ((IngameOptions.rightHover == num13) ? Color.White : default(Color))))
+					{
+						IngameOptions.rightHover = num13;
+						if (flag)
+						{
+							Main.setKey = num14;
+						}
+					}
+					num13++;
+					num14++;
+				}
+				anchor2.X += 30f;
+				if (IngameOptions.DrawRightSide(sb, Lang.menu[86], num13, anchor2, offset2, IngameOptions.rightScale[num13], (IngameOptions.rightScale[num13] - num2) / (num3 - num2), default(Color)))
+				{
+					IngameOptions.rightHover = num13;
+					if (flag)
+					{
+						foreach (string key in ModLoader.ModLoader.modHotKeys.Keys.ToList())
+						{
+							ModLoader.ModLoader.modHotKeys[key] = new Tuple<Mod, string, string>(ModLoader.ModLoader.modHotKeys[key].Item1, ModLoader.ModLoader.modHotKeys[key].Item3, ModLoader.ModLoader.modHotKeys[key].Item3);
+						}
+						Main.setKey = -1;
+					}
+				}
+				num13++;
+				if (Main.setKey >= 0)
+				{
+					Main.blockInput = true;
+					Keys[] pressedKeys = Main.keyState.GetPressedKeys();
+					if (pressedKeys.Length > 0)
+					{
+						string text = string.Concat(pressedKeys[0]);
+						if (text != "None")
+						{
+							ModLoader.ModLoader.modHotKeys[ModLoader.ModLoader.modHotKeys.ElementAt(Main.setKey).Key] = new Tuple<Mod, string, string>(ModLoader.ModLoader.modHotKeys.ElementAt(Main.setKey).Value.Item1, text, ModLoader.ModLoader.modHotKeys.ElementAt(Main.setKey).Value.Item3);
+							Main.blockKey = pressedKeys[0];
+							Main.blockInput = false;
+							Main.setKey = -1;
 						}
 					}
 				}

