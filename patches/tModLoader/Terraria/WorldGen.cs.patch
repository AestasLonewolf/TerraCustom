--- src/Terraria\Terraria\WorldGen.cs
+++ src/tModLoader\Terraria\WorldGen.cs
@@ -14,6 +_,8 @@
 using Terraria.Graphics.Capture;
 using Terraria.ID;
 using Terraria.IO;
+using Terraria.ModLoader;
+using Terraria.ModLoader.IO;
 using Terraria.ObjectData;
 using Terraria.Utilities;
 using Terraria.World.Generation;
@@ -547,7 +_,13 @@
 		private static int lAltarY;
 		public static int tileReframeCount = 0;
 		public static bool noMapUpdate = false;
+		public static StructureMap structures;
+		public static double worldSurface;
 		public static double worldSurfaceLow;
+		public static double worldSurfaceHigh;
+		public static double rockLayer;
+		public static double rockLayerLow;
+		public static double rockLayerHigh;
 		public static int tLeft;
 		public static int tRight;
 		public static int tTop;
@@ -898,7 +_,7 @@
 					return true;
 				}
 			}
-			for (int j = 0; j < 540; j++)
+			for (int j = 0; j < Main.nextNPC.Length; j++)
 			{
 				if (Main.nextNPC[j] && WorldGen.CheckConditions(j))
 				{
@@ -923,6 +_,10 @@
 
 		public static bool CheckConditions(int type)
 		{
+			if (!NPCLoader.CheckConditions(type))
+			{
+				return false;
+			}
 			if (type != 160)
 			{
 				return true;
@@ -1614,7 +_,7 @@
 												}
 											}
 										}
-										else if (Main.tile[num9, num10].type == 21)
+										else if (TileLoader.IsChest(Main.tile[num9, num10].type))
 										{
 											if (num8 > 0)
 											{
@@ -1693,7 +_,7 @@
 			WorldGen.roomY2 = y;
 			WorldGen.numRoomTiles = 0;
 			WorldGen.roomHighestCount = 0;
-			for (int i = 0; i < 446; i++)
+			for (int i = 0; i < WorldGen.houseTile.Length; i++)
 			{
 				WorldGen.houseTile[i] = false;
 			}
@@ -1768,7 +_,7 @@
 				{
 					return;
 				}
-				if (Main.tile[x, y].type == 11 && (Main.tile[x, y].frameX == 0 || Main.tile[x, y].frameX == 54))
+				if (TileLoader.CloseDoorID(Main.tile[x, y]) >= 0 && (Main.tile[x, y].frameX == 0 || Main.tile[x, y].frameX == 54))
 				{
 					return;
 				}
@@ -1965,7 +_,7 @@
 			{
 				for (int n = j - num; n < j + num; n++)
 				{
-					if (Main.tile[m, n].active() && Main.tile[m, n].type == 21)
+					if (Main.tile[m, n].active() && TileLoader.IsChest(Main.tile[m, n].type))
 					{
 						return false;
 					}
@@ -2111,6 +_,18 @@
 
 		public static void worldGenCallBack(object threadContext)
 		{
+			try
+			{
+				do_worldGenCallBack(threadContext);
+			}
+			catch (Exception e)
+			{
+				ErrorLogger.LogException(e);
+			}
+		}
+
+		public static void do_worldGenCallBack(object threadContext)
+		{
 			Main.PlaySound(10, -1, -1, 1);
 			WorldGen.clearWorld();
 			WorldGen.generateWorld(-1, threadContext as GenerationProgress);
@@ -2176,6 +_,18 @@
 
 		public static void playWorldCallBack(object threadContext)
 		{
+			try
+			{
+				do_playWorldCallBack(threadContext);
+			}
+			catch (Exception e)
+			{
+				ErrorLogger.LogException(e);
+			}
+		}
+
+		public static void do_playWorldCallBack(object threadContext)
+		{
 			if (Main.rand == null)
 			{
 				Main.rand = new Random((int)DateTime.Now.Ticks);
@@ -2217,12 +_,19 @@
 					{
 						if (!WorldGen.worldBackup)
 						{
-							Console.WriteLine("Load failed!  No backup found.");
+							string message = "Load failed!  No backup found.";
+							if (WorldIO.customDataFail != null)
+							{
+								message = WorldIO.customDataFail.modName + " " + message;
+								message += "\n" + WorldIO.customDataFail.InnerException;
+							}
+							Console.WriteLine(message);
 							return;
 						}
 						FileUtilities.Copy(Main.worldPathName, Main.worldPathName + ".bad", isCloudSave, true);
 						FileUtilities.Copy(Main.worldPathName + ".bak", Main.worldPathName, isCloudSave, true);
 						FileUtilities.Delete(Main.worldPathName + ".bak", isCloudSave);
+						WorldIO.LoadDedServBackup(Main.worldPathName, isCloudSave);
 						WorldFile.loadWorld(Main.ActiveWorldFileData.IsCloudSave);
 						if (WorldGen.loadFailed || !WorldGen.loadSuccess)
 						{
@@ -2232,7 +_,14 @@
 								FileUtilities.Copy(Main.worldPathName, Main.worldPathName + ".bak", isCloudSave, true);
 								FileUtilities.Copy(Main.worldPathName + ".bad", Main.worldPathName, isCloudSave, true);
 								FileUtilities.Delete(Main.worldPathName + ".bad", isCloudSave);
-								Console.WriteLine("Load failed!");
+								WorldIO.RevertDedServBackup(Main.worldPathName, isCloudSave);
+								string message = "Load failed!";
+								if (WorldIO.customDataFail != null)
+								{
+									message = WorldIO.customDataFail.modName + " " + message;
+									message += "\n" + WorldIO.customDataFail.InnerException;
+								}
+								Console.WriteLine(message);
 								return;
 							}
 						}
@@ -2582,6 +_,7 @@
 				Main.liquidBuffer[num10] = new LiquidBuffer();
 			}
 			WorldGen.setWorldSize();
+			WorldHooks.SetupWorld();
 			WorldGen.worldCleared = true;
 		}
 
@@ -4387,13 +_,13 @@
 				WorldGen.genRand = new Random((int)DateTime.Now.Ticks);
 			}
 			MicroBiome.ResetAll();
-			StructureMap structures = new StructureMap();
-			double worldSurface = 0.0;
+			structures = new StructureMap();
+			worldSurface = 0.0;
 			WorldGen.worldSurfaceLow = 0.0;
-			double worldSurfaceHigh = 0.0;
-			double rockLayer = 0.0;
-			double rockLayerLow = 0.0;
-			double rockLayerHigh = 0.0;
+			worldSurfaceHigh = 0.0;
+			rockLayer = 0.0;
+			rockLayerLow = 0.0;
+			rockLayerHigh = 0.0;
 			int copper = 7;
 			int iron = 6;
 			int silver = 9;
@@ -4434,6 +_,7 @@
 					}
 				}
 			}
+			WorldHooks.PreWorldGen();
 			WorldGen.AddGenerationPass("Reset", delegate(GenerationProgress progress)
 				{
 					WorldGen.noTileActions = true;
@@ -7289,7 +_,7 @@
 									int num12 = WorldGen.genRand.Next(num - m, num + m + 1);
 									int num13 = WorldGen.genRand.Next(num2 - num6, num2 + num6 - 2);
 									WorldGen.PlaceTile(num12, num13, 4, true, false, -1, 3);
-									if (Main.tile[num12, num13].type == 4)
+									if (TileLoader.IsTorch(Main.tile[num12, num13].type))
 									{
 										flag3 = true;
 									}
@@ -10351,7 +_,9 @@
 					WorldGen.gen = false;
 					Main.AnglerQuestSwap();
 				});
+			WorldHooks.ModifyWorldGenTasks(WorldGen._generator._passes, ref WorldGen._generator._totalLoadWeight);
 			WorldGen._generator.GenerateWorld(customProgressObject);
+			WorldHooks.PostWorldGen();
 			Main.WorldFileMetadata = FileMetadata.FromCurrentSettings(FileType.World);
 		}
 
@@ -13156,7 +_,7 @@
 				Main.tile[i, j] = new Tile();
 			}
 			int frameX = (int)Main.tile[i, j].frameX;
-			if (Main.tile[i, j].type != 11)
+			if (TileLoader.CloseDoorID(Main.tile[i, j]) < 0)
 			{
 				return false;
 			}
@@ -13203,6 +_,7 @@
 					}
 				}
 			}
+			ushort closeDoorID = (ushort)TileLoader.CloseDoorID(Main.tile[i, j]);
 			for (int m = num5; m < num5 + 2; m++)
 			{
 				for (int n = num4; n < num4 + 3; n++)
@@ -13213,7 +_,7 @@
 						{
 							Main.tile[m, n] = new Tile();
 						}
-						Main.tile[m, n].type = 10;
+						Main.tile[m, n].type = closeDoorID;
 						Main.tile[m, n].frameX = (short)(WorldGen.genRand.Next(3) * 18);
 					}
 					else
@@ -13411,7 +_,7 @@
 							{
 								for (int k = num8 - 8; k < num8 + 8; k++)
 								{
-									if (Main.tile[j, k].active() && Main.tile[j, k].type == 4)
+									if (Main.tile[j, k].active() && TileLoader.IsTorch(Main.tile[j, k].type))
 									{
 										flag2 = true;
 										break;
@@ -19889,11 +_,7 @@
 			{
 				Main.tile[i, j] = new Tile();
 			}
-			if (Main.tile[i, j].type != 10)
-			{
-				return false;
-			}
-			if (Main.tile[i, j].frameY >= 594 && Main.tile[i, j].frameY <= 646)
+			if (TileLoader.OpenDoorID(Main.tile[i, j]) < 0)
 			{
 				return false;
 			}
@@ -19956,8 +_,9 @@
 			}
 			int num6 = num * 54;
 			Main.PlaySound(8, i * 16, j * 16, 1);
+			ushort openDoorID = (ushort)TileLoader.OpenDoorID(Main.tile[i, j]);
 			Main.tile[num4, num2].active(true);
-			Main.tile[num4, num2].type = 11;
+			Main.tile[num4, num2].type = openDoorID;
 			Main.tile[num4, num2].frameY = (short)num6;
 			Main.tile[num4, num2].frameX = num3;
 			Main.tile[num4, num2].color(color);
@@ -19966,7 +_,7 @@
 				Main.tile[num4 + 1, num2] = new Tile();
 			}
 			Main.tile[num4 + 1, num2].active(true);
-			Main.tile[num4 + 1, num2].type = 11;
+			Main.tile[num4 + 1, num2].type = openDoorID;
 			Main.tile[num4 + 1, num2].frameY = (short)num6;
 			Main.tile[num4 + 1, num2].frameX = (short)(num3 + 18);
 			Main.tile[num4 + 1, num2].color(color);
@@ -19975,7 +_,7 @@
 				Main.tile[num4, num2 + 1] = new Tile();
 			}
 			Main.tile[num4, num2 + 1].active(true);
-			Main.tile[num4, num2 + 1].type = 11;
+			Main.tile[num4, num2 + 1].type = openDoorID;
 			Main.tile[num4, num2 + 1].frameY = (short)(num6 + 18);
 			Main.tile[num4, num2 + 1].frameX = num3;
 			Main.tile[num4, num2 + 1].color(color2);
@@ -19984,7 +_,7 @@
 				Main.tile[num4 + 1, num2 + 1] = new Tile();
 			}
 			Main.tile[num4 + 1, num2 + 1].active(true);
-			Main.tile[num4 + 1, num2 + 1].type = 11;
+			Main.tile[num4 + 1, num2 + 1].type = openDoorID;
 			Main.tile[num4 + 1, num2 + 1].frameY = (short)(num6 + 18);
 			Main.tile[num4 + 1, num2 + 1].frameX = (short)(num3 + 18);
 			Main.tile[num4 + 1, num2 + 1].color(color2);
@@ -19993,7 +_,7 @@
 				Main.tile[num4, num2 + 2] = new Tile();
 			}
 			Main.tile[num4, num2 + 2].active(true);
-			Main.tile[num4, num2 + 2].type = 11;
+			Main.tile[num4, num2 + 2].type = openDoorID;
 			Main.tile[num4, num2 + 2].frameY = (short)(num6 + 36);
 			Main.tile[num4, num2 + 2].frameX = num3;
 			Main.tile[num4, num2 + 2].color(color3);
@@ -20002,7 +_,7 @@
 				Main.tile[num4 + 1, num2 + 2] = new Tile();
 			}
 			Main.tile[num4 + 1, num2 + 2].active(true);
-			Main.tile[num4 + 1, num2 + 2].type = 11;
+			Main.tile[num4 + 1, num2 + 2].type = openDoorID;
 			Main.tile[num4 + 1, num2 + 2].frameY = (short)(num6 + 36);
 			Main.tile[num4 + 1, num2 + 2].frameX = (short)(num3 + 18);
 			Main.tile[num4 + 1, num2 + 2].color(color3);
@@ -25853,7 +_,7 @@
 			{
 			}
 			k = j - k / 18;
-			return Main.tile[num, k - 1].type == 21 || Main.tile[num + 1, k - 1].type == 21 || Main.tile[num, k - 1].type == 441 || Main.tile[num + 1, k - 1].type == 441 || Main.tile[num, k - 1].type == 88 || Main.tile[num + 1, k - 1].type == 88;
+			return TileLoader.IsChest(Main.tile[num, k - 1].type) || TileLoader.IsChest(Main.tile[num + 1, k - 1].type) || Main.tile[num, k - 1].type == 441 || Main.tile[num + 1, k - 1].type == 441 || Main.tile[num, k - 1].type == 88 || Main.tile[num + 1, k - 1].type == 88;
 		}
 
 		public static void OreRunner(int i, int j, double strength, int steps, ushort type)
@@ -26112,7 +_,7 @@
 				{
 					flag = true;
 				}
-				if (Main.tile[l, j - 1].active() && (Main.tile[l, j - 1].type == 21 || Main.tile[l, j - 1].type == 441))
+				if (Main.tile[l, j - 1].active() && (TileLoader.IsChest(Main.tile[l, j - 1].type) || Main.tile[l, j - 1].type == 441))
 				{
 					return;
 				}
@@ -27557,7 +_,8 @@
 					{
 						Main.tile[l, m] = new Tile();
 					}
-					if (Main.tile[l, m].active() && (Main.tile[l, m].type == 139 || Main.tile[l, m].type == 35))
+					if (Main.tile[l, m].active() && (Main.tile[l, m].type == 139 || Main.tile[l, m].type == 35
+						|| TileLoader.IsModMusicBox(Main.tile[l, m])))
 					{
 						if (Main.tile[l, m].frameX < 36)
 						{
@@ -27944,10 +_,6 @@
 
 		public static bool PlaceObject(int x, int y, int type, bool mute = false, int style = 0, int alternate = 0, int random = -1, int direction = -1)
 		{
-			if (type >= 446)
-			{
-				return false;
-			}
 			TileObject toBePlaced;
 			if (!TileObject.CanPlace(x, y, type, style, direction, out toBePlaced, false))
 			{
@@ -30768,7 +_,7 @@
 						int wall = (int)Main.tile[k, l].wall;
 						if (conversionType == 4)
 						{
-							if (type <= 446 && wall <= 225)
+							if (true)
 							{
 								if (WallID.Sets.Conversion.Grass[wall] && wall != 81)
 								{
@@ -30846,7 +_,7 @@
 						}
 						else if (conversionType == 2)
 						{
-							if (type <= 446 && wall <= 225)
+							if (true)
 							{
 								if (WallID.Sets.Conversion.Grass[wall] && wall != 70)
 								{
@@ -30926,7 +_,7 @@
 						}
 						else if (conversionType == 1)
 						{
-							if (type <= 446 && wall <= 225)
+							if (true)
 							{
 								if (WallID.Sets.Conversion.Grass[wall] && wall != 69)
 								{
@@ -32550,10 +_,6 @@
 
 		public static bool PlaceTile(int i, int j, int type, bool mute = false, bool forced = false, int plr = -1, int style = 0)
 		{
-			if (type >= 446)
-			{
-				return false;
-			}
 			bool result = false;
 			if (i >= 0 && j >= 0 && i < Main.maxTilesX && j < Main.maxTilesY)
 			{
@@ -32827,7 +_,7 @@
 							WorldGen.SquareTileFrame(i, j, true);
 						}
 					}
-					else if (type == 4)
+					else if (TileLoader.IsTorch(type))
 					{
 						if (Main.tile[i - 1, j] == null)
 						{
@@ -33221,7 +_,11 @@
 					{
 						fail = true;
 					}
-					if (tile.wall == 21 || tile.wall == 186 || tile.wall == 136 || tile.wall == 137 || tile.wall == 168 || tile.wall == 169 || tile.wall == 172)
+					WallLoader.KillWall(i, j, tile.wall, ref fail);
+					if (!WallLoader.KillSound(i, j, tile.wall))
+					{
+					}
+					else if (tile.wall == 21 || tile.wall == 186 || tile.wall == 136 || tile.wall == 137 || tile.wall == 168 || tile.wall == 169 || tile.wall == 172)
 					{
 						Main.PlaySound(13, i * 16, j * 16, 1);
 					}
@@ -33238,6 +_,7 @@
 					{
 						num = 3;
 					}
+					WallLoader.NumDust(i, j, tile.wall, fail, ref num);
 					for (int k = 0; k < num; k++)
 					{
 						int num2 = 0;
@@ -33705,6 +_,10 @@
 						if (tile.wall == 151 || tile.wall == 152)
 						{
 							num2 = 215;
+						}
+						if (!WallLoader.CreateDust(i, j, tile.wall, ref num2))
+						{
+							continue;
 						}
 						if (tile.wall == 44)
 						{
@@ -34205,14 +_,14 @@
 					{
 						num4 = 2210 + (int)tile.wall - 138;
 					}
-					if (num4 > 0)
+					if (WallLoader.Drop(i, j, tile.wall, ref num4) && num4 > 0)
 					{
 						Item.NewItem(i * 16, j * 16, 16, 16, num4, 1, false, 0, false, false);
 					}
 					tile.wall = 0;
 					tile.wallColor(0);
 					WorldGen.SquareWallFrame(i, j, true);
-					if (tile.type >= 0 && tile.type < 446 && TileID.Sets.FramesOnKillWall[(int)tile.type])
+					if (tile.type >= 0 && TileID.Sets.FramesOnKillWall[(int)tile.type])
 					{
 						WorldGen.TileFrame(i, j, false, false);
 					}
@@ -34283,6 +_,10 @@
 			{
 				return false;
 			}
+			if (!TileLoader.CanKillTile(i, j, tile.type, ref blockDamaged))
+			{
+				return false;
+			}
 			if (j >= 1)
 			{
 				tile2 = Main.tile[i, j - 1];
@@ -34355,7 +_,7 @@
 						int num2 = i - (int)(tile.frameX % 54 / 18);
 						for (int k = 0; k < 3; k++)
 						{
-							if (Main.tile[num2 + k, j - 1].active() && (Main.tile[num2 + k, j - 1].type == 21 || Main.tile[num2 + k, j - 1].type == 441))
+							if (Main.tile[num2 + k, j - 1].active() && (TileLoader.IsChest(Main.tile[num2 + k, j - 1].type) || Main.tile[num2 + k, j - 1].type == 441))
 							{
 								blockDamaged = true;
 								return false;
@@ -34392,7 +_,7 @@
 					{
 						Main.tile[i, j - 1] = new Tile();
 					}
-					if (j >= 1 && Main.tile[i, j - 1].active() && ((Main.tile[i, j - 1].type == 5 && tile.type != 5) || (Main.tile[i, j - 1].type == 323 && tile.type != 323) || (Main.tile[i, j - 1].type == 21 && tile.type != 21) || (Main.tile[i, j - 1].type == 323 && tile.type != 323) || (Main.tile[i, j - 1].type == 88 && tile.type != 88) || (Main.tile[i, j - 1].type == 26 && tile.type != 26) || (Main.tile[i, j - 1].type == 72 && tile.type != 72)))
+					if (j >= 1 && Main.tile[i, j - 1].active() && ((Main.tile[i, j - 1].type == 5 && tile.type != 5) || (Main.tile[i, j - 1].type == 323 && tile.type != 323) || (TileLoader.IsChest(Main.tile[i, j - 1].type) && !TileLoader.IsChest(tile.type)) || (Main.tile[i, j - 1].type == 323 && tile.type != 323) || (Main.tile[i, j - 1].type == 88 && tile.type != 88) || (Main.tile[i, j - 1].type == 26 && tile.type != 26) || (Main.tile[i, j - 1].type == 72 && tile.type != 72)))
 					{
 						if (Main.tile[i, j - 1].type == 5)
 						{
@@ -34420,16 +_,20 @@
 						int num = i - frameX % 54 / 18;
 						for (int k = 0; k < 3; k++)
 						{
-							if (Main.tile[num + k, j - 1].active() && (Main.tile[num + k, j - 1].type == 21 || Main.tile[num + k, j - 1].type == 441))
+							if (Main.tile[num + k, j - 1].active() && (TileLoader.IsChest(Main.tile[num + k, j - 1].type) || Main.tile[num + k, j - 1].type == 441))
 							{
 								fail = true;
 								break;
 							}
 						}
 					}
+					TileLoader.KillTile(i, j, tile.type, ref fail, ref effectOnly, ref noItem);
 					if (!effectOnly && !WorldGen.stopDrops)
 					{
-						if (tile.type == 127)
+						if (!TileLoader.KillSound(i, j, tile.type))
+						{
+						}
+						else if (tile.type == 127)
 						{
 							Main.PlaySound(2, i * 16, j * 16, 27);
 						}
@@ -34672,6 +_,7 @@
 					{
 						num13 = 0;
 					}
+					TileLoader.NumDust(i, j, tile.type, fail, ref num13);
 					int num14 = 0;
 					while (num14 < num13)
 					{
@@ -36628,7 +_,7 @@
 								goto IL_363E;
 						}
 						IL_3641:
-						if (num15 >= 0)
+						if (TileLoader.CreateDust(i, j, tile.type, ref num15) && num15 >= 0)
 						{
 							if (tile.type == 352 && num15 == 5)
 							{
@@ -36760,6 +_,7 @@
 						}
 						if (tile.type == 73)
 						{
+							//patch file: num43, num44
 							num43 = 200;
 							num44 = 50;
 							if (tile.frameX >= 108)
@@ -36821,6 +_,7 @@
 						{
 							num45 = 10;
 						}
+						TileLoader.DropCritterChance(i, j, tile.type, ref num43, ref num44, ref num45);
 						if (num43 > 0 && NPC.CountNPCS(357) < 5 && WorldGen.genRand.Next(num43) == 0)
 						{
 							int type2 = 357;
@@ -38586,7 +_,8 @@
 						{
 							num49 = 2504;
 						}
-						if (num49 > 0)
+						bool vanillaDrop = TileLoader.Drop(i, j, tile.type);
+						if (vanillaDrop && num49 > 0)
 						{
 							int num71 = 1;
 							if (flag2)
@@ -38595,7 +_,7 @@
 							}
 							Item.NewItem(i * 16, j * 16, 16, 16, num49, num71, false, -1, false, false);
 						}
-						if (num50 > 0)
+						if (vanillaDrop && num50 > 0)
 						{
 							Item.NewItem(i * 16, j * 16, 16, 16, num50, 1, false, -1, false, false);
 						}
@@ -40561,6 +_,7 @@
 				}
 				int num7 = WorldGen.genRand.Next(10, Main.maxTilesX - 10);
 				int num8 = WorldGen.genRand.Next(10, (int)Main.worldSurface - 1);
+				//patch file: num7, num8
 				int num9 = num7 - 1;
 				int num10 = num7 + 2;
 				int num11 = num8 - 1;
@@ -41315,6 +_,8 @@
 							}
 						}
 					}
+					TileLoader.RandomUpdate(num7, num8, Main.tile[num7, num8].type);
+					WallLoader.RandomUpdate(num7, num8, Main.tile[num7, num8].wall);
 				}
 				num6++;
 			}
@@ -42081,6 +_,8 @@
 						}
 					}
 					WorldGen.SpreadDesertWalls(num, num64, num65);
+					TileLoader.RandomUpdate(num64, num65, Main.tile[num64, num65].type);
+					WallLoader.RandomUpdate(num64, num65, Main.tile[num64, num65].wall);
 				}
 				num63++;
 			}
@@ -42104,6 +_,7 @@
 					Projectile.NewProjectile(vector.X, vector.Y, num147, num148, 12, 1000, 10f, Main.myPlayer, 0f, 0f);
 				}
 			}
+			WorldHooks.PostUpdate();
 		}
 
 		public static void SpreadDesertWalls(int wallDist, int i, int j)
@@ -46602,7 +_,11 @@
 					}
 					if (tile.active())
 					{
-						if (noBreak && Main.tileFrameImportant[(int)tile.type] && tile.type != 4)
+						if (!TileLoader.TileFrame(i, j, tile.type, ref resetFrame, ref noBreak))
+						{
+							return;
+						}
+						if (noBreak && Main.tileFrameImportant[(int)tile.type] && !TileLoader.IsTorch(tile.type))
 						{
 							return;
 						}
@@ -46616,7 +_,7 @@
 						Rectangle rectangle = new Rectangle(-1, -1, 0, 0);
 						if (Main.tileFrameImportant[(int)tile.type])
 						{
-							if (num == 4)
+							if (TileLoader.IsTorch(num))
 							{
 								Tile tile2 = Main.tile[i, j - 1];
 								Tile tile3 = Main.tile[i, j + 1];
@@ -47781,6 +_,10 @@
 							{
 								WorldGen.CheckPalmTree(i, j);
 							}
+							else
+							{
+								TileLoader.CheckModTile(i, j, num);
+							}
 							return;
 						}
 						else
@@ -51118,7 +_,7 @@
 									if (tile3 != null && !tile3.active())
 									{
 										bool flag18 = true;
-										if (tile2.active() && (tile2.type == 21 || tile2.type == 441 || tile2.type == 323 || tile2.type == 88))
+										if (tile2.active() && (TileLoader.IsChest(tile2.type) || tile2.type == 441 || tile2.type == 323 || tile2.type == 88))
 										{
 											flag18 = false;
 										}
@@ -51184,7 +_,7 @@
 								else if (Main.netMode == 2 && tile3 != null && !tile3.active())
 								{
 									bool flag19 = true;
-									if (tile2.active() && (tile2.type == 21 || tile2.type == 441 || tile2.type == 323 || tile2.type == 88))
+									if (tile2.active() && (TileLoader.IsChest(tile2.type) || tile2.type == 441 || tile2.type == 323 || tile2.type == 88))
 									{
 										flag19 = false;
 									}

