--- src/Terraria\Terraria\WorldGen.cs
+++ src/tModLoader\Terraria\WorldGen.cs
@@ -13,6 +_,8 @@
 using Terraria.Graphics.Capture;
 using Terraria.ID;
 using Terraria.IO;
+using Terraria.ModLoader;
+using Terraria.ModLoader.IO;
 using Terraria.ObjectData;
 using Terraria.Utilities;
 using Terraria.World.Generation;
@@ -22,7 +_,7 @@
 #endif
 namespace Terraria
 {
-	internal class WorldGen
+	public class WorldGen
 	{
 		public class Spread
 		{
@@ -537,7 +_,13 @@
 		private static int lAltarY;
 		public static int tileReframeCount = 0;
 		public static bool noMapUpdate = false;
+		public static StructureMap structures;
+		public static double worldSurface;
 		public static double worldSurfaceLow;
+		public static double worldSurfaceHigh;
+		public static double rockLayer;
+		public static double rockLayerLow;
+		public static double rockLayerHigh;
 		public static int tLeft;
 		public static int tRight;
 		public static int tTop;
@@ -871,7 +_,7 @@
 					return true;
 				}
 			}
-			for (int j = 0; j < 540; j++)
+			for (int j = 0; j < Main.nextNPC.Length; j++)
 			{
 				if (Main.nextNPC[j] && WorldGen.CheckConditions(j))
 				{
@@ -896,6 +_,10 @@
 
 		public static bool CheckConditions(int type)
 		{
+			if (!NPCLoader.CheckConditions(type))
+			{
+				return false;
+			}
 			if (type != 160)
 			{
 				return true;
@@ -1587,7 +_,7 @@
 												}
 											}
 										}
-										else if (Main.tile[num9, num10].type == 21)
+										else if (TileLoader.IsChest(Main.tile[num9, num10].type))
 										{
 											if (num8 > 0)
 											{
@@ -1644,7 +_,7 @@
 			WorldGen.roomY1 = y;
 			WorldGen.roomY2 = y;
 			WorldGen.numRoomTiles = 0;
-			for (int i = 0; i < 419; i++)
+			for (int i = 0; i < WorldGen.houseTile.Length; i++)
 			{
 				WorldGen.houseTile[i] = false;
 			}
@@ -1694,7 +_,7 @@
 				{
 					return;
 				}
-				if (Main.tile[x, y].type == 11 && (Main.tile[x, y].frameX == 0 || Main.tile[x, y].frameX == 54))
+				if (TileLoader.CloseDoorID(Main.tile[x, y]) >= 0 && (Main.tile[x, y].frameX == 0 || Main.tile[x, y].frameX == 54))
 				{
 					return;
 				}
@@ -1891,7 +_,7 @@
 			{
 				for (int n = j - num; n < j + num; n++)
 				{
-					if (Main.tile[m, n].active() && Main.tile[m, n].type == 21)
+					if (Main.tile[m, n].active() && TileLoader.IsChest(Main.tile[m, n].type))
 					{
 						return false;
 					}
@@ -2037,6 +_,18 @@
 
 		public static void worldGenCallBack(object threadContext)
 		{
+			try
+			{
+				do_worldGenCallBack(threadContext);
+			}
+			catch (Exception e)
+			{
+				ErrorLogger.LogException(e);
+			}
+		}
+
+		public static void do_worldGenCallBack(object threadContext)
+		{
 			Main.PlaySound(10, -1, -1, 1);
 			WorldGen.clearWorld();
 			WorldGen.generateWorld(-1, threadContext as GenerationProgress);
@@ -2102,6 +_,18 @@
 
 		public static void playWorldCallBack(object threadContext)
 		{
+			try
+			{
+				do_playWorldCallBack(threadContext);
+			}
+			catch (Exception e)
+			{
+				ErrorLogger.LogException(e);
+			}
+		}
+
+		public static void do_playWorldCallBack(object threadContext)
+		{
 			if (Main.rand == null)
 			{
 				Main.rand = new Random((int)DateTime.Now.Ticks);
@@ -2143,12 +_,19 @@
 					{
 						if (!WorldGen.worldBackup)
 						{
-							Console.WriteLine("Load failed!  No backup found.");
+                            string message = "Load failed!  No backup found.";
+                            if (WorldIO.customDataFail != null)
+                            {
+                                message = WorldIO.customDataFail.modName + " " + message;
+                                message += "\n" + WorldIO.customDataFail.InnerException;
+                            }
+							Console.WriteLine(message);
 							return;
 						}
 						FileUtilities.Copy(Main.worldPathName, Main.worldPathName + ".bad", isCloudSave, true);
 						FileUtilities.Copy(Main.worldPathName + ".bak", Main.worldPathName, isCloudSave, true);
 						FileUtilities.Delete(Main.worldPathName + ".bak", isCloudSave);
+						WorldIO.LoadDedServBackup(Main.worldPathName, isCloudSave);
 						WorldFile.loadWorld(Main.ActiveWorldFileData.IsCloudSave);
 						if (WorldGen.loadFailed || !WorldGen.loadSuccess)
 						{
@@ -2158,7 +_,14 @@
 								FileUtilities.Copy(Main.worldPathName, Main.worldPathName + ".bak", isCloudSave, true);
 								FileUtilities.Copy(Main.worldPathName + ".bad", Main.worldPathName, isCloudSave, true);
 								FileUtilities.Delete(Main.worldPathName + ".bad", isCloudSave);
-								Console.WriteLine("Load failed!");
+								WorldIO.RevertDedServBackup(Main.worldPathName, isCloudSave);
+                                string message = "Load failed!";
+                                if (WorldIO.customDataFail != null)
+                                {
+                                    message = WorldIO.customDataFail.modName + " " + message;
+                                    message += "\n" + WorldIO.customDataFail.InnerException;
+                                }
+								Console.WriteLine(message);
 								return;
 							}
 						}
@@ -2506,6 +_,7 @@
 				Main.liquidBuffer[num10] = new LiquidBuffer();
 			}
 			WorldGen.setWorldSize();
+			WorldHooks.SetupWorld();
 			WorldGen.worldCleared = true;
 		}
 
@@ -4163,13 +_,13 @@
 				WorldGen.genRand = new Random((int)DateTime.Now.Ticks);
 			}
 			MicroBiome.ResetAll();
-			StructureMap structures = new StructureMap();
-			double worldSurface = 0.0;
+			structures = new StructureMap();
+			worldSurface = 0.0;
 			WorldGen.worldSurfaceLow = 0.0;
-			double worldSurfaceHigh = 0.0;
-			double rockLayer = 0.0;
-			double rockLayerLow = 0.0;
-			double rockLayerHigh = 0.0;
+			worldSurfaceHigh = 0.0;
+			rockLayer = 0.0;
+			rockLayerLow = 0.0;
+			rockLayerHigh = 0.0;
 			int copper = 7;
 			int iron = 6;
 			int silver = 9;
@@ -4210,6 +_,7 @@
 					}
 				}
 			}
+			WorldHooks.PreWorldGen();
 			WorldGen.AddGenerationPass("Reset", delegate(GenerationProgress progress)
 				{
 					WorldGen.noTileActions = true;
@@ -7061,7 +_,7 @@
 									int num12 = WorldGen.genRand.Next(num - m, num + m + 1);
 									int num13 = WorldGen.genRand.Next(num2 - num6, num2 + num6 - 2);
 									WorldGen.PlaceTile(num12, num13, 4, true, false, -1, 3);
-									if (Main.tile[num12, num13].type == 4)
+									if (TileLoader.IsTorch(Main.tile[num12, num13].type))
 									{
 										flag3 = true;
 									}
@@ -10013,7 +_,9 @@
 					WorldGen.gen = false;
 					Main.AnglerQuestSwap();
 				});
+			WorldHooks.ModifyWorldGenTasks(WorldGen._generator._passes, ref WorldGen._generator._totalLoadWeight);
 			WorldGen._generator.GenerateWorld(customProgressObject);
+			WorldHooks.PostWorldGen();
 			Main.WorldFileMetadata = FileMetadata.FromCurrentSettings(FileType.World);
 		}
 
@@ -12813,7 +_,7 @@
 				Main.tile[i, j] = new Tile();
 			}
 			int frameX = (int)Main.tile[i, j].frameX;
-			if (Main.tile[i, j].type != 11)
+			if (TileLoader.CloseDoorID(Main.tile[i, j]) < 0)
 			{
 				return false;
 			}
@@ -12860,6 +_,7 @@
 					}
 				}
 			}
+			ushort closeDoorID = (ushort)TileLoader.CloseDoorID(Main.tile[i, j]);
 			for (int m = num5; m < num5 + 2; m++)
 			{
 				for (int n = num4; n < num4 + 3; n++)
@@ -12870,7 +_,7 @@
 						{
 							Main.tile[m, n] = new Tile();
 						}
-						Main.tile[m, n].type = 10;
+						Main.tile[m, n].type = closeDoorID;
 						Main.tile[m, n].frameX = (short)(WorldGen.genRand.Next(3) * 18);
 					}
 					else
@@ -13068,7 +_,7 @@
 							{
 								for (int k = num8 - 8; k < num8 + 8; k++)
 								{
-									if (Main.tile[j, k].active() && Main.tile[j, k].type == 4)
+									if (Main.tile[j, k].active() && TileLoader.IsTorch(Main.tile[j, k].type))
 									{
 										flag2 = true;
 										break;
@@ -19553,11 +_,7 @@
 			{
 				Main.tile[i, j] = new Tile();
 			}
-			if (Main.tile[i, j].type != 10)
-			{
-				return false;
-			}
-			if (Main.tile[i, j].frameY >= 594 && Main.tile[i, j].frameY <= 646)
+			if (TileLoader.OpenDoorID(Main.tile[i, j]) < 0)
 			{
 				return false;
 			}
@@ -19620,8 +_,9 @@
 			}
 			int num6 = num * 54;
 			Main.PlaySound(8, i * 16, j * 16, 1);
+			ushort openDoorID = (ushort)TileLoader.OpenDoorID(Main.tile[i, j]);
 			Main.tile[num4, num2].active(true);
-			Main.tile[num4, num2].type = 11;
+			Main.tile[num4, num2].type = openDoorID;
 			Main.tile[num4, num2].frameY = (short)num6;
 			Main.tile[num4, num2].frameX = num3;
 			Main.tile[num4, num2].color(color);
@@ -19630,7 +_,7 @@
 				Main.tile[num4 + 1, num2] = new Tile();
 			}
 			Main.tile[num4 + 1, num2].active(true);
-			Main.tile[num4 + 1, num2].type = 11;
+			Main.tile[num4 + 1, num2].type = openDoorID;
 			Main.tile[num4 + 1, num2].frameY = (short)num6;
 			Main.tile[num4 + 1, num2].frameX = (short)(num3 + 18);
 			Main.tile[num4 + 1, num2].color(color);
@@ -19639,7 +_,7 @@
 				Main.tile[num4, num2 + 1] = new Tile();
 			}
 			Main.tile[num4, num2 + 1].active(true);
-			Main.tile[num4, num2 + 1].type = 11;
+			Main.tile[num4, num2 + 1].type = openDoorID;
 			Main.tile[num4, num2 + 1].frameY = (short)(num6 + 18);
 			Main.tile[num4, num2 + 1].frameX = num3;
 			Main.tile[num4, num2 + 1].color(color2);
@@ -19648,7 +_,7 @@
 				Main.tile[num4 + 1, num2 + 1] = new Tile();
 			}
 			Main.tile[num4 + 1, num2 + 1].active(true);
-			Main.tile[num4 + 1, num2 + 1].type = 11;
+			Main.tile[num4 + 1, num2 + 1].type = openDoorID;
 			Main.tile[num4 + 1, num2 + 1].frameY = (short)(num6 + 18);
 			Main.tile[num4 + 1, num2 + 1].frameX = (short)(num3 + 18);
 			Main.tile[num4 + 1, num2 + 1].color(color2);
@@ -19657,7 +_,7 @@
 				Main.tile[num4, num2 + 2] = new Tile();
 			}
 			Main.tile[num4, num2 + 2].active(true);
-			Main.tile[num4, num2 + 2].type = 11;
+			Main.tile[num4, num2 + 2].type = openDoorID;
 			Main.tile[num4, num2 + 2].frameY = (short)(num6 + 36);
 			Main.tile[num4, num2 + 2].frameX = num3;
 			Main.tile[num4, num2 + 2].color(color3);
@@ -19666,7 +_,7 @@
 				Main.tile[num4 + 1, num2 + 2] = new Tile();
 			}
 			Main.tile[num4 + 1, num2 + 2].active(true);
-			Main.tile[num4 + 1, num2 + 2].type = 11;
+			Main.tile[num4 + 1, num2 + 2].type = openDoorID;
 			Main.tile[num4 + 1, num2 + 2].frameY = (short)(num6 + 36);
 			Main.tile[num4 + 1, num2 + 2].frameX = (short)(num3 + 18);
 			Main.tile[num4 + 1, num2 + 2].color(color3);
@@ -21263,7 +_,7 @@
 			{
 				Main.tile[x, num + 2] = new Tile();
 			}
-			if (!WorldGen.SolidTileAllowBottomSlope(x, num + 2) && Main.tile[x, num + 2].type != 19)
+			if (!WorldGen.SolidTileAllowBottomSlope(x, num + 2) && !TileLoader.IsPlatform(Main.tile[x, num + 2].type))
 			{
 				flag = true;
 			}
@@ -23216,7 +_,7 @@
 			{
 				flag = true;
 			}
-			if ((!Main.tile[x, i - 1].topSlope() && !Main.tile[x, i - 1].halfBrick() && !Main.tileSolid[(int)Main.tile[x, i - 1].type]) || (Main.tileSolidTop[(int)Main.tile[x, i - 1].type] && (Main.tile[x, i - 1].type != 19 || (!Main.tile[x, i - 1].halfBrick() && !Main.tile[x, i - 1].topSlope()))) || TileID.Sets.NotReallySolid[(int)Main.tile[x, i - 1].type] || Main.tile[x, i - 1].bottomSlope())
+			if ((!Main.tile[x, i - 1].topSlope() && !Main.tile[x, i - 1].halfBrick() && !Main.tileSolid[(int)Main.tile[x, i - 1].type]) || (Main.tileSolidTop[(int)Main.tile[x, i - 1].type] && (!TileLoader.IsPlatform(Main.tile[x, i - 1].type) || (!Main.tile[x, i - 1].halfBrick() && !Main.tile[x, i - 1].topSlope()))) || TileID.Sets.NotReallySolid[(int)Main.tile[x, i - 1].type] || Main.tile[x, i - 1].bottomSlope())
 			{
 				flag = true;
 			}
@@ -24331,7 +_,7 @@
 				{
 					Main.tile[l, k + 2] = new Tile();
 				}
-				if (!WorldGen.SolidTileAllowBottomSlope(l, k + 2) && (!Main.tile[l, k + 2].active() || Main.tile[l, k + 2].type != 19))
+				if (!WorldGen.SolidTileAllowBottomSlope(l, k + 2) && (!Main.tile[l, k + 2].active() || !TileLoader.IsPlatform(Main.tile[l, k + 2].type)))
 				{
 					flag = true;
 				}
@@ -25249,7 +_,7 @@
 			{
 			}
 			k = j - k / 18;
-			return Main.tile[num, k - 1].type == 21 || Main.tile[num + 1, k - 1].type == 21 || Main.tile[num, k - 1].type == 88 || Main.tile[num + 1, k - 1].type == 88;
+			return TileLoader.IsChest(Main.tile[num, k - 1].type) || TileLoader.IsChest(Main.tile[num + 1, k - 1].type) || Main.tile[num, k - 1].type == 88 || Main.tile[num + 1, k - 1].type == 88;
 		}
 
 		public static void OreRunner(int i, int j, double strength, int steps, ushort type)
@@ -25508,7 +_,7 @@
 				{
 					flag = true;
 				}
-				if (Main.tile[l, j - 1].active() && Main.tile[l, j - 1].type == 21)
+				if (Main.tile[l, j - 1].active() && TileLoader.IsChest(Main.tile[l, j - 1].type))
 				{
 					return;
 				}
@@ -25589,12 +_,12 @@
 				}
 				if (type == 285 || type == 286 || type == 298 || type == 299 || type == 310 || type == 339 || (type >= 361 && type <= 364))
 				{
-					if (!WorldGen.SolidTileAllowBottomSlope(l, num7) && (!Main.tile[l, num7].nactive() || !Main.tileSolidTop[(int)Main.tile[l, num7].type] || Main.tile[l, num7].frameY != 0) && (!Main.tile[l, num7].active() || Main.tile[l, num7].type != 19))
+					if (!WorldGen.SolidTileAllowBottomSlope(l, num7) && (!Main.tile[l, num7].nactive() || !Main.tileSolidTop[(int)Main.tile[l, num7].type] || Main.tile[l, num7].frameY != 0) && (!Main.tile[l, num7].active() || !TileLoader.IsPlatform(Main.tile[l, num7].type)))
 					{
 						flag = true;
 					}
 				}
-				else if (!WorldGen.SolidTileAllowBottomSlope(l, num7) && (!Main.tile[l, num7].active() || Main.tile[l, num7].type != 19))
+				else if (!WorldGen.SolidTileAllowBottomSlope(l, num7) && (!Main.tile[l, num7].active() || !TileLoader.IsPlatform(Main.tile[l, num7].type)))
 				{
 					flag = true;
 				}
@@ -26840,7 +_,8 @@
 					{
 						Main.tile[l, m] = new Tile();
 					}
-					if (Main.tile[l, m].active() && (Main.tile[l, m].type == 139 || Main.tile[l, m].type == 35))
+					if (Main.tile[l, m].active() && (Main.tile[l, m].type == 139 || Main.tile[l, m].type == 35
+					    || TileLoader.IsModMusicBox(Main.tile[l, m])))
 					{
 						if (Main.tile[l, m].frameX < 36)
 						{
@@ -27227,10 +_,6 @@
 
 		public static bool PlaceObject(int x, int y, int type, bool mute = false, int style = 0, int alternate = 0, int random = -1, int direction = -1)
 		{
-			if (type >= 419)
-			{
-				return false;
-			}
 			TileObject toBePlaced;
 			if (!TileObject.CanPlace(x, y, type, style, direction, out toBePlaced, false))
 			{
@@ -27624,13 +_,13 @@
 				{
 					flag = true;
 				}
-				if ((anchor & AnchorType.SolidBottom) == AnchorType.SolidBottom && !Main.tileNoAttach[(int)tileCache.type] && ((Main.tileSolid[(int)tileCache.type] && (!Main.tileSolidTop[(int)tileCache.type] || (tileCache.type == 19 && (tileCache.halfBrick() || tileCache.topSlope())))) || tileCache.topSlope() || tileCache.halfBrick()) && !TileID.Sets.NotReallySolid[(int)tileCache.type] && !tileCache.bottomSlope())
+				if ((anchor & AnchorType.SolidBottom) == AnchorType.SolidBottom && !Main.tileNoAttach[(int)tileCache.type] && ((Main.tileSolid[(int)tileCache.type] && (!Main.tileSolidTop[(int)tileCache.type] || (TileLoader.IsPlatform(tileCache.type) && (tileCache.halfBrick() || tileCache.topSlope())))) || tileCache.topSlope() || tileCache.halfBrick()) && !TileID.Sets.NotReallySolid[(int)tileCache.type] && !tileCache.bottomSlope())
 				{
 					flag = true;
 				}
 				if (!flag && ((anchor & AnchorType.SolidWithTop) == AnchorType.SolidWithTop || (anchor & AnchorType.Table) == AnchorType.Table))
 				{
-					if (tileCache.type == 19)
+					if (TileLoader.IsPlatform(tileCache.type))
 					{
 						int num = (int)tileCache.frameX / TileObjectData.PlatformFrameWidth();
 						if ((!tileCache.halfBrick() && num >= 0 && num <= 7) || (num >= 12 && num <= 16) || (num >= 25 && num <= 26))
@@ -27643,7 +_,7 @@
 						flag = true;
 					}
 				}
-				if (!flag && (anchor & AnchorType.Table) == AnchorType.Table && tileCache.type != 19 && Main.tileTable[(int)tileCache.type] && tileCache.blockType() == 0)
+				if (!flag && (anchor & AnchorType.Table) == AnchorType.Table && !TileLoader.IsPlatform(tileCache.type) && Main.tileTable[(int)tileCache.type] && tileCache.blockType() == 0)
 				{
 					flag = true;
 				}
@@ -28680,7 +_,7 @@
 					{
 						Main.tile[n, num6 + 3] = new Tile();
 					}
-					if (!WorldGen.SolidTileAllowBottomSlope(n, num6 + 3) && (!Main.tile[n, num6 + 3].active() || Main.tile[n, num6 + 3].type != 19))
+					if (!WorldGen.SolidTileAllowBottomSlope(n, num6 + 3) && (!Main.tile[n, num6 + 3].active() || !TileLoader.IsPlatform(Main.tile[n, num6 + 3].type)))
 					{
 						flag = true;
 						break;
@@ -29920,7 +_,7 @@
 						int wall = (int)Main.tile[k, l].wall;
 						if (conversionType == 4)
 						{
-							if (type <= 419 && wall <= 225)
+							if (true)
 							{
 								if (WallID.Sets.Conversion.Grass[wall] && wall != 81)
 								{
@@ -29998,7 +_,7 @@
 						}
 						else if (conversionType == 2)
 						{
-							if (type <= 419 && wall <= 225)
+							if (true)
 							{
 								if (WallID.Sets.Conversion.Grass[wall] && wall != 70)
 								{
@@ -30078,7 +_,7 @@
 						}
 						else if (conversionType == 1)
 						{
-							if (type <= 419 && wall <= 225)
+							if (true)
 							{
 								if (WallID.Sets.Conversion.Grass[wall] && wall != 69)
 								{
@@ -31672,10 +_,6 @@
 
 		public static bool PlaceTile(int i, int j, int type, bool mute = false, bool forced = false, int plr = -1, int style = 0)
 		{
-			if (type >= 419)
-			{
-				return false;
-			}
 			bool result = false;
 			if (i >= 0 && j >= 0 && i < Main.maxTilesX && j < Main.maxTilesY)
 			{
@@ -31928,7 +_,7 @@
 							WorldGen.SquareTileFrame(i, j, true);
 						}
 					}
-					else if (type == 4)
+					else if (TileLoader.IsTorch(type))
 					{
 						if (Main.tile[i - 1, j] == null)
 						{
@@ -31945,7 +_,7 @@
 						Tile tile2 = Main.tile[i - 1, j];
 						Tile tile3 = Main.tile[i + 1, j];
 						Tile tile4 = Main.tile[i, j + 1];
-						if (tile.wall > 0 || (tile2.active() && (tile2.slope() == 0 || tile2.slope() % 2 != 1) && ((Main.tileSolid[(int)tile2.type] && !Main.tileSolidTop[(int)tile2.type] && !TileID.Sets.NotReallySolid[(int)tile2.type]) || tile2.type == 124 || (tile2.type == 5 && Main.tile[i - 1, j - 1].type == 5 && Main.tile[i - 1, j + 1].type == 5))) || (tile3.active() && (tile3.slope() == 0 || tile3.slope() % 2 != 0) && ((Main.tileSolid[(int)tile3.type] && !Main.tileSolidTop[(int)tile3.type] && !TileID.Sets.NotReallySolid[(int)tile3.type]) || tile3.type == 124 || (tile3.type == 5 && Main.tile[i + 1, j - 1].type == 5 && Main.tile[i + 1, j + 1].type == 5))) || (tile4.active() && Main.tileSolid[(int)tile4.type] && (!Main.tileSolidTop[(int)tile4.type] || (tile4.type == 19 && tile4.slope() == 0)) && !TileID.Sets.NotReallySolid[(int)tile4.type] && !tile4.halfBrick() && tile4.slope() == 0))
+						if (tile.wall > 0 || (tile2.active() && (tile2.slope() == 0 || tile2.slope() % 2 != 1) && ((Main.tileSolid[(int)tile2.type] && !Main.tileSolidTop[(int)tile2.type] && !TileID.Sets.NotReallySolid[(int)tile2.type]) || tile2.type == 124 || (tile2.type == 5 && Main.tile[i - 1, j - 1].type == 5 && Main.tile[i - 1, j + 1].type == 5))) || (tile3.active() && (tile3.slope() == 0 || tile3.slope() % 2 != 0) && ((Main.tileSolid[(int)tile3.type] && !Main.tileSolidTop[(int)tile3.type] && !TileID.Sets.NotReallySolid[(int)tile3.type]) || tile3.type == 124 || (tile3.type == 5 && Main.tile[i + 1, j - 1].type == 5 && Main.tile[i + 1, j + 1].type == 5))) || (tile4.active() && Main.tileSolid[(int)tile4.type] && (!Main.tileSolidTop[(int)tile4.type] || (TileLoader.IsPlatform(tile4.type) && tile4.slope() == 0)) && !TileID.Sets.NotReallySolid[(int)tile4.type] && !tile4.halfBrick() && tile4.slope() == 0))
 						{
 							tile.active(true);
 							tile.type = (ushort)type;
@@ -32313,7 +_,11 @@
 					{
 						fail = true;
 					}
-					if (tile.wall == 21 || tile.wall == 186 || tile.wall == 136 || tile.wall == 137 || tile.wall == 168 || tile.wall == 169 || tile.wall == 172)
+					WallLoader.KillWall(i, j, tile.wall, ref fail);
+					if (!WallLoader.KillSound(i, j, tile.wall))
+					{
+					}
+					else if (tile.wall == 21 || tile.wall == 186 || tile.wall == 136 || tile.wall == 137 || tile.wall == 168 || tile.wall == 169 || tile.wall == 172)
 					{
 						Main.PlaySound(13, i * 16, j * 16, 1);
 					}
@@ -32330,6 +_,7 @@
 					{
 						num = 3;
 					}
+					WallLoader.NumDust(i, j, tile.wall, fail, ref num);
 					for (int k = 0; k < num; k++)
 					{
 						int num2 = 0;
@@ -32797,6 +_,10 @@
 						if (tile.wall == 151 || tile.wall == 152)
 						{
 							num2 = 215;
+						}
+						if (!WallLoader.CreateDust(i, j, tile.wall, ref num2))
+						{
+							continue;
 						}
 						if (tile.wall == 44)
 						{
@@ -33297,14 +_,14 @@
 					{
 						num4 = 2210 + (int)tile.wall - 138;
 					}
-					if (num4 > 0)
+					if (WallLoader.Drop(i, j, tile.wall, ref num4) && num4 > 0)
 					{
 						Item.NewItem(i * 16, j * 16, 16, 16, num4, 1, false, 0, false, false);
 					}
 					tile.wall = 0;
 					tile.wallColor(0);
 					WorldGen.SquareWallFrame(i, j, true);
-					if (tile.type >= 0 && tile.type < 419 && TileID.Sets.FramesOnKillWall[(int)tile.type])
+					if (tile.type >= 0 && TileID.Sets.FramesOnKillWall[(int)tile.type])
 					{
 						WorldGen.TileFrame(i, j, false, false);
 					}
@@ -33375,6 +_,10 @@
 			{
 				return false;
 			}
+			if (!TileLoader.CanKillTile(i, j, tile.type, ref blockDamaged))
+			{
+				return false;
+			}
 			if (j >= 1)
 			{
 				tile2 = Main.tile[i, j - 1];
@@ -33447,7 +_,7 @@
 						int num2 = i - (int)(tile.frameX % 54 / 18);
 						for (int k = 0; k < 3; k++)
 						{
-							if (Main.tile[num2 + k, j - 1].active() && Main.tile[num2 + k, j - 1].type == 21)
+							if (Main.tile[num2 + k, j - 1].active() && TileLoader.IsChest(Main.tile[num2 + k, j - 1].type))
 							{
 								blockDamaged = true;
 								return false;
@@ -33484,7 +_,7 @@
 					{
 						Main.tile[i, j - 1] = new Tile();
 					}
-					if (j >= 1 && Main.tile[i, j - 1].active() && ((Main.tile[i, j - 1].type == 5 && tile.type != 5) || (Main.tile[i, j - 1].type == 323 && tile.type != 323) || (Main.tile[i, j - 1].type == 21 && tile.type != 21) || (Main.tile[i, j - 1].type == 323 && tile.type != 323) || (Main.tile[i, j - 1].type == 88 && tile.type != 88) || (Main.tile[i, j - 1].type == 26 && tile.type != 26) || (Main.tile[i, j - 1].type == 72 && tile.type != 72)))
+					if (j >= 1 && Main.tile[i, j - 1].active() && ((Main.tile[i, j - 1].type == 5 && tile.type != 5) || (Main.tile[i, j - 1].type == 323 && tile.type != 323) || (TileLoader.IsChest(Main.tile[i, j - 1].type) && !TileLoader.IsChest(tile.type)) || (Main.tile[i, j - 1].type == 323 && tile.type != 323) || (Main.tile[i, j - 1].type == 88 && tile.type != 88) || (Main.tile[i, j - 1].type == 26 && tile.type != 26) || (Main.tile[i, j - 1].type == 72 && tile.type != 72)))
 					{
 						if (Main.tile[i, j - 1].type == 5)
 						{
@@ -33512,16 +_,20 @@
 						int num = i - frameX % 54 / 18;
 						for (int k = 0; k < 3; k++)
 						{
-							if (Main.tile[num + k, j - 1].active() && Main.tile[num + k, j - 1].type == 21)
+							if (Main.tile[num + k, j - 1].active() && TileLoader.IsChest(Main.tile[num + k, j - 1].type))
 							{
 								fail = true;
 								break;
 							}
 						}
 					}
+					TileLoader.KillTile(i, j, tile.type, ref fail, ref effectOnly, ref noItem);
 					if (!effectOnly && !WorldGen.stopDrops)
 					{
-						if (tile.type == 127)
+						if (!TileLoader.KillSound(i, j, tile.type))
+						{
+						}
+						else if (tile.type == 127)
 						{
 							Main.PlaySound(2, i * 16, j * 16, 27);
 						}
@@ -33764,6 +_,7 @@
 					{
 						num13 = 0;
 					}
+					TileLoader.NumDust(i, j, tile.type, fail, ref num13);
 					int num14 = 0;
 					while (num14 < num13)
 					{
@@ -35597,7 +_,7 @@
 						{
 							num15 = 215;
 						}
-						if (num15 >= 0)
+						if (TileLoader.CreateDust(i, j, tile.type, ref num15) && num15 >= 0)
 						{
 							if (tile.type == 352 && num15 == 5)
 							{
@@ -35787,6 +_,7 @@
 						{
 							num45 = 10;
 						}
+						TileLoader.DropCritterChance(i, j, tile.type, ref num43, ref num44, ref num45);
 						if (num43 > 0 && NPC.CountNPCS(357) < 5 && WorldGen.genRand.Next(num43) == 0)
 						{
 							int type2 = 357;
@@ -37394,7 +_,8 @@
 						{
 							num49 = 2504;
 						}
-						if (num49 > 0)
+						bool vanillaDrop = TileLoader.Drop(i, j, tile.type);
+						if (vanillaDrop && num49 > 0)
 						{
 							int num71 = 1;
 							if (flag)
@@ -37403,7 +_,7 @@
 							}
 							Item.NewItem(i * 16, j * 16, 16, 16, num49, num71, false, -1, false, false);
 						}
-						if (num50 > 0)
+						if (vanillaDrop && num50 > 0)
 						{
 							Item.NewItem(i * 16, j * 16, 16, 16, num50, 1, false, -1, false, false);
 						}
@@ -40016,6 +_,8 @@
 							}
 						}
 					}
+					TileLoader.RandomUpdate(num7, num8, Main.tile[num7, num8].type);
+					WallLoader.RandomUpdate(num7, num8, Main.tile[num7, num8].wall);
 				}
 				num6++;
 			}
@@ -40706,6 +_,8 @@
 						}
 					}
 					WorldGen.SpreadDesertWalls(num, num64, num65);
+					TileLoader.RandomUpdate(num64, num65, Main.tile[num64, num65].type);
+					WallLoader.RandomUpdate(num64, num65, Main.tile[num64, num65].wall);
 				}
 				num63++;
 			}
@@ -40729,6 +_,7 @@
 					Projectile.NewProjectile(vector.X, vector.Y, num139, num140, 12, 1000, 10f, Main.myPlayer, 0f, 0f);
 				}
 			}
+			WorldHooks.PostUpdate();
 		}
 
 		public static void SpreadDesertWalls(int wallDist, int i, int j)
@@ -44813,7 +_,7 @@
 			{
 				int num = 1;
 				int slope = 2;
-				if (Main.tile[x + 1, y - 1].type == 19 || Main.tile[x - 1, y + 1].type == 19 || (WorldGen.SolidTile(x + 1, y) && !WorldGen.SolidTile(x - 1, y)))
+				if (TileLoader.IsPlatform(Main.tile[x + 1, y - 1].type) || TileLoader.IsPlatform(Main.tile[x - 1, y + 1].type) || (WorldGen.SolidTile(x + 1, y) && !WorldGen.SolidTile(x - 1, y)))
 				{
 					num = 2;
 					slope = 1;
@@ -44858,7 +_,7 @@
 		public static int PlatformProperSides(int x, int y, bool acceptNonOpposing = false)
 		{
 			Tile tile = Main.tile[x, y];
-			if (!tile.active() || tile.type != 19)
+			if (!tile.active() || !TileLoader.IsPlatform(tile.type))
 			{
 				return 0;
 			}
@@ -44885,12 +_,12 @@
 			}
 			if (acceptNonOpposing)
 			{
-				if (Main.tile[x + num4, y + num5].active() && Main.tile[x + num4, y + num5].type == 19 && (int)Main.tile[x + num4, y + num5].slope() != num2)
+				if (Main.tile[x + num4, y + num5].active() && TileLoader.IsPlatform(Main.tile[x + num4, y + num5].type) && (int)Main.tile[x + num4, y + num5].slope() != num2)
 				{
 					num3++;
 				}
 			}
-			else if (Main.tile[x + num4, y + num5].active() && Main.tile[x + num4, y + num5].type == 19 && (int)Main.tile[x + num4, y + num5].slope() == num)
+			else if (Main.tile[x + num4, y + num5].active() && TileLoader.IsPlatform(Main.tile[x + num4, y + num5].type) && (int)Main.tile[x + num4, y + num5].slope() == num)
 			{
 				num3++;
 			}
@@ -44898,12 +_,12 @@
 			num5 *= -1;
 			if (acceptNonOpposing)
 			{
-				if (Main.tile[x + num4, y + num5].active() && Main.tile[x + num4, y + num5].type == 19 && (int)Main.tile[x + num4, y + num5].slope() != num2)
+				if (Main.tile[x + num4, y + num5].active() && TileLoader.IsPlatform(Main.tile[x + num4, y + num5].type) && (int)Main.tile[x + num4, y + num5].slope() != num2)
 				{
 					num3++;
 				}
 			}
-			else if (Main.tile[x + num4, y + num5].active() && Main.tile[x + num4, y + num5].type == 19 && (int)Main.tile[x + num4, y + num5].slope() == num)
+			else if (Main.tile[x + num4, y + num5].active() && TileLoader.IsPlatform(Main.tile[x + num4, y + num5].type) && (int)Main.tile[x + num4, y + num5].slope() == num)
 			{
 				num3++;
 			}
@@ -45221,7 +_,11 @@
 					}
 					if (tile.active())
 					{
-						if (noBreak && Main.tileFrameImportant[(int)tile.type] && tile.type != 4)
+						if (!TileLoader.TileFrame(i, j, tile.type, ref resetFrame, ref noBreak))
+						{
+							return;
+						}
+						if (noBreak && Main.tileFrameImportant[(int)tile.type] && !TileLoader.IsTorch(tile.type))
 						{
 							return;
 						}
@@ -45235,7 +_,7 @@
 						Rectangle rectangle = new Rectangle(-1, -1, 0, 0);
 						if (Main.tileFrameImportant[(int)tile.type])
 						{
-							if (num == 4)
+							if (TileLoader.IsTorch(num))
 							{
 								Tile tile2 = Main.tile[i, j - 1];
 								Tile tile3 = Main.tile[i, j + 1];
@@ -45289,7 +_,7 @@
 								{
 									num9 = (int)tile9.type;
 								}
-								if (num3 >= 0 && Main.tileSolid[num3] && (!Main.tileNoAttach[num3] || num3 == 19))
+								if (num3 >= 0 && Main.tileSolid[num3] && (!Main.tileNoAttach[num3] || TileLoader.IsPlatform(num3)))
 								{
 									tile.frameX = num2;
 								}
@@ -45854,7 +_,7 @@
 									}
 								}
 							}
-							else if (num == 19)
+							else if (TileLoader.IsPlatform(num))
 							{
 								Tile tile4 = Main.tile[i - 1, j];
 								if (tile4 != null)
@@ -45940,13 +_,13 @@
 														}
 														if (tile.slope() == 1)
 														{
-															if (tile5.type == 19 && tile5.slope() == 0)
+															if (TileLoader.IsPlatform(tile5.type) && tile5.slope() == 0)
 															{
 																rectangle.X = 468;
 															}
-															else if (!tile7.active() && (tile7.type != 19 || tile7.slope() == 2))
+															else if (!tile7.active() && (!TileLoader.IsPlatform(tile7.type) || tile7.slope() == 2))
 															{
-																if (!tile4.active() && (tile8.type != 19 || tile8.slope() != 1))
+																if (!tile4.active() && (!TileLoader.IsPlatform(tile8.type) || tile8.slope() != 1))
 																{
 																	rectangle.X = 432;
 																}
@@ -45955,7 +_,7 @@
 																	rectangle.X = 360;
 																}
 															}
-															else if (!tile4.active() && (tile8.type != 19 || tile8.slope() != 1))
+															else if (!tile4.active() && (!TileLoader.IsPlatform(tile8.type) || tile8.slope() != 1))
 															{
 																rectangle.X = 396;
 															}
@@ -45966,13 +_,13 @@
 														}
 														else if (tile.slope() == 2)
 														{
-															if (tile4.type == 19 && tile4.slope() == 0)
+															if (TileLoader.IsPlatform(tile4.type) && tile4.slope() == 0)
 															{
 																rectangle.X = 450;
 															}
-															else if (!tile6.active() && (tile6.type != 19 || tile6.slope() == 1))
+															else if (!tile6.active() && (!TileLoader.IsPlatform(tile6.type) || tile6.slope() == 1))
 															{
-																if (!tile5.active() && (tile9.type != 19 || tile9.slope() != 2))
+																if (!tile5.active() && (!TileLoader.IsPlatform(tile9.type) || tile9.slope() != 2))
 																{
 																	rectangle.X = 414;
 																}
@@ -45981,7 +_,7 @@
 																	rectangle.X = 342;
 																}
 															}
-															else if (!tile5.active() && (tile9.type != 19 || tile9.slope() != 2))
+															else if (!tile5.active() && (!TileLoader.IsPlatform(tile9.type) || tile9.slope() != 2))
 															{
 																rectangle.X = 378;
 															}
@@ -46282,6 +_,10 @@
 							{
 								WorldGen.CheckPalmTree(i, j);
 							}
+							else
+							{
+								TileLoader.CheckModTile(i, j, num);
+							}
 							return;
 						}
 						else
@@ -46495,19 +_,19 @@
 							{
 								num50 = num;
 							}
-							if ((tile.slope() == 1 || tile.slope() == 2) && num50 > -1 && num50 != 19)
+							if ((tile.slope() == 1 || tile.slope() == 2) && num50 > -1 && !TileLoader.IsPlatform(num50))
 							{
 								num50 = num;
 							}
-							if (num45 > -1 && (tile2.slope() == 1 || tile2.slope() == 2) && num45 != 19)
+							if (num45 > -1 && (tile2.slope() == 1 || tile2.slope() == 2) && !TileLoader.IsPlatform(num45))
 							{
 								num45 = num;
 							}
-							if ((tile.slope() == 3 || tile.slope() == 4) && num45 > -1 && num45 != 19)
+							if ((tile.slope() == 3 || tile.slope() == 4) && num45 > -1 && !TileLoader.IsPlatform(num45))
 							{
 								num45 = num;
 							}
-							if (num50 > -1 && (tile3.slope() == 3 || tile3.slope() == 4) && num50 != 19)
+							if (num50 > -1 && (tile3.slope() == 3 || tile3.slope() == 4) && !TileLoader.IsPlatform(num50))
 							{
 								num50 = num;
 							}
@@ -46522,7 +_,7 @@
 									num50 = num;
 								}
 							}
-							if (num45 > -1 && tile2.halfBrick() && num45 != 19)
+							if (num45 > -1 && tile2.halfBrick() && !TileLoader.IsPlatform(num45))
 							{
 								num45 = num;
 							}
@@ -49473,7 +_,7 @@
 									if (tile3 != null && !tile3.active())
 									{
 										bool flag5 = true;
-										if (tile2.active() && (tile2.type == 21 || tile2.type == 323 || tile2.type == 88))
+										if (tile2.active() && (TileLoader.IsChest(tile2.type) || tile2.type == 323 || tile2.type == 88))
 										{
 											flag5 = false;
 										}
@@ -49539,7 +_,7 @@
 								else if (Main.netMode == 2 && tile3 != null && !tile3.active())
 								{
 									bool flag6 = true;
-									if (tile2.active() && (tile2.type == 21 || tile2.type == 323 || tile2.type == 88))
+									if (tile2.active() && (TileLoader.IsChest(tile2.type) || tile2.type == 323 || tile2.type == 88))
 									{
 										flag6 = false;
 									}

