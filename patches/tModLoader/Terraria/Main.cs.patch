--- src/Terraria\Terraria\Main.cs
+++ src/tModLoader\Terraria\Main.cs
@@ -42,6 +_,8 @@
 using Terraria.Initializers;
 using Terraria.IO;
 using Terraria.Map;
+using Terraria.ModLoader;
+using Terraria.ModLoader.IO;
 using Terraria.Net;
 using Terraria.ObjectData;
 using Terraria.Social;
@@ -137,7 +_,7 @@
 		public static string SavePath = Program.LaunchParameters.ContainsKey("-savedirectory") ? Program.LaunchParameters["-savedirectory"] : PlatformUtilties.GetStoragePath();
 		public static Vector2 destroyerHB = new Vector2(0f, 0f);
 		public static FavoritesFile LocalFavoriteData = new FavoritesFile(Main.SavePath + "/favorites.json", false);
-		public static FavoritesFile CloudFavoritesData = new FavoritesFile("/favorites.json", true);
+		public static FavoritesFile CloudFavoritesData = new FavoritesFile("/ModLoader/favorites.json", true);
 		public static FileMetadata WorldFileMetadata;
 		public static FileMetadata MapFileMetadata;
 		private AchievementManager _achievements;
@@ -172,6 +_,8 @@
 		public static Effect tileShader;
 		public static int npcStreamSpeed = 60;
 		public static int musicError = 0;
+		public static int soundError = 0;
+		public static int ambientError = 0;
 		public static bool dedServFPS = false;
 		public static int dedServCount1 = 0;
 		public static int dedServCount2 = 0;
@@ -1002,7 +_,8 @@
 		public static AudioEngine engine;
 		public static SoundBank soundBank;
 		public static WaveBank waveBank;
-		public static Cue[] music = new Cue[40];
+		public static MusicWrapper[] music = new MusicWrapper[40];
+		// TODO, Resize these arrays
 		public static float[] musicFade = new float[40];
 		public static float musicVolume = 0.75f;
 		public static float ambientVolume = 0.75f;
@@ -1193,7 +_,7 @@
 		public static bool npcChatFocus2 = false;
 		public static bool npcChatFocus3 = false;
 		public static int npcShop = 0;
-		public static int numShops = 21;
+		public static int numShops = 21 + 1;
 		public static int npcChatCornerItem = 0;
 		public Chest[] shop = new Chest[Main.numShops];
 		public static int[] travelShop = new int[40];
@@ -1260,9 +_,9 @@
 		public static List<WorldFileData> WorldList = new List<WorldFileData>();
 		public static WorldFileData ActiveWorldFileData = new WorldFileData();
 		public static string WorldPath = Main.SavePath + Path.DirectorySeparatorChar + "Worlds";
-		public static string CloudWorldPath = "worlds";
+		public static string CloudWorldPath = "ModLoader/worlds";
 		public static string PlayerPath = Main.SavePath + Path.DirectorySeparatorChar + "Players";
-		public static string CloudPlayerPath = "players";
+		public static string CloudPlayerPath = "ModLoader/players";
 		public static Preferences Configuration = new Preferences(Main.SavePath + Path.DirectorySeparatorChar + "config.json", false, false);
 		public static string[] itemName = new string[3602];
 		public static string[] npcName = new string[540];
@@ -1921,7 +_,7 @@
 		private int selectedMenu2 = -1;
 		public static int selectedPlayer = 0;
 		public static int selectedWorld = 0;
-		public static int menuMode = 0;
+		public static int menuMode = Interface.loadModsID;
 		public static int menuSkip = 0;
 		private static Item cpItem = new Item();
 		public int textBlinkerCount;
@@ -2045,6 +_,14 @@
 			}
 		}
 
+		public static ulong TileFrameSeed
+		{
+			get
+			{
+				return Main._tileFrameSeed;
+			}
+		}
+
 		public static void SetCameraLerp(float lerp, int time)
 		{
 			Main.cameraLerp = lerp;
@@ -2196,6 +_,7 @@
 				{
 					flag = true;
 				}
+				ItemLoader.IsAnglerQuestAvailable(num, ref flag);
 			}
 			NetMessage.SendAnglerQuest();
 		}
@@ -2392,6 +_,7 @@
 			Main.Configuration.Put("ThickMouseEdges", Main.ThickMouse);
 			Main.Configuration.Put("ThickMouseEdgesPackedColor", Main.ThickMousePackedColor);
 			Main.Configuration.Put("ReverseUpDownForArmorSetBonuses", Main.ReversedUpDownArmorSetBonuses);
+			ModLoader.ModLoader.SaveConfiguration();
 			return Main.Configuration.Save(true);
 		}
 
@@ -2670,6 +_,7 @@
 			catch
 			{
 			}
+			PlayerIO.ErasePlayer(Main.PlayerList[i].Path, Main.PlayerList[i].IsCloudSave);
 			try
 			{
 				string path = Main.PlayerList[i].Path.Substring(0, Main.PlayerList[i].Path.Length - 4);
@@ -2702,6 +_,7 @@
 				{
 					SocialAPI.Cloud.Delete(Main.WorldList[i].Path);
 				}
+				WorldIO.EraseWorld(Main.WorldList[i].Path, Main.WorldList[i].IsCloudSave);
 				Main.LoadWorlds();
 			}
 			catch
@@ -3126,7 +_,7 @@
 			}
 			else
 			{
-				Console.Title = "Terraria Server " + Main.versionNumber2;
+				Console.Title = "Terraria Server " + Main.versionNumber2 + " - " + ModLoader.ModLoader.versionedName;
 			}
 			Main.dedServ = true;
 			Main.showSplash = false;
@@ -3142,13 +_,14 @@
 				nPC.SetDefaults(i, -1f);
 				Main.npcName[i] = nPC.name;
 			}
+			ModLoader.ModLoader.do_Load(null);
 			while (Main.worldPathName == null || Main.worldPathName == "")
 			{
 				bool flag = true;
 				while (flag)
 				{
 					Main.LoadWorlds();
-					Console.WriteLine("Terraria Server " + Main.versionNumber2);
+					Console.WriteLine("Terraria Server " + Main.versionNumber2 + " - " + ModLoader.ModLoader.versionedName);
 					Console.WriteLine("");
 					for (int j = 0; j < Main.WorldList.Count; j++)
 					{
@@ -3168,6 +_,7 @@
 								"New World"
 							}));
 					Console.WriteLine("d <number>" + '\t' + "Delete World");
+					Console.WriteLine("m\t\tMods Menu");
 					Console.WriteLine("");
 					Console.Write("Choose World: ");
 					string text2 = Console.ReadLine();
@@ -3352,6 +_,11 @@
 							goto IL_5DA;
 						}
 						goto IL_5DA;
+					}
+					else if (text2 == "m" || text2 == "M")
+					{
+						Interface.ServerModMenu();
+						continue;
 					}
 					else
 					{
@@ -3517,20 +_,10 @@
 				Main.startDedInput();
 			}
 			stopwatch.Start();
-			double num7 = 16.666666666666668;
-			double num8 = 0.0;
-			int num9 = 0;
-			Stopwatch stopwatch2 = new Stopwatch();
-			stopwatch2.Start();
+			double delta = 1000/60D;
+			double target = delta;
 			while (!Netplay.disconnect)
 			{
-				double num10 = (double)stopwatch.ElapsedMilliseconds;
-				if (num10 + num8 >= num7)
-				{
-					num9++;
-					num8 += num10 - num7;
-					stopwatch.Reset();
-					stopwatch.Start();
 					if (Main.oldStatusText != Main.statusText)
 					{
 						Main.oldStatusText = Main.statusText;
@@ -3540,26 +_,22 @@
 					{
 						this.Update(new GameTime());
 					}
+					else
+					{
+						Netplay.OnUpdate();
+					}
 					if (Main.OnTick != null)
 					{
 						Main.OnTick();
 					}
-					double num11 = (double)stopwatch.ElapsedMilliseconds + num8;
-					if (num11 < num7)
-					{
-						int num12 = (int)(num7 - num11) - 1;
-						if (num12 > 1)
-						{
-							Thread.Sleep(num12 - 1);
-							if (!Netplay.anyClients)
-							{
-								num8 = 0.0;
-								Thread.Sleep(10);
-							}
-						}
-					}
-				}
-				Thread.Sleep(0);
+					double now = stopwatch.ElapsedMilliseconds;
+					double remaining = target - now;
+					target += delta; //new target
+					if (target < now) //can't catch up, reset target
+					{
+						target = now + delta;
+					}
+					Thread.Sleep(Math.Max((int)remaining, 0));
 			}
 		}
 
@@ -6428,7 +_,7 @@
 			}
 			Main.clientUUID = Guid.NewGuid().ToString();
 #if CLIENT
-			keyBoardInput.newKeyEvent += delegate(char keyStroke)
+			keyBoardInput.newKeyEvent += delegate (char keyStroke)
 			{
 				if (Main.keyCount < 10)
 				{
@@ -6505,6 +_,10 @@
 		protected override void LoadContent()
 		{
 			TextureManager.Initialize();
+			for (int i = 1; i < 40; i++)
+			{
+				Main.music[i] = new MusicWrapper();
+			}
 			try
 			{
 				this.mapSectionTexture = new RenderTarget2D(base.GraphicsDevice, 200, 150);
@@ -6516,7 +_,7 @@
 				Main.waveBank = new WaveBank(Main.engine, "Content" + Path.DirectorySeparatorChar + "Wave Bank.xwb");
 				for (int i = 1; i < 40; i++)
 				{
-					Main.music[i] = Main.soundBank.GetCue("Music_" + i);
+					Main.music[i] = new MusicWrapper(Main.soundBank.GetCue("Music_" + i));
 				}
 				Main.soundMech[0] = base.Content.Load<SoundEffect>("Sounds" + Path.DirectorySeparatorChar + "Mech_0");
 				Main.soundInstanceMech[0] = Main.soundMech[0].CreateInstance();
@@ -7415,6 +_,7 @@
 					bool flag11 = false;
 					Microsoft.Xna.Framework.Rectangle rectangle = new Microsoft.Xna.Framework.Rectangle((int)Main.screenPosition.X, (int)Main.screenPosition.Y, Main.screenWidth, Main.screenHeight);
 					int num = 5000;
+					int modMusic = -1;
 					for (int k = 0; k < 200; k++)
 					{
 						if (Main.npc[k].active)
@@ -7625,7 +_,7 @@
 							{
 								num2 = 1;
 							}
-							if (num2 == 0)
+							if (num2 == 0 && (Main.npc[k].modNPC == null || Main.npc[k].modNPC.music < 0))
 							{
 								goto IL_488;
 							}
@@ -7633,6 +_,10 @@
 							if (!rectangle.Intersects(value))
 							{
 								goto IL_488;
+							}
+							if (Main.npc[k].modNPC != null && Main.npc[k].modNPC.music >= 0 && modMusic < 0)
+							{
+								modMusic = Main.npc[k].modNPC.music;
 							}
 							if (num2 == 1)
 							{
@@ -7724,6 +_,10 @@
 						if (flag7)
 						{
 							this.newMusic = 38;
+						}
+						else if (modMusic >= 0)
+						{
+							this.newMusic = modMusic;
 						}
 						else if (flag9)
 						{
@@ -7941,6 +_,7 @@
 							this.newMusic = 32;
 						}
 					}
+					ModHooks.UpdateMusic(ref this.newMusic);
 					if (Main.gameMenu || Main.musicVolume == 0f)
 					{
 						Main.musicBox2 = -1;
@@ -8103,6 +_,10 @@
 						if (Main.musicBox == 37)
 						{
 							this.newMusic = 39;
+						}
+						if (Main.musicBox >= 40)
+						{
+							this.newMusic = Main.musicBox;
 						}
 					}
 					Main.curMusic = this.newMusic;
@@ -8120,12 +_,12 @@
 							num8 = 0f;
 							Main.curMusic = 0;
 						}
-						if (NPC.MoonLordCountdown == 1 && Main.curMusic >= 1 && Main.curMusic < 40)
+						if (NPC.MoonLordCountdown == 1 && Main.curMusic >= 1 && Main.curMusic < Main.music.Length)
 						{
 							Main.musicFade[Main.curMusic] = 0f;
 						}
 					}
-					for (int l = 1; l < 40; l++)
+					for (int l = 1; l < Main.music.Length; l++)
 					{
 						if (l == 28)
 						{
@@ -8140,7 +_,7 @@
 								}
 								else if (!Main.music[l].IsPlaying)
 								{
-									Main.music[l] = Main.soundBank.GetCue("Music_" + l);
+									Main.music[l].cue = Main.soundBank.GetCue("Music_" + l);
 									Main.music[l].Play();
 									Main.music[l].SetVariable("Volume", Main.musicFade[l] * Main.ambientVolume);
 								}
@@ -8187,7 +_,10 @@
 						{
 							if (!Main.music[l].IsPlaying)
 							{
-								Main.music[l] = Main.soundBank.GetCue("Music_" + l);
+								if (l < Main.maxMusic)
+								{
+									Main.music[l].cue = Main.soundBank.GetCue("Music_" + l);
+								}
 								Main.music[l].Play();
 								Main.music[l].SetVariable("Volume", Main.musicFade[l] * Main.musicVolume * num8);
 							}
@@ -10642,6 +_,18 @@
 
 		protected override void Update(GameTime gameTime)
 		{
+			try
+			{
+				do_Update(gameTime);
+			}
+			catch (Exception e)
+			{
+				ErrorLogger.LogException(e);
+			}
+		}
+
+		protected void do_Update(GameTime gameTime)
+		{
 #if CLIENT
 			if (Main.OnTick != null)
 			{
@@ -10653,6 +_,7 @@
 				Main.netMode = Main._targetNetMode;
 				Main._hasPendingNetmodeChange = false;
 			}
+			Netplay.OnUpdate();
 			Main.tileNoFail[384] = true;
 			if (CaptureManager.Instance.IsCapturing)
 			{
@@ -11319,6 +_,7 @@
 						Main.wallFrameCounter[144] = 0;
 					}
 				}
+				WallLoader.AnimateWalls();
 				Main.tileFrameCounter[12]++;
 				if (Main.tileFrameCounter[12] > 5)
 				{
@@ -11794,6 +_,7 @@
 						Main.tileFrame[410] = 0;
 					}
 				}
+				TileLoader.AnimateTiles();
 				Main.CritterCages();
 				Main.UpdateDrawAnimations();
 				if (Main.keyState.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.F10) && !Main.chatMode && !Main.editSign && !Main.editChest)
@@ -12015,6 +_,7 @@
 							Main.player[Main.myPlayer].chatOverhead.NewMessage(Main.chatText, Main.chatLength / 2);
 							Main.NewText(newText, white.R, white.G, white.B, false);
 						}
+						ModHooks.ChatInput(Main.chatText);
 						Main.chatText = "";
 						Main.chatMode = false;
 						Main.chatRelease = false;
@@ -12023,7 +_,7 @@
 						Main.PlaySound(11, -1, -1, 1);
 					}
 				}
-				if (Main.keyState.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.Enter) && Main.netMode == 1 && !Main.keyState.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.LeftAlt) && !Main.keyState.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.RightAlt) && Main.hasFocus)
+				if (Main.keyState.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.Enter) && !Main.keyState.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.LeftAlt) && !Main.keyState.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.RightAlt) && Main.hasFocus)
 				{
 					if (Main.chatRelease && !Main.chatMode && !Main.editSign && !Main.editChest && !Main.gameMenu && !Main.keyState.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.Escape))
 					{
@@ -12964,9 +_,13 @@
 					{
 						float num7 = 5E-06f;
 						int damage = Main.toolTip.damage;
+						Player player = Main.player[Main.myPlayer];
 						if (Main.toolTip.melee)
 						{
-							array[num6] = string.Concat((int)(Main.player[Main.myPlayer].meleeDamage * (float)damage + num7));
+							int damage2 = (int)(player.meleeDamage * (float)damage + num7);
+							ItemLoader.GetWeaponDamage(Main.toolTip, player, ref damage2);
+							PlayerHooks.GetWeaponDamage(player, Main.toolTip, ref damage2);
+							array[num6] = string.Concat(damage2);
 							string[] array4;
 							IntPtr intPtr;
 							(array4 = array)[(int)(intPtr = (IntPtr)num6)] = array4[(int)intPtr] + Lang.tip[2];
@@ -12990,35 +_,50 @@
 							{
 								num8 *= Main.player[Main.myPlayer].rocketDamage;
 							}
-							array[num6] = string.Concat((int)(num8 + num7));
+							int damage2 = (int)(num8 + num7);
+							ItemLoader.GetWeaponDamage(Main.toolTip, player, ref damage2);
+							PlayerHooks.GetWeaponDamage(player, Main.toolTip, ref damage2);
+							array[num6] = string.Concat(damage2);
 							string[] array4;
 							IntPtr intPtr;
 							(array4 = array)[(int)(intPtr = (IntPtr)num6)] = array4[(int)intPtr] + Lang.tip[3];
 						}
 						else if (Main.toolTip.magic)
 						{
-							array[num6] = string.Concat((int)(Main.player[Main.myPlayer].magicDamage * (float)damage + num7));
+							int damage2 = (int)(player.magicDamage * (float)damage + num7);
+							ItemLoader.GetWeaponDamage(Main.toolTip, player, ref damage2);
+							PlayerHooks.GetWeaponDamage(player, Main.toolTip, ref damage2);
+							array[num6] = string.Concat(damage2);
 							string[] array4;
 							IntPtr intPtr;
 							(array4 = array)[(int)(intPtr = (IntPtr)num6)] = array4[(int)intPtr] + Lang.tip[4];
 						}
 						else if (Main.toolTip.thrown)
 						{
-							array[num6] = string.Concat((int)(Main.player[Main.myPlayer].thrownDamage * (float)damage + num7));
+							int damage2 = (int)(player.thrownDamage * (float)damage + num7);
+							ItemLoader.GetWeaponDamage(Main.toolTip, player, ref damage2);
+							PlayerHooks.GetWeaponDamage(player, Main.toolTip, ref damage2);
+							array[num6] = string.Concat(damage2);
 							string[] array4;
 							IntPtr intPtr;
 							(array4 = array)[(int)(intPtr = (IntPtr)num6)] = array4[(int)intPtr] + Lang.tip[58];
 						}
 						else if (Main.toolTip.summon)
 						{
-							array[num6] = string.Concat((int)(Main.player[Main.myPlayer].minionDamage * (float)damage + num7));
+							int damage2 = (int)(player.minionDamage * (float)damage + num7);
+							ItemLoader.GetWeaponDamage(Main.toolTip, player, ref damage2);
+							PlayerHooks.GetWeaponDamage(player, Main.toolTip, ref damage2);
+							array[num6] = string.Concat(damage2);
 							string[] array4;
 							IntPtr intPtr;
 							(array4 = array)[(int)(intPtr = (IntPtr)num6)] = array4[(int)intPtr] + Lang.tip[53];
 						}
 						else
 						{
-							array[num6] = string.Concat(damage);
+							int damage2 = damage;
+							ItemLoader.GetWeaponDamage(Main.toolTip, player, ref damage2);
+							PlayerHooks.GetWeaponDamage(player, Main.toolTip, ref damage2);
+							array[num6] = string.Concat(damage2);
 							string[] array4;
 							IntPtr intPtr;
 							(array4 = array)[(int)(intPtr = (IntPtr)num6)] = array4[(int)intPtr] + Lang.tip[55];
@@ -13898,7 +_,7 @@
 				if (Main.bannerMouseOver)
 				{
 					int num37 = 0;
-					for (int num38 = 0; num38 < 251; num38++)
+					for (int num38 = 0; num38 < NPCLoader.NPCCount; num38++)
 					{
 						if (Item.BannerToNPC(num38) != 0 && Main.player[Main.myPlayer].NPCBannerBuff[num38])
 						{
@@ -14288,6 +_,7 @@
 						{
 							effects = SpriteEffects.FlipHorizontally;
 						}
+						TileLoader.SetSpriteEffects(j, i, type, ref effects);
 						Microsoft.Xna.Framework.Color color = Lighting.GetColor(j, i);
 						int num11 = 0;
 						int num12 = 16;
@@ -14527,6 +_,7 @@
 						{
 							num11 = 2;
 						}
+						TileLoader.SetDrawPositions(j, i, ref num9, ref num11, ref num12);
 						int num14 = 0;
 						if (tile.halfBrick())
 						{
@@ -14703,6 +_,12 @@
 							}
 							num16 = k * 18;
 							num15 = 0;
+						}
+						TileLoader.SetAnimationFrame(type, ref num15);
+						if (!TileLoader.PreDraw(j, i, type, Main.spriteBatch))
+						{
+							TileLoader.PostDraw(j, i, type, Main.spriteBatch);
+							continue;
 						}
 						if (type == 373 || type == 374 || type == 375)
 						{
@@ -15282,6 +_,7 @@
 										flag3 = (flag3 || type == 162);
 									}
 								}
+								flag3 = flag3 || TileLoader.Dangersense(j, i, type, Main.player[Main.myPlayer]);
 								if (flag3)
 								{
 									if (color.R < 255)
@@ -16197,6 +_,7 @@
 								}
 								Main.spriteBatch.Draw(Main.shroomCapTexture, new Vector2((float)(j * 16 - (int)Main.screenPosition.X - 22), (float)(i * 16 - (int)Main.screenPosition.Y - 26)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(num87 * 62, 0, 60, 42)), Lighting.GetColor(j, i), 0f, default(Vector2), 1f, effects, 0f);
 							}
+							TileLoader.DrawEffects(j, i, type, Main.spriteBatch, ref color);
 							if (color.R >= 1 || color.G >= 1 || color.B >= 1)
 							{
 								Tile tile2 = Main.tile[j + 1, i];
@@ -16689,7 +_,7 @@
 									{
 										color = Main.shine(color, (int)type);
 									}
-									if (tile.type == 19)
+									if (TileLoader.IsPlatform(tile.type))
 									{
 										if (Main.canDrawColorTile(j, i))
 										{
@@ -16701,7 +_,7 @@
 										}
 										if (tile.slope() == 1 && Main.tile[j + 1, i + 1].active() && Main.tile[j + 1, i + 1].slope() != 2 && !Main.tile[j + 1, i + 1].halfBrick() && !TileID.Sets.BlocksStairs[(int)Main.tile[j + 1, i + 1].type] && !TileID.Sets.BlocksStairsAbove[(int)Main.tile[j, i + 1].type])
 										{
-											if (Main.tile[j + 1, i + 1].type == 19 && Main.tile[j + 1, i + 1].slope() == 0)
+											if (TileLoader.IsPlatform(Main.tile[j + 1, i + 1].type) && Main.tile[j + 1, i + 1].slope() == 0)
 											{
 												if (Main.canDrawColorTile(j, i))
 												{
@@ -16723,7 +_,7 @@
 										}
 										else if (tile.slope() == 2 && Main.tile[j - 1, i + 1].active() && Main.tile[j - 1, i + 1].slope() != 1 && !Main.tile[j - 1, i + 1].halfBrick() && !TileID.Sets.BlocksStairs[(int)Main.tile[j - 1, i + 1].type] && !TileID.Sets.BlocksStairsAbove[(int)Main.tile[j, i + 1].type])
 										{
-											if (Main.tile[j - 1, i + 1].type == 19 && Main.tile[j - 1, i + 1].slope() == 0)
+											if (TileLoader.IsPlatform(Main.tile[j - 1, i + 1].type) && Main.tile[j - 1, i + 1].slope() == 0)
 											{
 												if (Main.canDrawColorTile(j, i))
 												{
@@ -17431,7 +_,7 @@
 												{
 													texture = Main.tileTexture[(int)type];
 												}
-												if (type == 19)
+												if (TileLoader.IsPlatform(type))
 												{
 													Main.spriteBatch.Draw(texture, new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num9 - 16f) / 2f, (float)(i * 16 - (int)Main.screenPosition.Y + num11 + num14)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)num10, (int)frameY, num9, num12)), color, 0f, default(Vector2), 1f, effects, 0f);
 												}
@@ -17966,6 +_,7 @@
 								int num281 = 0;
 								Main.spriteBatch.Draw(texture2D, new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num9 - 16f) / 2f + (float)num280, (float)(i * 16 - (int)Main.screenPosition.Y + num11 + num281)) + zero, new Microsoft.Xna.Framework.Rectangle?(empty), color2, 0f, default(Vector2), 1f, effects, 0f);
 							}
+							TileLoader.PostDraw(j, i, type, Main.spriteBatch);
 						}
 					}
 				}
@@ -18641,7 +_,7 @@
 		{
 			for (int i = 0; i < 500; i++)
 			{
-				if (Main.gore[i].active && Main.gore[i].type > 0 && Main.gore[i].type >= 706 && Main.gore[i].type <= 717 && (Main.gore[i].frame < 7 || Main.gore[i].frame > 9))
+				if (Main.gore[i].active && Main.gore[i].type > 0 && ModGore.DrawBackGore(Main.gore[i]))
 				{
 					this.LoadGore(Main.gore[i].type);
 					if (Main.gore[i].numFrames > 1)
@@ -18666,7 +_,7 @@
 			{
 				if (Main.gore[i].active && Main.gore[i].type > 0)
 				{
-					if (Main.gore[i].type >= 706 && Main.gore[i].type <= 717 && (Main.gore[i].frame < 7 || Main.gore[i].frame > 9))
+					if (ModGore.DrawBackGore(Main.gore[i]))
 					{
 						Main.drawBackGore = true;
 					}
@@ -18931,6 +_,10 @@
 			else if (Main.npc[i].type == 376)
 			{
 				num = 6f;
+			}
+			else if (Main.npc[i].modNPC != null)
+			{
+				num = Main.npc[i].modNPC.drawOffsetY;
 			}
 			if (Main.npc[i].townNPC && Main.npc[i].ai[0] == 5f)
 			{
@@ -19212,6 +_,7 @@
 						{
 							flag3 = true;
 						}
+						ItemLoader.ArmorSetShadows(player, ref flag, ref flag2, ref flag3, ref flag4);
 						if (player.stoned || player.stealth != 1f)
 						{
 							flag3 = false;
@@ -19356,7 +_,7 @@
 			{
 				try
 				{
-					if (Main.npc[i].active && Main.npc[i].type > 0 && Main.npc[i].type < 540 && !Main.npc[i].hide && Main.npc[i].behindTiles == behindTiles)
+					if (Main.npc[i].active && Main.npc[i].type > 0 && !Main.npc[i].hide && Main.npc[i].behindTiles == behindTiles)
 					{
 						if (Main.npc[i].type == 125 || Main.npc[i].type == 126)
 						{
@@ -19477,7 +_,7 @@
 			}
 		}
 
-		protected void DrawNPC(int i, bool behindTiles)
+		public void DrawNPC(int i, bool behindTiles)
 		{
 			int type = Main.npc[i].type;
 			this.LoadNPC(type);
@@ -20080,6 +_,8 @@
 				}
 				Lighting.AddLight((int)(Main.npc[i].position.X / 16f), (int)(Main.npc[i].position.Y / 16f + 1f), 1f, 0.3f, 0.1f);
 			}
+			//check color9 when Terraria updates
+			NPCLoader.DrawEffects(Main.npc[i], ref color9);
 			if (Main.player[Main.myPlayer].detectCreature && Main.npc[i].lifeMax > 1)
 			{
 				byte b;
@@ -20109,6 +_,11 @@
 				{
 					color9.B = b3;
 				}
+			}
+			if (!NPCLoader.PreDraw(Main.npc[i], Main.spriteBatch, color9))
+			{
+				NPCLoader.PostDraw(Main.npc[i], Main.spriteBatch, color9);
+				return;
 			}
 			if (type == 50)
 			{
@@ -22113,6 +_,7 @@
 					}
 				}
 			}
+			NPCLoader.PostDraw(Main.npc[i], Main.spriteBatch, color9);
 		}
 
 		protected void DrawNPCExtras(NPC n, bool beforeDraw, float addHeight, float addY, Microsoft.Xna.Framework.Color npcColor, Vector2 halfSize, SpriteEffects npcSpriteEffect)
@@ -22186,6 +_,7 @@
 						num2 = 0.75f;
 					}
 				}
+				NPCLoader.DrawTownAttackGun(n, ref num2, ref num3, ref num4);
 				Texture2D texture2D = Main.itemTexture[num3];
 				int num5 = (int)this.DrawPlayerItemPos(1f, num3).X - num4;
 				Vector2 origin = new Vector2((float)(-(float)num5), (float)(texture2D.Height / 2));
@@ -22261,6 +_,7 @@
 						zero.Y = 12f;
 					}
 				}
+				NPCLoader.DrawTownAttackSwing(n, ref texture2D5, ref num6, ref scaleFactor, ref zero);
 				Tuple<Vector2, float> swingStats = n.GetSwingStats(NPCID.Sets.AttackTime[n.type] * 2, (int)n.ai[1], n.spriteDirection, num6, num6);
 				Vector2 vector3 = swingStats.Item1 + (swingStats.Item1 - n.Center) * scaleFactor + zero;
 				Vector2 origin3 = texture2D5.Size() * new Vector2((float)((n.spriteDirection == 1) ? 0 : 1), 1f);
@@ -22415,7 +_,11 @@
 					}
 				}
 			}
-			if (projectile.bobber && Main.player[projectile.owner].inventory[Main.player[projectile.owner].selectedItem].holdStyle > 0)
+			if (!ProjectileLoader.PreDrawExtras(projectile, Main.spriteBatch))
+			{
+				//fluff
+			}
+			else if (projectile.bobber && Main.player[projectile.owner].inventory[Main.player[projectile.owner].selectedItem].holdStyle > 0)
 			{
 				num = mountedCenter.X;
 				num2 = mountedCenter.Y;
@@ -23828,6 +_,11 @@
 			{
 				color25 = Microsoft.Xna.Framework.Color.White;
 			}
+			if (!ProjectileLoader.PreDraw(projectile, Main.spriteBatch, color25))
+			{
+				ProjectileLoader.PostDraw(projectile, Main.spriteBatch, color25);
+				return;
+			}
 			int num148 = 0;
 			int num149 = 0;
 			if (projectile.type == 175)
@@ -24123,6 +_,7 @@
 			{
 				num148 = 8;
 			}
+			ProjectileLoader.DrawOffset(projectile, ref num148, ref num149, ref num150);
 			SpriteEffects spriteEffects = SpriteEffects.None;
 			if (projectile.spriteDirection == -1)
 			{
@@ -25613,7 +_,7 @@
 				}
 				if (projectile.bobber)
 				{
-					if (projectile.ai[1] > 0f && projectile.ai[1] < 3602f && projectile.ai[0] == 1f)
+					if (projectile.ai[1] > 0f && projectile.ai[1] < (float)ItemLoader.ItemCount && projectile.ai[0] == 1f)
 					{
 						int num263 = (int)projectile.ai[1];
 						Vector2 center = projectile.Center;
@@ -25802,6 +_,7 @@
 					}
 				}
 			}
+			ProjectileLoader.PostDraw(projectile, Main.spriteBatch, color25);
 		}
 
 		private static Microsoft.Xna.Framework.Color buffColor(Microsoft.Xna.Framework.Color newColor, float R, float G, float B, float A)
@@ -25920,6 +_,7 @@
 							this.DrawCacheProjsBehindProjectiles.Add(i);
 						}
 					}
+					ProjectileLoader.DrawBehind(Main.projectile[i], i, DrawCacheProjsBehindNPCsAndTiles, DrawCacheProjsBehindNPCs, DrawCacheProjsBehindProjectiles);
 				}
 			}
 		}
@@ -26527,6 +_,7 @@
 				result.Y += 2f * gravdir;
 			}
 			result.X = num;
+			ItemLoader.HoldoutOffset(gravdir, itemtype, ref result);
 			return result;
 		}
 
@@ -26542,6 +_,12 @@
 
 		protected void DrawPlayerHead(Player drawPlayer, float X, float Y, float Alpha = 1f, float Scale = 1f)
 		{
+			//prepare for lots of ugly code
+			PlayerHeadDrawInfo drawInfo = new PlayerHeadDrawInfo();
+			drawInfo.spriteBatch = Main.spriteBatch;
+			drawInfo.drawPlayer = drawPlayer;
+			drawInfo.alpha = Alpha;
+			drawInfo.scale = Scale;
 			int shaderId = 0;
 			int skinVariant = drawPlayer.skinVariant;
 			short num = (short)drawPlayer.hairDye;
@@ -26549,10 +_,11 @@
 			{
 				num = 1;
 			}
+			drawInfo.hairShader = num;
 			for (int i = 0; i < 16 + drawPlayer.extraAccessorySlots * 2; i++)
 			{
 				int num2 = i % 10;
-				if (drawPlayer.dye[num2] != null && drawPlayer.armor[i].type > 0 && drawPlayer.armor[i].stack > 0 && drawPlayer.armor[i].faceSlot > 0 && drawPlayer.armor[i].faceSlot < 9)
+				if (drawPlayer.dye[num2] != null && drawPlayer.armor[i].type > 0 && drawPlayer.armor[i].stack > 0 && drawPlayer.armor[i].faceSlot > 0)
 				{
 					byte arg_81_0 = drawPlayer.dye[num2].dye;
 				}
@@ -26565,18 +_,26 @@
 			{
 				shaderId = (int)drawPlayer.dye[0].dye;
 			}
+			drawInfo.armorShader = shaderId;
 			this.LoadHair(drawPlayer.hair);
 			Microsoft.Xna.Framework.Color color = this.quickAlpha(Microsoft.Xna.Framework.Color.White, Alpha);
+			drawInfo.eyeWhiteColor = color;
 			Microsoft.Xna.Framework.Color color2 = this.quickAlpha(drawPlayer.eyeColor, Alpha);
+			drawInfo.eyeColor = color2;
 			Microsoft.Xna.Framework.Color color3 = this.quickAlpha(drawPlayer.GetHairColor(false), Alpha);
+			drawInfo.hairColor = color3;
 			Microsoft.Xna.Framework.Color color4 = this.quickAlpha(drawPlayer.skinColor, Alpha);
+			drawInfo.skinColor = color4;
 			Microsoft.Xna.Framework.Color color5 = this.quickAlpha(Microsoft.Xna.Framework.Color.White, Alpha);
+			drawInfo.armorColor = color5;
 			SpriteEffects spriteEffects = SpriteEffects.None;
 			if (drawPlayer.direction < 0)
 			{
 				spriteEffects = SpriteEffects.FlipHorizontally;
 			}
+			drawInfo.spriteEffects = spriteEffects;
 			Vector2 vector = new Vector2((float)drawPlayer.legFrame.Width * 0.5f, (float)drawPlayer.legFrame.Height * 0.4f);
+			drawInfo.drawOrigin = vector;
 			Vector2 position = drawPlayer.position;
 			Microsoft.Xna.Framework.Rectangle bodyFrame = drawPlayer.bodyFrame;
 			drawPlayer.bodyFrame.Y = 0;
@@ -26605,12 +_,55 @@
 			{
 				flag2 = true;
 			}
-			if (drawPlayer.head != 38 && drawPlayer.head != 135)
+			ItemLoader.DrawHair(drawPlayer, ref flag, ref flag2);
+			drawInfo.drawHair = flag;
+			drawInfo.drawAltHair = flag2;
+			List<PlayerHeadLayer> drawLayers = PlayerHooks.GetDrawHeadLayers(drawPlayer);
+			int layerIndex = -1;
+			layerLoopContinue:
+			layerIndex++;
+			if (layerIndex >= drawLayers.Count)
+			{
+				goto postDraw;
+			}
+			if (!drawLayers[layerIndex].ShouldDraw(drawLayers))
+			{
+				goto layerLoopContinue;
+			}
+			if (drawLayers[layerIndex] == PlayerHeadLayer.Head)
+			{
+				goto headLayer;
+			}
+			else if (drawLayers[layerIndex] == PlayerHeadLayer.Hair)
+			{
+				goto hairLayer;
+			}
+			else if (drawLayers[layerIndex] == PlayerHeadLayer.AltHair)
+			{
+				goto altHairLayer;
+			}
+			else if (drawLayers[layerIndex] == PlayerHeadLayer.Armor)
+			{
+				goto armorLayer;
+			}
+			else if (drawLayers[layerIndex] == PlayerHeadLayer.FaceAcc)
+			{
+				goto faceLayer;
+			}
+			else
+			{
+				drawLayers[layerIndex].Draw(drawInfo);
+			}
+			goto layerLoopContinue;
+			headLayer:
+			if (drawPlayer.head != 38 && drawPlayer.head != 135 && ItemLoader.DrawHead(drawPlayer))
 			{
 				Main.spriteBatch.Draw(Main.playerTextures[skinVariant, 0], new Vector2(drawPlayer.position.X - Main.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2), drawPlayer.position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f) + drawPlayer.headPosition + vector, new Microsoft.Xna.Framework.Rectangle?(drawPlayer.bodyFrame), color4, drawPlayer.headRotation, vector, Scale, spriteEffects, 0f);
 				Main.spriteBatch.Draw(Main.playerTextures[skinVariant, 1], new Vector2(drawPlayer.position.X - Main.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2), drawPlayer.position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f) + drawPlayer.headPosition + vector, new Microsoft.Xna.Framework.Rectangle?(drawPlayer.bodyFrame), color, drawPlayer.headRotation, vector, Scale, spriteEffects, 0f);
 				Main.spriteBatch.Draw(Main.playerTextures[skinVariant, 2], new Vector2(drawPlayer.position.X - Main.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2), drawPlayer.position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f) + drawPlayer.headPosition + vector, new Microsoft.Xna.Framework.Rectangle?(drawPlayer.bodyFrame), color2, drawPlayer.headRotation, vector, Scale, spriteEffects, 0f);
 			}
+			goto layerLoopContinue;
+			hairLayer:
 			if (flag)
 			{
 				DrawData value = new DrawData(Main.armorHeadTexture[drawPlayer.head], new Vector2(drawPlayer.position.X - Main.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2), drawPlayer.position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f) + drawPlayer.headPosition + vector, new Microsoft.Xna.Framework.Rectangle?(drawPlayer.bodyFrame), color5, drawPlayer.headRotation, vector, Scale, spriteEffects, 0);
@@ -26631,6 +_,8 @@
 					Main.pixelShader.CurrentTechnique.Passes[0].Apply();
 				}
 			}
+			goto layerLoopContinue;
+			altHairLayer:
 			if (flag2)
 			{
 				Microsoft.Xna.Framework.Rectangle bodyFrame3 = drawPlayer.bodyFrame;
@@ -26647,6 +_,8 @@
 					Main.pixelShader.CurrentTechnique.Passes[0].Apply();
 				}
 			}
+			goto layerLoopContinue;
+			armorLayer:
 			if (drawPlayer.head == 23)
 			{
 				Microsoft.Xna.Framework.Rectangle bodyFrame4 = drawPlayer.bodyFrame;
@@ -26718,7 +_,7 @@
 				value4.Draw(Main.spriteBatch);
 				Main.pixelShader.CurrentTechnique.Passes[0].Apply();
 			}
-			else if (drawPlayer.head > 0 && drawPlayer.head < 194 && drawPlayer.head != 28)
+			else if (drawPlayer.head > 0 && drawPlayer.head != 28)
 			{
 				DrawData value5 = new DrawData(Main.armorHeadTexture[drawPlayer.head], new Vector2(drawPlayer.position.X - Main.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2), drawPlayer.position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f) + drawPlayer.headPosition + vector, new Microsoft.Xna.Framework.Rectangle?(drawPlayer.bodyFrame), color5, drawPlayer.headRotation, vector, Scale, spriteEffects, 0);
 				GameShaders.Armor.Apply(shaderId, drawPlayer, new DrawData?(value5));
@@ -26738,7 +_,9 @@
 				value6.Draw(Main.spriteBatch);
 				Main.pixelShader.CurrentTechnique.Passes[0].Apply();
 			}
-			if (drawPlayer.face > 0 && drawPlayer.face < 9)
+			goto layerLoopContinue;
+			faceLayer:
+			if (drawPlayer.face > 0)
 			{
 				DrawData value7;
 				if (drawPlayer.face == 7)
@@ -26753,6 +_,8 @@
 				value7.Draw(Main.spriteBatch);
 				Main.pixelShader.CurrentTechnique.Passes[0].Apply();
 			}
+			goto layerLoopContinue;
+			postDraw:
 			drawPlayer.position = position;
 			drawPlayer.bodyFrame.Y = bodyFrame.Y;
 		}
@@ -26777,12 +_,18 @@
 
 		public void DrawPlayer(Player drawPlayer, Vector2 Position, float rotation, Vector2 rotationOrigin, float shadow = 0f)
 		{
+			//prepare for code more ugly than DrawPlayerHead
+			PlayerDrawInfo drawInfo = new PlayerDrawInfo();
+			drawInfo.drawPlayer = drawPlayer;
+			drawInfo.position = Position;
+			drawInfo.shadow = shadow;
 			DrawData value = default(DrawData);
 			int num = -1;
 			Main.playerDrawData.Clear();
 			Main.playerDrawDust.Clear();
 			Main.playerDrawGore.Clear();
 			Vector2 value2 = Position + (drawPlayer.itemLocation - drawPlayer.position);
+			drawInfo.itemLocation = value2;
 			int num2 = 0;
 			bool flag = false;
 			bool flag2 = false;
@@ -26796,6 +_,9 @@
 			{
 				flag2 = true;
 			}
+			ItemLoader.DrawHands(drawPlayer, ref flag, ref flag2);
+			drawInfo.drawHands = flag;
+			drawInfo.drawArms = flag2;
 			int num3;
 			if (drawPlayer.heldProj >= 0 && shadow == 0f)
 			{
@@ -26804,7 +_,9 @@
 				{
 					flag3 = true;
 				}
-			}
+				ProjectileLoader.DrawHeldProjInFrontOfHeldItemAndArms(Main.projectile[drawPlayer.heldProj], ref flag3);
+			}
+			drawInfo.drawHeldProjInFrontOfHeldItemAndBody = flag3;
 			bool flag4 = false;
 			if (drawPlayer.head == 10 || drawPlayer.head == 12 || drawPlayer.head == 28 || drawPlayer.head == 62 || drawPlayer.head == 97 || drawPlayer.head == 106 || drawPlayer.head == 113 || drawPlayer.head == 116 || drawPlayer.head == 119 || drawPlayer.head == 133 || drawPlayer.head == 138 || drawPlayer.head == 139 || drawPlayer.head == 163 || drawPlayer.head == 178 || drawPlayer.head == 181 || drawPlayer.head == 191)
 			{
@@ -26815,6 +_,9 @@
 			{
 				flag5 = true;
 			}
+			ItemLoader.DrawHair(drawPlayer, ref flag4, ref flag5);
+			drawInfo.drawHair = flag4;
+			drawInfo.drawAltHair = flag5;
 			bool flag6 = false;
 			if (drawPlayer.face == 4 || drawPlayer.face == 3 || drawPlayer.face == 2)
 			{
@@ -26825,18 +_,22 @@
 			{
 				num4 = 1;
 			}
+			drawInfo.hairShader = num4;
 			float num5 = (float)drawPlayer.mount.PlayerOffset;
 			Position.Y -= num5;
+			drawInfo.position = Position;
 			int num6 = 0;
 			if (drawPlayer.dye[0] != null)
 			{
 				num6 = (int)drawPlayer.dye[0].dye;
 			}
+			drawInfo.headArmorShader = num6;
 			int num7 = 0;
 			if (drawPlayer.dye[1] != null)
 			{
 				num7 = (int)drawPlayer.dye[1].dye;
 			}
+			drawInfo.bodyArmorShader = num7;
 			int shader = 0;
 			if (drawPlayer.dye[2] != null)
 			{
@@ -26846,6 +_,7 @@
 			{
 				shader = num7;
 			}
+			drawInfo.legArmorShader = shader;
 			int shader2 = 0;
 			int shader3 = 0;
 			int shader4 = 0;
@@ -26863,53 +_,65 @@
 				int num8 = i % 10;
 				if (drawPlayer.dye[num8] != null && drawPlayer.armor[i].type > 0 && drawPlayer.armor[i].stack > 0 && (i / 10 >= 1 || !drawPlayer.hideVisual[num8] || drawPlayer.armor[i].wingSlot > 0 || drawPlayer.armor[i].type == 934))
 				{
-					if (drawPlayer.armor[i].handOnSlot > 0 && drawPlayer.armor[i].handOnSlot < 19)
+					if (drawPlayer.armor[i].handOnSlot > 0)
 					{
 						shader2 = (int)drawPlayer.dye[num8].dye;
-					}
-					if (drawPlayer.armor[i].handOffSlot > 0 && drawPlayer.armor[i].handOffSlot < 12)
+						drawInfo.handOnShader = shader2;
+					}
+					if (drawPlayer.armor[i].handOffSlot > 0)
 					{
 						shader3 = (int)drawPlayer.dye[num8].dye;
-					}
-					if (drawPlayer.armor[i].backSlot > 0 && drawPlayer.armor[i].backSlot < 10)
+						drawInfo.handOffShader = shader3;
+					}
+					if (drawPlayer.armor[i].backSlot > 0)
 					{
 						shader4 = (int)drawPlayer.dye[num8].dye;
-					}
-					if (drawPlayer.armor[i].frontSlot > 0 && drawPlayer.armor[i].frontSlot < 5)
+						drawInfo.backShader = shader4;
+					}
+					if (drawPlayer.armor[i].frontSlot > 0)
 					{
 						shader5 = (int)drawPlayer.dye[num8].dye;
-					}
-					if (drawPlayer.armor[i].shoeSlot > 0 && drawPlayer.armor[i].shoeSlot < 18)
+						drawInfo.frontShader = shader5;
+					}
+					if (drawPlayer.armor[i].shoeSlot > 0)
 					{
 						shader6 = (int)drawPlayer.dye[num8].dye;
-					}
-					if (drawPlayer.armor[i].waistSlot > 0 && drawPlayer.armor[i].waistSlot < 12)
+						drawInfo.shoeShader = shader6;
+					}
+					if (drawPlayer.armor[i].waistSlot > 0)
 					{
 						shader7 = (int)drawPlayer.dye[num8].dye;
-					}
-					if (drawPlayer.armor[i].shieldSlot > 0 && drawPlayer.armor[i].shieldSlot < 6)
+						drawInfo.waistShader = shader7;
+					}
+					if (drawPlayer.armor[i].shieldSlot > 0)
 					{
 						shader8 = (int)drawPlayer.dye[num8].dye;
-					}
-					if (drawPlayer.armor[i].neckSlot > 0 && drawPlayer.armor[i].neckSlot < 9)
+						drawInfo.shieldShader = shader8;
+					}
+					if (drawPlayer.armor[i].neckSlot > 0)
 					{
 						shader9 = (int)drawPlayer.dye[num8].dye;
-					}
-					if (drawPlayer.armor[i].faceSlot > 0 && drawPlayer.armor[i].faceSlot < 9)
+						drawInfo.neckShader = shader9;
+					}
+					if (drawPlayer.armor[i].faceSlot > 0)
 					{
 						shader10 = (int)drawPlayer.dye[num8].dye;
-					}
-					if (drawPlayer.armor[i].balloonSlot > 0 && drawPlayer.armor[i].balloonSlot < 16)
+						drawInfo.faceShader = shader10;
+					}
+					if (drawPlayer.armor[i].balloonSlot > 0)
 					{
 						shader11 = (int)drawPlayer.dye[num8].dye;
-					}
-					if (drawPlayer.armor[i].wingSlot > 0 && drawPlayer.armor[i].wingSlot < 37)
+						drawInfo.balloonShader = shader11;
+					}
+					if (drawPlayer.armor[i].wingSlot > 0)
 					{
 						shader12 = (int)drawPlayer.dye[num8].dye;
+						drawInfo.wingShader = shader12;
 					}
 					if (drawPlayer.armor[i].type == 934)
 					{
 						shader13 = (int)drawPlayer.dye[num8].dye;
+						drawInfo.carpetShader = shader13;
 					}
 				}
 			}
@@ -26924,32 +_,54 @@
 			SpriteEffects spriteEffects = SpriteEffects.None;
 			SpriteEffects effect = SpriteEffects.FlipHorizontally;
 			Microsoft.Xna.Framework.Color color = drawPlayer.GetImmuneAlpha(drawPlayer.GetHairColor(true), shadow);
+			drawInfo.hairColor = color;
 			Microsoft.Xna.Framework.Color color2 = drawPlayer.GetImmuneAlpha(Lighting.GetColor((int)((double)Position.X + (double)drawPlayer.width * 0.5) / 16, (int)(((double)Position.Y + (double)drawPlayer.height * 0.25) / 16.0), Microsoft.Xna.Framework.Color.White), shadow);
+			drawInfo.eyeWhiteColor = color2;
 			Microsoft.Xna.Framework.Color color3 = drawPlayer.GetImmuneAlpha(Lighting.GetColor((int)((double)Position.X + (double)drawPlayer.width * 0.5) / 16, (int)(((double)Position.Y + (double)drawPlayer.height * 0.25) / 16.0), drawPlayer.eyeColor), shadow);
+			drawInfo.eyeColor = color3;
 			Microsoft.Xna.Framework.Color color4 = drawPlayer.GetImmuneAlpha(Lighting.GetColor((int)((double)Position.X + (double)drawPlayer.width * 0.5) / 16, (int)(((double)Position.Y + (double)drawPlayer.height * 0.25) / 16.0), drawPlayer.skinColor), shadow);
+			drawInfo.faceColor = color4;
 			Microsoft.Xna.Framework.Color color5 = drawPlayer.GetImmuneAlpha(Lighting.GetColor((int)((double)Position.X + (double)drawPlayer.width * 0.5) / 16, (int)(((double)Position.Y + (double)drawPlayer.height * 0.5) / 16.0), drawPlayer.skinColor), shadow);
+			drawInfo.bodyColor = color5;
 			Microsoft.Xna.Framework.Color color6 = drawPlayer.GetImmuneAlpha(Lighting.GetColor((int)((double)Position.X + (double)drawPlayer.width * 0.5) / 16, (int)(((double)Position.Y + (double)drawPlayer.height * 0.75) / 16.0), drawPlayer.skinColor), shadow);
+			drawInfo.legColor = color6;
 			Microsoft.Xna.Framework.Color color7 = drawPlayer.GetImmuneAlphaPure(Lighting.GetColor((int)((double)Position.X + (double)drawPlayer.width * 0.5) / 16, (int)(((double)Position.Y + (double)drawPlayer.height * 0.5) / 16.0), drawPlayer.shirtColor), shadow);
+			drawInfo.shirtColor = color7;
 			Microsoft.Xna.Framework.Color color8 = drawPlayer.GetImmuneAlphaPure(Lighting.GetColor((int)((double)Position.X + (double)drawPlayer.width * 0.5) / 16, (int)(((double)Position.Y + (double)drawPlayer.height * 0.5) / 16.0), drawPlayer.underShirtColor), shadow);
+			drawInfo.underShirtColor = color8;
 			Microsoft.Xna.Framework.Color color9 = drawPlayer.GetImmuneAlphaPure(Lighting.GetColor((int)((double)Position.X + (double)drawPlayer.width * 0.5) / 16, (int)(((double)Position.Y + (double)drawPlayer.height * 0.75) / 16.0), drawPlayer.pantsColor), shadow);
+			drawInfo.pantsColor = color9;
 			Microsoft.Xna.Framework.Color color10 = drawPlayer.GetImmuneAlphaPure(Lighting.GetColor((int)((double)Position.X + (double)drawPlayer.width * 0.5) / 16, (int)(((double)Position.Y + (double)drawPlayer.height * 0.75) / 16.0), drawPlayer.shoeColor), shadow);
+			drawInfo.shoeColor = color10;
 			Microsoft.Xna.Framework.Color color11 = drawPlayer.GetImmuneAlphaPure(Lighting.GetColor((int)((double)Position.X + (double)drawPlayer.width * 0.5) / 16, (int)((double)Position.Y + (double)drawPlayer.height * 0.25) / 16, Microsoft.Xna.Framework.Color.White), shadow);
+			drawInfo.upperArmorColor = color11;
 			Microsoft.Xna.Framework.Color color12 = drawPlayer.GetImmuneAlphaPure(Lighting.GetColor((int)((double)Position.X + (double)drawPlayer.width * 0.5) / 16, (int)((double)Position.Y + (double)drawPlayer.height * 0.5) / 16, Microsoft.Xna.Framework.Color.White), shadow);
+			drawInfo.middleArmorColor = color12;
 			Microsoft.Xna.Framework.Color color13 = color12;
+			drawInfo.mountColor = color13;
 			Microsoft.Xna.Framework.Color color14 = drawPlayer.GetImmuneAlphaPure(Lighting.GetColor((int)((double)Position.X + (double)drawPlayer.width * 0.5) / 16, (int)((double)Position.Y + (double)drawPlayer.height * 0.75) / 16, Microsoft.Xna.Framework.Color.White), shadow);
+			drawInfo.lowerArmorColor = color14;
 			Microsoft.Xna.Framework.Color color15 = new Microsoft.Xna.Framework.Color(255, 255, 255, 100);
 			int num9 = 0;
 			int num10 = 0;
 			int num11 = 0;
 			int num12 = 0;
 			int num13 = -1;
+			drawInfo.headGlowMask = num13;
 			int num14 = -1;
+			drawInfo.bodyGlowMask = num14;
 			int num15 = -1;
+			drawInfo.armGlowMask = num15;
 			int num16 = -1;
+			drawInfo.legGlowMask = num16;
 			Microsoft.Xna.Framework.Color color16 = Microsoft.Xna.Framework.Color.Transparent;
+			drawInfo.headGlowMaskColor = color16;
 			Microsoft.Xna.Framework.Color color17 = Microsoft.Xna.Framework.Color.Transparent;
+			drawInfo.bodyGlowMaskColor = color17;
 			Microsoft.Xna.Framework.Color color18 = Microsoft.Xna.Framework.Color.Transparent;
+			drawInfo.armGlowMaskColor = color18;
 			Microsoft.Xna.Framework.Color color19 = Microsoft.Xna.Framework.Color.Transparent;
+			drawInfo.legGlowMaskColor = color19;
 			num3 = drawPlayer.head;
 			switch (num3)
 			{
@@ -27150,6 +_,10 @@
 				color19 = new Microsoft.Xna.Framework.Color((int)b12, (int)b12, (int)b12, 0);
 				color14 = drawPlayer.GetImmuneAlphaPure(new Microsoft.Xna.Framework.Color((int)b12, (int)b12, (int)b12, 255), shadow);
 			}
+			ItemLoader.DrawArmorColor(EquipType.Head, drawPlayer.head, drawPlayer, shadow, ref color11, ref num13, ref color16);
+			ItemLoader.DrawArmorColor(EquipType.Body, drawPlayer.body, drawPlayer, shadow, ref color12, ref num14, ref color17);
+			ItemLoader.ArmorArmGlowMask(drawPlayer.body, drawPlayer, shadow, ref num15, ref color18);
+			ItemLoader.DrawArmorColor(EquipType.Legs, drawPlayer.legs, drawPlayer, shadow, ref color14, ref num16, ref color19);
 			color16 = drawPlayer.GetImmuneAlphaPure(color16, shadow);
 			color17 = drawPlayer.GetImmuneAlphaPure(color17, shadow);
 			color18 = drawPlayer.GetImmuneAlphaPure(color18, shadow);
@@ -27567,9 +_,11 @@
 					goto IL_2A0A;
 				}
 			}
+			bool fullBright = false;
+			PlayerHooks.DrawEffects(drawInfo, ref num19, ref num20, ref num21, ref num22, ref fullBright);
 			if (num19 != 1f || num20 != 1f || num21 != 1f || num22 != 1f)
 			{
-				if (drawPlayer.onFire || drawPlayer.onFire2 || drawPlayer.onFrostBurn)
+				if (drawPlayer.onFire || drawPlayer.onFire2 || drawPlayer.onFrostBurn || fullBright)
 				{
 					color2 = drawPlayer.GetImmuneAlpha(Microsoft.Xna.Framework.Color.White, shadow);
 					color3 = drawPlayer.GetImmuneAlpha(drawPlayer.eyeColor, shadow);
@@ -27737,6 +_,27 @@
 				color18 = Microsoft.Xna.Framework.Color.Multiply(color18, num48);
 				color19 = Microsoft.Xna.Framework.Color.Multiply(color19, num48);
 			}
+			drawInfo.hairColor = color;
+			drawInfo.eyeWhiteColor = color2;
+			drawInfo.eyeColor = color3;
+			drawInfo.faceColor = color4;
+			drawInfo.bodyColor = color5;
+			drawInfo.legColor = color6;
+			drawInfo.shirtColor = color7;
+			drawInfo.underShirtColor = color8;
+			drawInfo.pantsColor = color9;
+			drawInfo.shoeColor = color10;
+			drawInfo.upperArmorColor = color11;
+			drawInfo.middleArmorColor = color12;
+			drawInfo.lowerArmorColor = color14;
+			drawInfo.headGlowMask = num13;
+			drawInfo.bodyGlowMask = num14;
+			drawInfo.armGlowMask = num15;
+			drawInfo.legGlowMask = num16;
+			drawInfo.headGlowMaskColor = color16;
+			drawInfo.bodyGlowMaskColor = color17;
+			drawInfo.armGlowMaskColor = color18;
+			drawInfo.legGlowMaskColor = color19;
 			if (drawPlayer.gravDir == 1f)
 			{
 				if (drawPlayer.direction == 1)
@@ -27775,9 +_,13 @@
 					drawPlayer.bodyPosition.Y = 6f;
 				}
 			}
+			drawInfo.spriteEffects = spriteEffects;
 			Vector2 vector2 = new Vector2((float)drawPlayer.legFrame.Width * 0.5f, (float)drawPlayer.legFrame.Height * 0.75f);
+			drawInfo.legOrigin = vector2;
 			Vector2 origin = new Vector2((float)drawPlayer.legFrame.Width * 0.5f, (float)drawPlayer.legFrame.Height * 0.5f);
+			drawInfo.bodyOrigin = origin;
 			Vector2 vector3 = new Vector2((float)drawPlayer.legFrame.Width * 0.5f, (float)drawPlayer.legFrame.Height * 0.4f);
+			drawInfo.headOrigin = vector3;
 			if ((drawPlayer.merman || drawPlayer.forceMerman) && !drawPlayer.hideMerman)
 			{
 				drawPlayer.headRotation = drawPlayer.velocity.Y * (float)drawPlayer.direction * 0.1f;
@@ -27807,6 +_,134 @@
 			{
 				flag7 = true;
 			}
+			goto heldItemColor;
+			postSetupVars:
+			List<PlayerLayer> drawLayers = PlayerHooks.GetDrawLayers(drawPlayer);
+			int layerIndex = -1;
+			layerLoopContinue:
+			layerIndex++;
+			if (layerIndex >= drawLayers.Count)
+			{
+				goto postDraw;
+			}
+			if (!drawLayers[layerIndex].ShouldDraw(drawLayers))
+			{
+				goto layerLoopContinue;
+			}
+			if (drawLayers[layerIndex] == PlayerLayer.HairBack)
+			{
+				goto hairBackLayer;
+			}
+			else if (drawLayers[layerIndex] == PlayerLayer.MountBack)
+			{
+				goto mountBackLayer;
+			}
+			else if (drawLayers[layerIndex] == PlayerLayer.MiscEffectsBack)
+			{
+				goto miscEffectsBackLayer;
+			}
+			else if (drawLayers[layerIndex] == PlayerLayer.BackAcc)
+			{
+				goto backAccLayer;
+			}
+			else if (drawLayers[layerIndex] == PlayerLayer.Wings)
+			{
+				goto wingsLayer;
+			}
+			else if (drawLayers[layerIndex] == PlayerLayer.BalloonAcc)
+			{
+				goto balloonAccLayer;
+			}
+			else if (drawLayers[layerIndex] == PlayerLayer.Skin)
+			{
+				goto skinLayer;
+			}
+			else if (drawLayers[layerIndex] == PlayerLayer.Legs)
+			{
+				goto legsLayer;
+			}
+			else if (drawLayers[layerIndex] == PlayerLayer.ShoeAcc)
+			{
+				goto shoeAccLayer;
+			}
+			else if (drawLayers[layerIndex] == PlayerLayer.Body)
+			{
+				goto bodyLayer;
+			}
+			else if (drawLayers[layerIndex] == PlayerLayer.HandOffAcc)
+			{
+				goto handOffAccLayer;
+			}
+			else if (drawLayers[layerIndex] == PlayerLayer.WaistAcc)
+			{
+				goto waistAccLayer;
+			}
+			else if (drawLayers[layerIndex] == PlayerLayer.NeckAcc)
+			{
+				goto neckAccLayer;
+			}
+			else if (drawLayers[layerIndex] == PlayerLayer.Face)
+			{
+				goto faceLayer;
+			}
+			else if (drawLayers[layerIndex] == PlayerLayer.Hair)
+			{
+				goto hairLayer;
+			}
+			else if (drawLayers[layerIndex] == PlayerLayer.Head)
+			{
+				goto headLayer;
+			}
+			else if (drawLayers[layerIndex] == PlayerLayer.FaceAcc)
+			{
+				goto faceAccLayer;
+			}
+			else if (drawLayers[layerIndex] == PlayerLayer.MountFront)
+			{
+				goto mountFrontLayer;
+			}
+			else if (drawLayers[layerIndex] == PlayerLayer.ShieldAcc)
+			{
+				goto shieldAccLayer;
+			}
+			else if (drawLayers[layerIndex] == PlayerLayer.SolarShield)
+			{
+				goto solarShieldLayer;
+			}
+			else if (drawLayers[layerIndex] == PlayerLayer.HeldProjBack)
+			{
+				goto heldProjBackLayer;
+			}
+			else if (drawLayers[layerIndex] == PlayerLayer.HeldItem)
+			{
+				goto heldItemLayer;
+			}
+			else if (drawLayers[layerIndex] == PlayerLayer.Arms)
+			{
+				goto armsLayer;
+			}
+			else if (drawLayers[layerIndex] == PlayerLayer.HandOnAcc)
+			{
+				goto handOnAccLayer;
+			}
+			else if (drawLayers[layerIndex] == PlayerLayer.HeldProjFront)
+			{
+				goto heldProjFrontLayer;
+			}
+			else if (drawLayers[layerIndex] == PlayerLayer.FrontAcc)
+			{
+				goto frontAccLayer;
+			}
+			else if (drawLayers[layerIndex] == PlayerLayer.MiscEffectsFront)
+			{
+				goto miscEffectsFrontLayer;
+			}
+			else
+			{
+				drawLayers[layerIndex].Draw(drawInfo);
+			}
+			goto layerLoopContinue;
+			hairBackLayer:
 			if (flag6)
 			{
 				bodyFrame.Height = 0;
@@ -27830,6 +_,8 @@
 					bodyFrame.Height = height;
 				}
 			}
+			goto layerLoopContinue;
+			mountBackLayer:
 			if (drawPlayer.mount.Active)
 			{
 				drawPlayer.mount.Draw(Main.playerDrawData, 0, drawPlayer, Position, color13, spriteEffects, shadow);
@@ -27847,6 +_,8 @@
 				value.shader = shader13;
 				Main.playerDrawData.Add(value);
 			}
+			goto layerLoopContinue;
+			miscEffectsBackLayer:
 			if (drawPlayer.electrified && shadow == 0f)
 			{
 				Texture2D texture2D = Main.glowMaskTexture[25];
@@ -27869,6 +_,8 @@
 				value = new DrawData(texture2D2, new Vector2((float)((int)(Position.X - Main.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(Position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f))) + drawPlayer.bodyPosition + new Vector2((float)(drawPlayer.bodyFrame.Width / 2), (float)(drawPlayer.bodyFrame.Height / 2)), null, color21, drawPlayer.bodyRotation, texture2D2.Size() / 2f, 1f, spriteEffects, 0);
 				Main.playerDrawData.Add(value);
 			}
+			goto layerLoopContinue;
+			backAccLayer:
 			bool flag8 = false;
 			if ((drawPlayer.wings == 0 || drawPlayer.velocity.Y == 0f) && (drawPlayer.inventory[drawPlayer.selectedItem].type == 1178 || drawPlayer.inventory[drawPlayer.selectedItem].type == 779 || drawPlayer.inventory[drawPlayer.selectedItem].type == 1295 || drawPlayer.inventory[drawPlayer.selectedItem].type == 1910 || drawPlayer.turtleArmor || drawPlayer.body == 106 || drawPlayer.body == 170))
 			{
@@ -27928,9 +_,9 @@
 					Main.playerDrawData.Add(value);
 				}
 			}
-			if (!flag8 && drawPlayer.back > 0 && drawPlayer.back < 10 && !drawPlayer.mount.Active)
-			{
-				if (drawPlayer.front >= 1 && drawPlayer.front <= 4)
+			if (!flag8 && drawPlayer.back > 0 && !drawPlayer.mount.Active)
+			{
+				if (drawPlayer.front >= 1)
 				{
 					int num54 = drawPlayer.bodyFrame.Y / 56;
 					if (num54 < 1 || num54 > 5)
@@ -27961,6 +_,9 @@
 				value.shader = shader4;
 				Main.playerDrawData.Add(value);
 			}
+			goto layerLoopContinue;
+			wingsLayer:
+			flag8 = (drawPlayer.wings == 0 || drawPlayer.velocity.Y == 0f) && (drawPlayer.inventory[drawPlayer.selectedItem].type == 1178 || drawPlayer.inventory[drawPlayer.selectedItem].type == 779 || drawPlayer.inventory[drawPlayer.selectedItem].type == 1295 || drawPlayer.inventory[drawPlayer.selectedItem].type == 1910 || drawPlayer.turtleArmor || drawPlayer.body == 106 || drawPlayer.body == 170);
 			Position.Y += (float)((int)num5 / 2);
 			if (!flag8 && drawPlayer.wings > 0)
 			{
@@ -28138,6 +_,10 @@
 					}
 				}
 			}
+			Position.Y -= (float)((int)num5 / 2);
+			goto layerLoopContinue;
+			balloonAccLayer:
+			Position.Y += (float)((int)num5 / 2);
 			if (drawPlayer.balloon > 0)
 			{
 				int num60 = DateTime.Now.Millisecond % 800 / 200;
@@ -28155,22 +_,26 @@
 				Main.playerDrawData.Add(value);
 			}
 			Position.Y -= (float)((int)num5 / 2);
-			if (drawPlayer.body != 83 && drawPlayer.body != 82 && drawPlayer.body != 93)
+			goto layerLoopContinue;
+			skinLayer:
+			if (drawPlayer.body != 83 && drawPlayer.body != 82 && drawPlayer.body != 93 && ItemLoader.DrawBody(drawPlayer))
 			{
 				value = new DrawData(Main.playerTextures[skinVariant, 3], new Vector2((float)((int)(Position.X - Main.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(Position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f))) + drawPlayer.bodyPosition + new Vector2((float)(drawPlayer.bodyFrame.Width / 2), (float)(drawPlayer.bodyFrame.Height / 2)), new Microsoft.Xna.Framework.Rectangle?(drawPlayer.bodyFrame), color5, drawPlayer.bodyRotation, origin, 1f, spriteEffects, 0);
 				Main.playerDrawData.Add(value);
-				if (drawPlayer.legs != 67 && drawPlayer.legs != 106 && drawPlayer.shoe != 15)
+				if (drawPlayer.legs != 67 && drawPlayer.legs != 106 && drawPlayer.shoe != 15 && ItemLoader.DrawLegs(drawPlayer))
 				{
 					value = new DrawData(Main.playerTextures[skinVariant, 10], new Vector2((float)((int)(Position.X - Main.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(Position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f))) + drawPlayer.bodyPosition + new Vector2((float)(drawPlayer.bodyFrame.Width / 2), (float)(drawPlayer.bodyFrame.Height / 2)), new Microsoft.Xna.Framework.Rectangle?(drawPlayer.legFrame), color6, drawPlayer.legRotation, origin, 1f, spriteEffects, 0);
 					Main.playerDrawData.Add(value);
 				}
 			}
+			goto layerLoopContinue;
 			if (drawPlayer.wearsRobe)
 			{
 				goto IL_5B88;
 			}
 			IL_5852:
-			if (drawPlayer.legs > 0 && drawPlayer.legs < 135 && (drawPlayer.shoe != 15 || drawPlayer.wearsRobe))
+			legsLayer:
+			if (drawPlayer.legs > 0 && (drawPlayer.shoe != 15 || drawPlayer.wearsRobe))
 			{
 				if (!drawPlayer.invis)
 				{
@@ -28192,28 +_,32 @@
 				value = new DrawData(Main.playerTextures[skinVariant, 12], new Vector2((float)((int)(Position.X - Main.screenPosition.X - (float)(drawPlayer.legFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(Position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.legFrame.Height + 4f))) + drawPlayer.legPosition + vector2, new Microsoft.Xna.Framework.Rectangle?(drawPlayer.legFrame), color10, drawPlayer.legRotation, vector2, 1f, spriteEffects, 0);
 				Main.playerDrawData.Add(value);
 			}
+			goto layerLoopContinue;
 			if (drawPlayer.wearsRobe)
 			{
 				goto IL_5C63;
 			}
 			IL_5B88:
-			if (drawPlayer.shoe > 0 && drawPlayer.shoe < 18)
+			shoeAccLayer:
+			if (drawPlayer.shoe > 0)
 			{
 				value = new DrawData(Main.accShoesTexture[(int)drawPlayer.shoe], new Vector2((float)((int)(Position.X - Main.screenPosition.X - (float)(drawPlayer.legFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(Position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.legFrame.Height + 4f))) + drawPlayer.legPosition + vector2, new Microsoft.Xna.Framework.Rectangle?(drawPlayer.legFrame), color14, drawPlayer.legRotation, vector2, 1f, spriteEffects, 0);
 				value.shader = shader6;
 				Main.playerDrawData.Add(value);
 			}
+			goto layerLoopContinue;
 			if (drawPlayer.wearsRobe)
 			{
 				goto IL_5852;
 			}
 			IL_5C63:
-			if (skinVariant == 3 && (drawPlayer.body <= 0 || drawPlayer.body >= 195) && !drawPlayer.invis)
+			bodyLayer:
+			if (skinVariant == 3 && drawPlayer.body <= 0 && !drawPlayer.invis)
 			{
 				value = new DrawData(Main.playerTextures[skinVariant, 14], new Vector2((float)((int)(Position.X - Main.screenPosition.X - (float)(drawPlayer.legFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(Position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.legFrame.Height + 4f))) + drawPlayer.legPosition + vector2, new Microsoft.Xna.Framework.Rectangle?(drawPlayer.legFrame), color7, drawPlayer.legRotation, vector2, 1f, spriteEffects, 0);
 				Main.playerDrawData.Add(value);
 			}
-			if (drawPlayer.body > 0 && drawPlayer.body < 195)
+			if (drawPlayer.body > 0)
 			{
 				Microsoft.Xna.Framework.Rectangle bodyFrame2 = drawPlayer.bodyFrame;
 				int num61 = num2;
@@ -28269,13 +_,17 @@
 				value = new DrawData(Main.playerTextures[skinVariant, 5], new Vector2((float)((int)(Position.X - Main.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(Position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f))) + drawPlayer.bodyPosition + new Vector2((float)(drawPlayer.bodyFrame.Width / 2), (float)(drawPlayer.bodyFrame.Height / 2)), new Microsoft.Xna.Framework.Rectangle?(drawPlayer.bodyFrame), color5, drawPlayer.bodyRotation, origin, 1f, spriteEffects, 0);
 				Main.playerDrawData.Add(value);
 			}
-			if (drawPlayer.handoff > 0 && drawPlayer.handoff < 12)
+			goto layerLoopContinue;
+			handOffAccLayer:
+			if (drawPlayer.handoff > 0)
 			{
 				value = new DrawData(Main.accHandsOffTexture[(int)drawPlayer.handoff], new Vector2((float)((int)(Position.X - Main.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(Position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f))) + drawPlayer.bodyPosition + new Vector2((float)(drawPlayer.bodyFrame.Width / 2), (float)(drawPlayer.bodyFrame.Height / 2)), new Microsoft.Xna.Framework.Rectangle?(drawPlayer.bodyFrame), color12, drawPlayer.bodyRotation, origin, 1f, spriteEffects, 0);
 				value.shader = shader3;
 				Main.playerDrawData.Add(value);
 			}
-			if (drawPlayer.waist > 0 && drawPlayer.waist < 12)
+			goto layerLoopContinue;
+			waistAccLayer:
+			if (drawPlayer.waist > 0)
 			{
 				Microsoft.Xna.Framework.Rectangle legFrame = drawPlayer.legFrame;
 				if (legFrame.Y >= 1064)
@@ -28286,13 +_,17 @@
 				value.shader = shader7;
 				Main.playerDrawData.Add(value);
 			}
-			if (drawPlayer.neck > 0 && drawPlayer.neck < 9)
+			goto layerLoopContinue;
+			neckAccLayer:
+			if (drawPlayer.neck > 0)
 			{
 				value = new DrawData(Main.accNeckTexture[(int)drawPlayer.neck], new Vector2((float)((int)(Position.X - Main.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(Position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f))) + drawPlayer.bodyPosition + new Vector2((float)(drawPlayer.bodyFrame.Width / 2), (float)(drawPlayer.bodyFrame.Height / 2)), new Microsoft.Xna.Framework.Rectangle?(drawPlayer.bodyFrame), color12, drawPlayer.bodyRotation, origin, 1f, spriteEffects, 0);
 				value.shader = shader9;
 				Main.playerDrawData.Add(value);
 			}
-			if (!drawPlayer.invis && drawPlayer.head != 38 && drawPlayer.head != 135)
+			goto layerLoopContinue;
+			faceLayer:
+			if (!drawPlayer.invis && drawPlayer.head != 38 && drawPlayer.head != 135 && ItemLoader.DrawHead(drawPlayer))
 			{
 				value = new DrawData(Main.playerTextures[skinVariant, 0], new Vector2((float)((int)(Position.X - Main.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(Position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f))) + drawPlayer.headPosition + vector3, new Microsoft.Xna.Framework.Rectangle?(drawPlayer.bodyFrame), color4, drawPlayer.headRotation, vector3, 1f, spriteEffects, 0);
 				Main.playerDrawData.Add(value);
@@ -28306,6 +_,8 @@
 					Main.playerDrawData.Add(value);
 				}
 			}
+			goto layerLoopContinue;
+			hairLayer:
 			if (flag4)
 			{
 				value = new DrawData(Main.armorHeadTexture[drawPlayer.head], new Vector2((float)((int)(Position.X - Main.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(Position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f))) + drawPlayer.headPosition + vector3, new Microsoft.Xna.Framework.Rectangle?(drawPlayer.bodyFrame), color11, drawPlayer.headRotation, vector3, 1f, spriteEffects, 0);
@@ -28324,6 +_,8 @@
 				value.shader = -num4;
 				Main.playerDrawData.Add(value);
 			}
+			goto layerLoopContinue;
+			headLayer:
 			if (drawPlayer.head == 23)
 			{
 				if (!drawPlayer.invis)
@@ -28359,7 +_,7 @@
 				value.shader = num6;
 				Main.playerDrawData.Add(value);
 			}
-			else if (drawPlayer.head > 0 && drawPlayer.head < 194 && drawPlayer.head != 28)
+			else if (drawPlayer.head > 0 && drawPlayer.head != 28)
 			{
 				if (!drawPlayer.invis || (drawPlayer.head != 39 && drawPlayer.head != 38))
 				{
@@ -28421,7 +_,9 @@
 					Main.playerDrawData.Add(value);
 				}
 			}
-			if (drawPlayer.face > 0 && drawPlayer.face < 9)
+			goto layerLoopContinue;
+			faceAccLayer:
+			if (drawPlayer.face > 0)
 			{
 				if (drawPlayer.face == 7)
 				{
@@ -28436,6 +_,8 @@
 					Main.playerDrawData.Add(value);
 				}
 			}
+			goto layerLoopContinue;
+			mountFrontLayer:
 			if (drawPlayer.mount.Active)
 			{
 				drawPlayer.mount.Draw(Main.playerDrawData, 2, drawPlayer, Position, color13, spriteEffects, shadow);
@@ -28460,16 +_,20 @@
 					Main.playerDrawData.Add(value);
 				}
 			}
-			if (drawPlayer.shield > 0 && drawPlayer.shield < 6)
+			goto layerLoopContinue;
+			shieldAccLayer:
+			if (drawPlayer.shield > 0)
 			{
 				value = new DrawData(Main.accShieldTexture[(int)drawPlayer.shield], new Vector2((float)((int)(Position.X - Main.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(Position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f))) + drawPlayer.bodyPosition + new Vector2((float)(drawPlayer.bodyFrame.Width / 2), (float)(drawPlayer.bodyFrame.Height / 2)), new Microsoft.Xna.Framework.Rectangle?(drawPlayer.bodyFrame), color12, drawPlayer.bodyRotation, origin, 1f, spriteEffects, 0);
 				value.shader = shader8;
 				Main.playerDrawData.Add(value);
+				goto layerLoopContinue;
 				if (drawPlayer.mount.Cart)
 				{
 					Main.playerDrawData.Reverse(Main.playerDrawData.Count - 2, 2);
 				}
 			}
+			solarShieldLayer:
 			if (drawPlayer.solarShields > 0 && shadow == 0f && !drawPlayer.dead)
 			{
 				Texture2D texture2D5 = Main.extraTexture[61 + drawPlayer.solarShields - 1];
@@ -28484,10 +_,14 @@
 				value.shader = num7;
 				Main.playerDrawData.Add(value);
 			}
+			goto layerLoopContinue;
+			heldProjBackLayer:
 			if (drawPlayer.heldProj >= 0 && shadow == 0f && !flag3)
 			{
 				num = Main.playerDrawData.Count;
 			}
+			goto layerLoopContinue;
+			heldItemColor:
 			Microsoft.Xna.Framework.Color color28 = Lighting.GetColor((int)((double)Position.X + (double)drawPlayer.width * 0.5) / 16, (int)(((double)Position.Y + (double)drawPlayer.height * 0.5) / 16.0));
 			if (drawPlayer.inventory[drawPlayer.selectedItem].type == 678)
 			{
@@ -28513,6 +_,8 @@
 				float arg_7DDE_0 = (1f + num76 * 10f) / 11f;
 				color28 = color28.MultiplyRGBA(new Microsoft.Xna.Framework.Color(Vector4.Lerp(Vector4.One, new Vector4(0f, 0.12f, 0.16f, 0f), 1f - num76)));
 			}
+			goto postSetupVars;
+			heldItemLayer:
 			if (shadow == 0f && !drawPlayer.frozen && (drawPlayer.itemAnimation > 0 || (drawPlayer.inventory[drawPlayer.selectedItem].holdStyle > 0 && !drawPlayer.pulley)) && drawPlayer.inventory[drawPlayer.selectedItem].type > 0 && !drawPlayer.dead && !drawPlayer.inventory[drawPlayer.selectedItem].noUseGraphic && (!drawPlayer.wet || !drawPlayer.inventory[drawPlayer.selectedItem].noWet))
 			{
 				string arg_7EBA_0 = drawPlayer.name;
@@ -28562,6 +_,7 @@
 							zero = new Vector2((float)Main.itemTexture[drawPlayer.inventory[drawPlayer.selectedItem].type].Width, (float)Main.itemTexture[drawPlayer.inventory[drawPlayer.selectedItem].type].Height);
 							num78 -= Main.itemTexture[drawPlayer.inventory[drawPlayer.selectedItem].type].Width;
 						}
+						ItemLoader.HoldoutOrigin(drawPlayer, ref zero);
 						value = new DrawData(Main.itemTexture[drawPlayer.inventory[drawPlayer.selectedItem].type], new Vector2((float)((int)(value2.X - Main.screenPosition.X + zero.X + (float)num78)), (float)((int)(value2.Y - Main.screenPosition.Y + (float)num79))), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.itemTexture[drawPlayer.inventory[drawPlayer.selectedItem].type].Width, Main.itemTexture[drawPlayer.inventory[drawPlayer.selectedItem].type].Height)), drawPlayer.inventory[drawPlayer.selectedItem].GetAlpha(color28), num77, zero, drawPlayer.inventory[drawPlayer.selectedItem].scale, effect, 0);
 						Main.playerDrawData.Add(value);
 					}
@@ -28669,7 +_,9 @@
 					}
 				}
 			}
-			if (drawPlayer.body > 0 && drawPlayer.body < 195)
+			goto layerLoopContinue;
+			armsLayer:
+			if (drawPlayer.body > 0)
 			{
 				Microsoft.Xna.Framework.Rectangle bodyFrame4 = drawPlayer.bodyFrame;
 				int num82 = num2;
@@ -28712,7 +_,9 @@
 				value = new DrawData(Main.playerTextures[skinVariant, 13], new Vector2((float)((int)(Position.X - Main.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(Position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f))) + drawPlayer.bodyPosition + new Vector2((float)(drawPlayer.bodyFrame.Width / 2), (float)(drawPlayer.bodyFrame.Height / 2)), new Microsoft.Xna.Framework.Rectangle?(drawPlayer.bodyFrame), color7, drawPlayer.bodyRotation, origin, 1f, spriteEffects, 0);
 				Main.playerDrawData.Add(value);
 			}
-			if (drawPlayer.handon > 0 && drawPlayer.handon < 19)
+			goto layerLoopContinue;
+			handOnAccLayer:
+			if (drawPlayer.handon > 0)
 			{
 				value = new DrawData(Main.accHandsOnTexture[(int)drawPlayer.handon], new Vector2((float)((int)(Position.X - Main.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(Position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f))) + drawPlayer.bodyPosition + new Vector2((float)(drawPlayer.bodyFrame.Width / 2), (float)(drawPlayer.bodyFrame.Height / 2)), new Microsoft.Xna.Framework.Rectangle?(drawPlayer.bodyFrame), color12, drawPlayer.bodyRotation, origin, 1f, spriteEffects, 0);
 				value.shader = shader2;
@@ -28732,16 +_,23 @@
 					Main.playerDrawData.Add(value);
 				}
 			}
+			goto layerLoopContinue;
+			heldProjFrontLayer:
 			if (drawPlayer.heldProj >= 0 && shadow == 0f && flag3)
 			{
 				num = Main.playerDrawData.Count;
 			}
-			if (!flag8 && drawPlayer.front > 0 && drawPlayer.front < 5 && !drawPlayer.mount.Active)
+			goto layerLoopContinue;
+			frontAccLayer:
+			flag8 = (drawPlayer.wings == 0 || drawPlayer.velocity.Y == 0f) && (drawPlayer.inventory[drawPlayer.selectedItem].type == 1178 || drawPlayer.inventory[drawPlayer.selectedItem].type == 779 || drawPlayer.inventory[drawPlayer.selectedItem].type == 1295 || drawPlayer.inventory[drawPlayer.selectedItem].type == 1910 || drawPlayer.turtleArmor || drawPlayer.body == 106 || drawPlayer.body == 170);
+			if (!flag8 && drawPlayer.front > 0 && !drawPlayer.mount.Active)
 			{
 				value = new DrawData(Main.accFrontTexture[(int)drawPlayer.front], new Vector2((float)((int)(Position.X - Main.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(Position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f))) + drawPlayer.bodyPosition + new Vector2((float)(drawPlayer.bodyFrame.Width / 2), (float)(drawPlayer.bodyFrame.Height / 2)), new Microsoft.Xna.Framework.Rectangle?(drawPlayer.bodyFrame), color12, drawPlayer.bodyRotation, origin, 1f, spriteEffects, 0);
 				value.shader = shader5;
 				Main.playerDrawData.Add(value);
 			}
+			goto layerLoopContinue;
+			miscEffectsFrontLayer:
 			if (drawPlayer.frozen && shadow == 0f)
 			{
 				Microsoft.Xna.Framework.Color color30 = color12;
@@ -28808,6 +_,8 @@
 					Main.playerDrawData.Add(value);
 				}
 			}
+			goto layerLoopContinue;
+			postDraw:
 			if (rotation != 0f)
 			{
 				Vector2 value12 = Position - Main.screenPosition + rotationOrigin;
@@ -28897,7 +_,7 @@
 			}
 		}
 
-		protected void DrawItem(Item item, int whoami)
+		public void DrawItem(Item item, int whoami)
 		{
 			int arg_22_0 = (int)((double)item.position.X + (double)item.width * 0.5) / 16;
 			int arg_28_0 = Lighting.offScreenTiles;
@@ -28924,6 +_,11 @@
 			float scale = 1f;
 			Microsoft.Xna.Framework.Color alpha = item.GetAlpha(color);
 			ItemSlot.GetItemLight(ref alpha, ref scale, item, false);
+			if (!ItemLoader.PreDrawInWorld(item, Main.spriteBatch, color, alpha, ref rotation, ref scale))
+			{
+				ItemLoader.PostDrawInWorld(item, Main.spriteBatch, color, alpha, rotation, scale);
+				return;
+			}
 			float num4 = (float)(item.height - Main.itemTexture[item.type].Height);
 			float num5 = (float)(item.width / 2 - Main.itemTexture[item.type].Width / 2);
 			if (item.type >= 71 && item.type <= 74)
@@ -28943,6 +_,7 @@
 				int num7 = Main.coinTexture[num6].Height / 8;
 				num5 = (float)(item.width / 2 - Main.coinTexture[num6].Width / 2);
 				Main.spriteBatch.Draw(Main.coinTexture[num6], new Vector2(item.position.X - Main.screenPosition.X + (float)(width / 2) + num5, item.position.Y - Main.screenPosition.Y + (float)(num7 / 2) + num4), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, Main.itemFrame[whoami] * num7 + 1, Main.itemTexture[item.type].Width, num7)), alpha, rotation, new Vector2((float)(width / 2), (float)(num7 / 2)), scale, SpriteEffects.None, 0f);
+				ItemLoader.PostDrawInWorld(item, Main.spriteBatch, color, alpha, rotation, scale);
 				return;
 			}
 			if (ItemID.Sets.NebulaPickup[item.type])
@@ -28961,6 +_,7 @@
 				num5 = (float)(item.width / 2 - rectangle.Width / 2);
 				num4 = (float)(item.height - rectangle.Height);
 				Main.spriteBatch.Draw(Main.itemTexture[item.type], new Vector2(item.position.X - Main.screenPosition.X + (float)(rectangle.Width / 2) + num5, item.position.Y - Main.screenPosition.Y + (float)(rectangle.Height / 2) + num4), new Microsoft.Xna.Framework.Rectangle?(rectangle), alpha, rotation, rectangle.Size() / 2f, scale, SpriteEffects.None, 0f);
+				ItemLoader.PostDrawInWorld(item, Main.spriteBatch, color, alpha, rotation, scale);
 				return;
 			}
 			if (ItemID.Sets.AnimatesAsSoul[item.type])
@@ -28979,11 +_,19 @@
 				num5 = (float)(item.width / 2 - rectangle2.Width / 2);
 				num4 = (float)(item.height - rectangle2.Height);
 				Main.spriteBatch.Draw(Main.itemTexture[item.type], new Vector2(item.position.X - Main.screenPosition.X + (float)(rectangle2.Width / 2) + num5, item.position.Y - Main.screenPosition.Y + (float)(rectangle2.Height / 2) + num4), new Microsoft.Xna.Framework.Rectangle?(rectangle2), alpha, rotation, rectangle2.Size() / 2f, scale, SpriteEffects.None, 0f);
+				ItemLoader.PostDrawInWorld(item, Main.spriteBatch, color, alpha, rotation, scale);
 				return;
 			}
 			if (item.type >= 1522 && item.type <= 1527)
 			{
 				Main.spriteBatch.Draw(Main.itemTexture[item.type], new Vector2(item.position.X - Main.screenPosition.X + (float)(Main.itemTexture[item.type].Width / 2) + num5, item.position.Y - Main.screenPosition.Y + (float)(Main.itemTexture[item.type].Height / 2) + num4 + 2f), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.itemTexture[item.type].Width, Main.itemTexture[item.type].Height)), new Microsoft.Xna.Framework.Color(250, 250, 250, (int)(Main.mouseTextColor / 2)), rotation, new Vector2((float)(Main.itemTexture[item.type].Width / 2), (float)(Main.itemTexture[item.type].Height / 2)), (float)Main.mouseTextColor / 1000f + 0.8f, SpriteEffects.None, 0f);
+				ItemLoader.PostDrawInWorld(item, Main.spriteBatch, color, alpha, rotation, scale);
+				return;
+			}
+			if (ItemLoader.animations.Contains(item.type))
+			{
+				ItemLoader.DrawAnimatedItem(item, whoami, color, alpha, rotation, scale);
+				ItemLoader.PostDrawInWorld(item, Main.spriteBatch, color, alpha, rotation, scale);
 				return;
 			}
 			Main.spriteBatch.Draw(Main.itemTexture[item.type], new Vector2(item.position.X - Main.screenPosition.X + (float)(Main.itemTexture[item.type].Width / 2) + num5, item.position.Y - Main.screenPosition.Y + (float)(Main.itemTexture[item.type].Height / 2) + num4 + 2f), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.itemTexture[item.type].Width, Main.itemTexture[item.type].Height)), alpha, rotation, new Vector2((float)(Main.itemTexture[item.type].Width / 2), (float)(Main.itemTexture[item.type].Height / 2)), scale, SpriteEffects.None, 0f);
@@ -28995,6 +_,7 @@
 			{
 				Main.spriteBatch.Draw(Main.glowMaskTexture[(int)item.glowMask], new Vector2(item.position.X - Main.screenPosition.X + (float)(Main.itemTexture[item.type].Width / 2) + num5, item.position.Y - Main.screenPosition.Y + (float)(Main.itemTexture[item.type].Height / 2) + num4 + 2f), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.itemTexture[item.type].Width, Main.itemTexture[item.type].Height)), new Microsoft.Xna.Framework.Color(250, 250, 250, item.alpha), rotation, new Vector2((float)(Main.itemTexture[item.type].Width / 2), (float)(Main.itemTexture[item.type].Height / 2)), scale, SpriteEffects.None, 0f);
 			}
+			ItemLoader.PostDrawInWorld(item, Main.spriteBatch, color, alpha, rotation, scale);
 		}
 
 		protected void DrawRain()
@@ -29140,7 +_,7 @@
 							}
 						}
 						Microsoft.Xna.Framework.Color color5 = Lighting.GetColor((int)((double)dust.position.X + 4.0) / 16, (int)((double)dust.position.Y + 4.0) / 16);
-						if (dust.type == 6 || dust.type == 15 || (dust.noLight && dust.type < 86 && dust.type > 91) || (dust.type >= 59 && dust.type <= 64))
+						if (dust.type == 6 || dust.type == 15 || (dust.noLight && (dust.type < 86 || dust.type > 91)) || (dust.type >= 59 && dust.type <= 64))
 						{
 							color5 = Microsoft.Xna.Framework.Color.White;
 						}
@@ -29148,6 +_,12 @@
 						if (dust.type == 213)
 						{
 							scale = 1f;
+						}
+						ModDust modDust = ModDust.GetDust(dust.type);
+						if (modDust != null)
+						{
+							modDust.Draw(dust, color5, scale);
+							continue;
 						}
 						Main.spriteBatch.Draw(Main.dustTexture, dust.position - Main.screenPosition, new Microsoft.Xna.Framework.Rectangle?(dust.frame), color5, dust.rotation, new Vector2(4f, 4f), scale, SpriteEffects.None, 0f);
 						if (dust.color != default(Microsoft.Xna.Framework.Color))
@@ -29735,7 +_,7 @@
 			for (int j = 0; j < 22; j++)
 			{
 				int num5 = Main.player[Main.myPlayer].buffType[j];
-				if (Main.debuff[num5] && Main.player[Main.myPlayer].buffTime[j] > 5 && num5 != 28 && num5 != 34 && num5 != 87 && num5 != 89 && num5 != 21 && num5 != 86)
+				if (Main.debuff[num5] && Main.player[Main.myPlayer].buffTime[j] > 5 && BuffLoader.CanBeCleared(num5))
 				{
 					num4 += 1000;
 				}
@@ -30027,6 +_,7 @@
 					text = Lang.inter[54] + " (" + text4 + ")";
 				}
 			}
+			NPCLoader.SetChatButtons(ref text, ref text2);
 			int num18 = 180 + (Main.screenWidth - 800) / 2;
 			int num19 = 130 + num2 * 30;
 			float scale = 0.9f;
@@ -30472,7 +_,7 @@
 									for (int l = 0; l < 22; l++)
 									{
 										int num27 = Main.player[Main.myPlayer].buffType[l];
-										if (Main.debuff[num27] && Main.player[Main.myPlayer].buffTime[l] > 0 && num27 != 28 && num27 != 34 && num27 != 87 && num27 != 89 && num27 != 21 && num27 != 86)
+										if (Main.debuff[num27] && Main.player[Main.myPlayer].buffTime[l] > 0 && BuffLoader.CanBeCleared(num27))
 										{
 											Main.player[Main.myPlayer].DelBuff(l);
 										}
@@ -30518,6 +_,7 @@
 								}
 							}
 						}
+						NPCLoader.OnChatButtonClicked(true);
 					}
 				}
 				else if (Main.npcChatFocus3 && Main.player[Main.myPlayer].talkNPC >= 0)
@@ -30568,6 +_,7 @@
 						}
 						Main.npcChatText = Lang.DyeTraderQuestChat(gotDye);
 					}
+					NPCLoader.OnChatButtonClicked(false);
 				}
 			}
 		}
@@ -31783,7 +_,7 @@
 							else
 							{
 								num61++;
-								Main.spriteBatch.DrawString(Main.fontMouseText, Lang.mapLegend[MapHelper.TileToLookup(Main.recipe[Main.availableRecipe[num60]].requiredTile[num62], 0)], new Vector2((float)num58, (float)(num59 + 118 + num63)), color3, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
+								Main.spriteBatch.DrawString(Main.fontMouseText, Lang.mapLegend.FromType(Main.recipe[Main.availableRecipe[num60]].requiredTile[num62]), new Vector2((float)num58, (float)(num59 + 118 + num63)), color3, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
 								num62++;
 							}
 						}
@@ -31912,6 +_,8 @@
 										Main.recipe[Main.availableRecipe[num67]].Create();
 										if (Main.mouseItem.type > 0 || Main.recipe[Main.availableRecipe[num67]].createItem.type > 0)
 										{
+											RecipeHooks.OnCraft(Main.mouseItem, Main.recipe[Main.availableRecipe[num67]]);
+											ItemLoader.OnCraft(Main.mouseItem, Main.recipe[Main.availableRecipe[num67]]);
 											Main.PlaySound(7, -1, -1, 1);
 										}
 									}
@@ -31938,6 +_,8 @@
 										Main.recipe[Main.availableRecipe[num67]].Create();
 										if (Main.mouseItem.type > 0 || Main.recipe[Main.availableRecipe[num67]].createItem.type > 0)
 										{
+											RecipeHooks.OnCraft(Main.mouseItem, Main.recipe[Main.availableRecipe[num67]]);
+											ItemLoader.OnCraft(Main.mouseItem, Main.recipe[Main.availableRecipe[num67]]);
 											Main.PlaySound(7, -1, -1, 1);
 										}
 									}
@@ -32034,6 +_,14 @@
 							else if (Main.recipe[Main.availableRecipe[Main.focusRecipe]].anyPressurePlate && Main.recipe[Main.availableRecipe[Main.focusRecipe]].requiredItem[num72].type == 542)
 							{
 								Main.toolTip.name = Lang.misc[37] + " " + Lang.misc[38];
+							}
+							else
+							{
+								ModRecipe recipe = Main.recipe[Main.availableRecipe[Main.focusRecipe]] as ModRecipe;
+								if (recipe != null)
+								{
+									recipe.CraftGroupDisplayName(num72);
+								}
 							}
 							if (Main.recipe[Main.availableRecipe[Main.focusRecipe]].requiredItem[num72].stack > 1)
 							{
@@ -32987,6 +_,7 @@
 					if (num18 > 0)
 					{
 						Main.buffString = Main.buffTip[num18];
+						int rare = 0;
 						if (num18 == 26 && Main.expertMode)
 						{
 							Main.buffString += Lang.misc[39];
@@ -33002,10 +_,10 @@
 						}
 						if (Main.meleeBuff[num18])
 						{
-							this.MouseText(Main.buffName[num18], -10, 0);
-							return;
-						}
-						this.MouseText(Main.buffName[num18], 0, 0);
+							rare = -10;
+						}
+						BuffLoader.ModifyBuffTip(num18, ref Main.buffString, ref rare);
+						this.MouseText(Main.buffName[num18], rare, 0);
 					}
 				}
 			}
@@ -35607,7 +_,7 @@
 						}
 						else
 						{
-							text2 = Lang.mapLegend[MapHelper.TileToLookup(Main.player[Main.myPlayer].bestOre, 0)] + " detected nearby!";
+							text2 = Lang.mapLegend.FromType(Main.player[Main.myPlayer].bestOre) + " detected nearby!";
 						}
 						flag10 = true;
 					}
@@ -36432,7 +_,7 @@
 #endif
 			base.Exit();
 #if MAC
-            SDL.SDL_DestroyWindow(base.Window.Handle);
+			SDL.SDL_DestroyWindow(base.Window.Handle);
 #endif
 		}
 
@@ -37092,7 +_,7 @@
 						{
 							text = text + " -world \"" + Main.worldPathName + "\"";
 						}
-						this.tServer.StartInfo.FileName = "TerrariaServer.exe";
+						this.tServer.StartInfo.FileName = "tModLoaderServer.exe";
 						this.tServer.StartInfo.Arguments = text;
 						if (Main.libPath != "")
 						{
@@ -37215,17 +_,26 @@
 				{
 					num4 = 3;
 					array9[0] = Lang.menu[9];
+					if (WorldIO.customDataFail != null)
+					{
+						array9[0] = WorldIO.customDataFail.modName + " " + array9[0];
+					}
 					array[0] = true;
 					num -= 30;
 					array4[1] = 70;
 					array4[2] = 50;
 					array9[1] = Lang.menu[10];
 					array9[2] = Lang.menu[6];
+					if (WorldIO.customDataFail != null)
+					{
+						array9[2] = "View Error";
+					}
 					if (this.selectedMenu == 1)
 					{
 						if (FileUtilities.Exists(Main.worldPathName + ".bak", Main.ActiveWorldFileData.IsCloudSave))
 						{
 							FileUtilities.Move(Main.worldPathName + ".bak", Main.worldPathName, Main.ActiveWorldFileData.IsCloudSave, true);
+							WorldIO.LoadBackup(Main.worldPathName, Main.ActiveWorldFileData.IsCloudSave);
 							Main.PlaySound(10, -1, -1, 1);
 							WorldGen.playWorld();
 							Main.menuMode = 10;
@@ -37240,7 +_,14 @@
 					if (this.selectedMenu == 2)
 					{
 						Main.PlaySound(11, -1, -1, 1);
-						Main.menuMode = 0;
+						if (WorldIO.customDataFail == null)
+						{
+							Main.menuMode = 0;
+						}
+						else
+						{
+							ErrorLogger.LogException(WorldIO.customDataFail.InnerException);
+						}
 						Main.netMode = 0;
 					}
 				}
@@ -37248,6 +_,10 @@
 				{
 					num4 = 3;
 					array9[0] = Lang.menu[9];
+					if (WorldIO.customDataFail != null)
+					{
+						array9[0] = WorldIO.customDataFail.modName + " " + array9[0];
+					}
 					array[0] = true;
 					array[1] = true;
 					num -= 30;
@@ -37255,10 +_,21 @@
 					array4[2] = 50;
 					array9[1] = Lang.menu[11];
 					array9[2] = Lang.menu[5];
+					if (WorldIO.customDataFail != null)
+					{
+						array9[2] = "View Error";
+					}
 					if (this.selectedMenu == 2)
 					{
 						Main.PlaySound(11, -1, -1, 1);
-						Main.menuMode = 0;
+						if (WorldIO.customDataFail == null)
+						{
+							Main.menuMode = 0;
+						}
+						else
+						{
+							ErrorLogger.LogException(WorldIO.customDataFail.InnerException);
+						}
 						Main.netMode = 0;
 					}
 				}
@@ -37339,6 +_,8 @@
 					{
 						SkyManager.Instance["Slime"].Deactivate(new object[0]);
 					}
+					Filters.Scene.DeactivateAll();
+					SkyManager.Instance.DeactivateAll();
 					int num9 = 0;
 					num4 = 5;
 					num3 = 60;
@@ -37364,6 +_,7 @@
 						Main.menuMode = 888;
 					}
 					num9++;
+					Interface.AddMenuButtons(this, this.selectedMenu, array9, array7, ref num, ref num3, ref num9, ref num4);
 					array9[num9] = Lang.menu[14];
 					if (this.selectedMenu == num9)
 					{
@@ -38325,6 +_,7 @@
 							Main.PlaySound(11, -1, -1, 1);
 							Main.menuMode = 272727;
 						}
+						Interface.AddSettingsMenuButtons(this, this.selectedMenu, array9, array7, array4, ref num, ref num3, ref num20, ref num4);
 						num20++;
 						array9[num20] = Lang.menu[103];
 						if (this.selectedMenu == num20)
@@ -39074,6 +_,10 @@
 							WorldGen.setWorldSize();
 						}
 					}
+					else
+					{
+						Interface.ModLoaderMenus(this, this.selectedMenu, array9, array7, array4, ref num, ref num3, ref num4);
+					}
 				}
 			}
 			IL_4287:
@@ -39824,10 +_,11 @@
 				{
 					num98 = 2;
 				}
-				Vector2 origin3 = Main.fontMouseText.MeasureString(Main.versionNumber);
+				string drawVersion = Main.versionNumber + Environment.NewLine + ModLoader.ModLoader.versionedName;
+				Vector2 origin3 = Main.fontMouseText.MeasureString(drawVersion);
 				origin3.X *= 0.5f;
 				origin3.Y *= 0.5f;
-				Main.spriteBatch.DrawString(Main.fontMouseText, Main.versionNumber, new Vector2(origin3.X + (float)num97 + 10f, (float)Main.screenHeight - origin3.Y + (float)num98 - 2f), color11, 0f, origin3, 1f, SpriteEffects.None, 0f);
+				Main.spriteBatch.DrawString(Main.fontMouseText, drawVersion, new Vector2(origin3.X + (float)num97 + 10f, (float)Main.screenHeight - origin3.Y + (float)num98 - 2f), color11, 0f, origin3, 1f, SpriteEffects.None, 0f);
 			}
 			Vector2 value = Main.DrawThickCursor(false);
 			Main.spriteBatch.Draw(Main.cursorTextures[0], new Vector2((float)Main.mouseX, (float)Main.mouseY) + value + Vector2.One, null, new Microsoft.Xna.Framework.Color((int)((float)Main.cursorColor.R * 0.2f), (int)((float)Main.cursorColor.G * 0.2f), (int)((float)Main.cursorColor.B * 0.2f), (int)((float)Main.cursorColor.A * 0.5f)), 0f, default(Vector2), Main.cursorScale * 1.1f, SpriteEffects.None, 0f);
@@ -42829,7 +_,12 @@
 				Main.spriteBatch.End();
 				Main.spriteBatch.Begin(SpriteSortMode.Deferred, BlendState.AlphaBlend, SamplerState.PointClamp, DepthStencilState.None, RasterizerState.CullCounterClockwise);
 				flag = true;
-				if (Main.screenPosition.Y > (float)((Main.maxTilesY - 232) * 16))
+				Texture2D modTexture = PlayerHooks.GetMapBackgroundImage(Main.player[Main.myPlayer]);
+				if (modTexture != null)
+				{
+					Main.spriteBatch.Draw(modTexture, new Microsoft.Xna.Framework.Rectangle(0, 0, Main.screenWidth, Main.screenHeight), Microsoft.Xna.Framework.Color.White);
+				}
+				else if (Main.screenPosition.Y > (float)((Main.maxTilesY - 232) * 16))
 				{
 					Main.spriteBatch.Draw(this.mapBG3Texture, new Microsoft.Xna.Framework.Rectangle(0, 0, Main.screenWidth, Main.screenHeight), Microsoft.Xna.Framework.Color.White);
 				}
@@ -43470,7 +_,7 @@
 					}
 					else
 					{
-						text = Lang.mapLegend[type];
+						text = Lang.mapLegend.FromTile(Main.Map[num91, num92], num91, num92);
 					}
 				}
 				float num103 = (num16 * 0.25f * 2f + 1f) / 3f;
@@ -45989,7 +_,7 @@
 						tile = new Tile();
 						Main.tile[j, i] = tile;
 					}
-					byte wall = tile.wall;
+					ushort wall = tile.wall;
 					if (wall > 0 && !this.FullTile(j, i))
 					{
 						Microsoft.Xna.Framework.Color color = Lighting.GetColor(j, i);
@@ -45997,6 +_,11 @@
 						{
 							this.LoadWall((int)wall);
 							int num8 = (int)(Main.wallFrame[(int)wall] * 180);
+							if (!WallLoader.PreDraw(j, i, wall, Main.spriteBatch))
+							{
+								WallLoader.PostDraw(j, i, wall, Main.spriteBatch);
+								continue;
+							}
 							if (Lighting.lightMode < 2 && !Main.wallLight[(int)wall] && (tile.wall < 88 || tile.wall > 93) && !WorldGen.SolidTile(tile))
 							{
 								Texture2D texture;
@@ -46068,6 +_,7 @@
 									Main.spriteBatch.Draw(Main.wallOutlineTexture, new Vector2((float)(j * 16 - (int)Main.screenPosition.X), (float)(i * 16 - (int)Main.screenPosition.Y + 14)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 14, 16, 2)), color, 0f, Vector2.Zero, 1f, SpriteEffects.None, 0f);
 								}
 							}
+							WallLoader.PostDraw(j, i, wall, Main.spriteBatch);
 						}
 					}
 				}
@@ -47095,7 +_,7 @@
 			}
 		}
 
-		protected void LoadNPC(int i)
+		public void LoadNPC(int i)
 		{
 			if (!Main.NPCLoaded[i] || Main.npcTexture[i] == null)
 			{
@@ -47110,7 +_,7 @@
 			}
 		}
 
-		protected void LoadProjectile(int i)
+		public void LoadProjectile(int i)
 		{
 			if (!Main.projectileLoaded[i])
 			{
@@ -47125,7 +_,7 @@
 			}
 		}
 
-		protected void LoadGore(int i)
+		public void LoadGore(int i)
 		{
 			if (!Main.goreLoaded[i])
 			{
@@ -47140,7 +_,7 @@
 			}
 		}
 
-		protected void LoadWall(int i)
+		public void LoadWall(int i)
 		{
 			if (!Main.wallLoaded[i])
 			{
@@ -47155,8 +_,10 @@
 			}
 		}
 
-		protected void LoadTiles(int i)
+		public void LoadTiles(int i)
 		{
+			if (Main.dedServ)
+				return;
 			if (!Main.tileSetsLoaded[i])
 			{
 				Main.tileTexture[i] = base.Content.Load<Texture2D>(string.Concat(new object[]
@@ -48855,6 +_,19 @@
 		}
 
 		protected override void Draw(GameTime gameTime)
+		{
+			try
+			{
+				do_Draw(gameTime);
+			}
+			catch (Exception e)
+			{
+				ErrorLogger.LogException(e);
+				throw;
+			}
+		}
+
+		protected void do_Draw(GameTime gameTime)
 		{
 			if (Main._drawCycleCounter == 0uL)
 			{
@@ -52245,7 +_,7 @@
 								num14++;
 							}
 						}
-						for (int num16 = 0; num16 < 540; num16++)
+						for (int num16 = 0; num16 < Main.nextNPC.Length; num16++)
 						{
 							Main.nextNPC[num16] = false;
 						}
@@ -52638,6 +_,7 @@
 							{
 								WorldGen.spawnNPC = 142;
 							}
+							NPCLoader.CanTownNPCSpawn(num40, num42);
 						}
 					}
 				}
@@ -52691,7 +_,7 @@
 			{
 				if (!Main.dedServ)
 				{
-					if (Main.soundVolume != 0f || (type >= 30 && type <= 35 && type != 39))
+					if ((Main.soundVolume != 0f && !(type >= 30 && type <= 35 && type != 39)) || (Main.ambientVolume != 0f && type >= 30 && type <= 35 && type != 39))
 					{
 						bool flag = false;
 						float num2 = 1f;
@@ -52756,6 +_,10 @@
 								}
 								if (num2 > 0f || (type >= 30 && type <= 35) || type == 39)
 								{
+									if (SoundLoader.PlayModSound(type, num, num2, num3))
+									{
+										return;
+									}
 									if (type == 0)
 									{
 										int num7 = Main.rand.Next(3);
@@ -53335,14 +_,54 @@
 										Main.soundInstanceMoonlordCry.Pitch = (float)Main.rand.Next(-10, 11) * 0.01f;
 										Main.PlaySoundInstance(Main.soundInstanceMoonlordCry);
 									}
-								}
-							}
+									else if (type == SoundLoader.customSoundType)
+									{
+										SoundLoader.customSoundInstances[num].Stop();
+										SoundLoader.customSoundInstances[num] = SoundLoader.customSounds[num].CreateInstance();
+										SoundLoader.customSoundInstances[num].Volume = num2;
+										SoundLoader.customSoundInstances[num].Pan = num3;
+										Main.PlaySoundInstance(SoundLoader.customSoundInstances[num]);
+									}
+								}
+							}
+						}
+					}
+					if (type >= 30 && type <= 35 && type != 39)
+					{
+						if (Main.ambientError > 0)
+						{
+							Main.ambientError--;
+						}
+					}
+					else
+					{
+						if (Main.soundError > 0)
+						{
+							Main.soundError--;
 						}
 					}
 				}
 			}
 			catch
 			{
+				if (type >= 30 && type <= 35 && type != 39)
+				{
+					Main.ambientError++;
+					if (Main.ambientError >= 100)
+					{
+						Main.ambientError = 0;
+						Main.ambientVolume = 0f;
+					}
+				}
+				else
+				{
+					Main.soundError++;
+					if (Main.soundError >= 100)
+					{
+						Main.soundError = 0;
+						Main.soundVolume = 0f;
+					}
+				}
 			}
 		}
 

