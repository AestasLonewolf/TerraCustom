--- src/Terraria\Terraria.UI\ItemSlot.cs
+++ src/tModLoader\Terraria.UI\ItemSlot.cs
@@ -5,6 +_,7 @@
 using Terraria.GameContent.Achievements;
 using Terraria.GameContent.UI.Chat;
 using Terraria.ID;
+using Terraria.ModLoader;
 using Terraria.UI.Chat;
 
 namespace Terraria.UI
@@ -731,7 +_,7 @@
 			if (context == 0)
 			{
 				flag = true;
-				if (Main.mouseRight && inv[slot].type >= 3318 && inv[slot].type <= 3332)
+				if (Main.mouseRight && ((inv[slot].type >= 3318 && inv[slot].type <= 3332) || ItemLoader.IsModBossBag(inv[slot])))
 				{
 					if (Main.mouseRightRelease)
 					{
@@ -848,6 +_,10 @@
 						inv[slot].stack = Main.rand.Next(20, 50);
 					}
 					Recipe.FindRecipes();
+				}
+				else if (ItemLoader.CanRightClick(inv[slot]))
+				{
+					ItemLoader.RightClick(inv[slot], player);
 				}
 				else
 				{
@@ -1270,11 +_,17 @@
 				num4 *= inventoryScale;
 				Vector2 position2 = position + texture2D.Size() * inventoryScale / 2f - rectangle2.Size() * num4 / 2f;
 				Vector2 origin = rectangle2.Size() * (num3 / 2f - 0.5f);
-				spriteBatch.Draw(texture2D3, position2, new Rectangle?(rectangle2), item.GetAlpha(newColor), 0f, origin, num4 * num3, SpriteEffects.None, 0f);
-				if (item.color != Color.Transparent)
-				{
-					spriteBatch.Draw(texture2D3, position2, new Rectangle?(rectangle2), item.GetColor(color), 0f, origin, num4 * num3, SpriteEffects.None, 0f);
-				}
+				if (ItemLoader.PreDrawInInventory(item, spriteBatch, position2, rectangle2, item.GetAlpha(newColor),
+					    item.GetColor(color), origin, num4 * num3))
+				{
+					spriteBatch.Draw(texture2D3, position2, new Rectangle?(rectangle2), item.GetAlpha(newColor), 0f, origin, num4 * num3, SpriteEffects.None, 0f);
+					if (item.color != Color.Transparent)
+					{
+						spriteBatch.Draw(texture2D3, position2, new Rectangle?(rectangle2), item.GetColor(color), 0f, origin, num4 * num3, SpriteEffects.None, 0f);
+					}
+				}
+				ItemLoader.PostDrawInInventory(item, spriteBatch, position2, rectangle2, item.GetAlpha(newColor),
+					item.GetColor(color), origin, num4 * num3);
 				if (item.stack > 1)
 				{
 					ChatManager.DrawColorCodedStringWithShadow(spriteBatch, Main.fontItemStack, item.stack.ToString(), position + new Vector2(10f, 26f) * inventoryScale, color, 0f, Vector2.Zero, new Vector2(inventoryScale), -1f, inventoryScale);
@@ -1493,7 +_,7 @@
 				}
 				if (player.armor[slot].wingSlot > 0 && item.wingSlot > 0)
 				{
-					return false;
+					return !ItemLoader.CanEquipAccessory(item, slot);
 				}
 			}
 			for (int i = 0; i < player.armor.Length; i++)
@@ -1514,7 +_,7 @@
 					return true;
 				}
 			}
-			return false;
+			return !ItemLoader.CanEquipAccessory(item, slot);
 		}
 
 		private static Item DyeSwap(Item item, out bool success)
@@ -1602,6 +_,15 @@
 						ItemSlot.accSlotCount = j - 3;
 					}
 				}
+				for (int k = 0; k < num2; k++)
+				{
+					int index = 3 + (ItemSlot.accSlotCount + num2) % num2;
+					if (ItemLoader.CanEquipAccessory(item, index))
+					{
+						ItemSlot.accSlotCount = index - 3;
+						break;
+					}
+				}
 				if (ItemSlot.accSlotCount >= num2)
 				{
 					ItemSlot.accSlotCount = 0;
@@ -1617,6 +_,10 @@
 					{
 						num3 = k;
 					}
+				}
+				if (!ItemLoader.CanEquipAccessory(item, num3))
+				{
+					return item;
 				}
 				result = player.armor[num3].Clone();
 				player.armor[num3] = item.Clone();
@@ -1748,7 +_,7 @@
 
 		public static Color GetItemLight(ref Color currentColor, ref float scale, int type, bool outInTheWorld = false)
 		{
-			if (type < 0 || type > 3602)
+			if (type < 0)
 			{
 				return currentColor;
 			}

