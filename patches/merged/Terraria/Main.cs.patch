--- src/decompiled\Terraria\Main.cs
+++ src/merged\Terraria\Main.cs
@@ -3,11 +_,19 @@
 using Microsoft.Xna.Framework.Audio;
 using Microsoft.Xna.Framework.Graphics;
 using Microsoft.Xna.Framework.Input;
+#if MAC
+using SDL2;
+#endif
 using System;
 using System.Collections.Generic;
 using System.Diagnostics;
+#if WINDOWS
 using System.Drawing;
+#endif
 using System.IO;
+#if !WINDOWS
+using System.Runtime.CompilerServices;
+#endif
 using System.Runtime.InteropServices;
 using System.Text;
 using System.Text.RegularExpressions;
@@ -41,10 +_,17 @@
 using Terraria.UI.Gamepad;
 using Terraria.Utilities;
 using Terraria.World.Generation;
+#if SERVER
+using Terraria.Server;
+#endif
 
 namespace Terraria
 {
+#if CLIENT
 	public class Main : Game
+#else
+	public class Main : Terraria.Server.Game
+#endif
 	{
 		public delegate void OnPlayerSelected(PlayerFileData player);
 
@@ -3952,6 +_,7 @@
 				LockOnHelper.UseMode = LockOnHelper.LockOnMode.ThreeDS;
 			}
 			Main.Configuration.Get<bool>("InvisibleCursorForGamepad", ref Main.InvisibleCursorForGamepad);
+#if CLIENT && WINDOWS
 			Form form = (Form)Control.FromHandle(Main.instance.Window.Handle);
 			if (Main.screenBorderless)
 			{
@@ -3967,6 +_,7 @@
 			{
 				form.FormBorderStyle = FormBorderStyle.Sizable;
 			}
+#endif
 			Main.SetDisplayMode(preferredBackBufferWidth, preferredBackBufferHeight, fullscreen);
 			Main.Configuration.Get<bool>("SettingsUnlock_WorldEvil", ref Main.SettingsUnlock_WorldEvil);
 			int num2 = 0;
@@ -4165,11 +_,19 @@
 								{
 									Main.terrariasFixedTiming = binaryReader.ReadBoolean();
 								}
+#if WINDOWS
 								if (num >= 91 && binaryReader.ReadBoolean())
 								{
+#if CLIENT
 									Form form = (Form)Control.FromHandle(base.Window.Handle);
 									form.WindowState = FormWindowState.Maximized;
-								}
+#endif
+								}
+#else
+								if (num < 91 || binaryReader.ReadBoolean())
+								{
+								}
+#endif
 								if (num >= 4)
 								{
 									int width = binaryReader.ReadInt32();
@@ -4279,9 +_,14 @@
 			{
 				if (!Main.WorldList[i].IsCloudSave)
 				{
+#if WINDOWS
 					FileOperationAPIWrapper.MoveToRecycleBin(Main.WorldList[i].Path);
 					FileOperationAPIWrapper.MoveToRecycleBin(Main.WorldList[i].Path + ".bak");
-				}
+#else
+                    File.Delete(Main.WorldList[i].Path);
+                    File.Delete(Main.WorldList[i].Path + ".bak");
+#endif
+                }
 				else if (SocialAPI.Cloud != null)
 				{
 					SocialAPI.Cloud.Delete(Main.WorldList[i].Path);
@@ -4700,11 +_,13 @@
 			{
 				string text = "terraria" + Main.rand.Next(2147483647);
 				Console.Title = text;
+#if WINDOWS
 				IntPtr intPtr = Main.FindWindow(null, text);
 				if (intPtr != IntPtr.Zero)
 				{
 					Main.ShowWindow(intPtr, 0);
 				}
+#endif
 			}
 			else
 			{
@@ -5616,14 +_,18 @@
 		public Main()
 		{
 			Main.instance = this;
+#if CLIENT
 			Main.graphics = new GraphicsDeviceManager((Game)this);
 			base.Content.RootDirectory = "Content";
+#endif
 		}
 
 		protected void SetTitle()
 		{
+#if CLIENT
 			Main._cachedTitle = Lang.title();
 			base.Window.Title = Main._cachedTitle;
+#endif
 		}
 
 		public static void InitLifeBytes()
@@ -5680,6 +_,9 @@
 
 		protected override void Initialize()
 		{
+#if SERVER
+			Main.netMode = 2;
+#endif
 			Main.LocalFavoriteData.Load();
 			Main.CloudFavoritesData.Load();
 			Main.FindAnnouncementBoxStatus();
@@ -5692,9 +_,14 @@
 			ItemRarity.Initialize();
 			TileEntity.InitializeAll();
 			Main.InitializeItemAnimations();
+#if CLIENT
 			Lighting.Initialize(false);
 			MapHelper.Initialize();
 			TimeLogger.Initialize();
+#else
+			Mount.Initialize();
+			Minecart.Initialize();
+#endif
 			WorldGen.RandomizeBackgrounds();
 			WorldGen.RandomizeCaveBackgrounds();
 			WorldGen.RandomizeMoonState();
@@ -8119,17 +_,20 @@
 				Main.ActivePlayerFileData.StartPlayTimer();
 				Player.Hooks.EnterWorld(Main.myPlayer);
 			}
+#if CLIENT && WINDOWS
 			else
 			{
 				IntPtr systemMenu = Main.GetSystemMenu(base.Window.Handle, false);
 				int menuItemCount = Main.GetMenuItemCount(systemMenu);
 				Main.RemoveMenu(systemMenu, menuItemCount - 1, 1024);
 			}
+#endif
 			if (Main.dedServ)
 			{
 				return;
 			}
 			Main.clientUUID = Guid.NewGuid().ToString();
+#if CLIENT
 			keyBoardInput.newKeyEvent += delegate(char keyStroke)
 			{
 				if (Main.keyCount < 10)
@@ -8139,6 +_,7 @@
 					Main.keyCount++;
 				}
 			};
+#endif
 			base.Initialize();
 			base.Window.AllowUserResizing = true;
 			this.OpenSettings();
@@ -8164,6 +_,7 @@
 			this.OpenRecent();
 			Star.SpawnStars();
 			WorldGen.RandomizeWeather();
+#if CLIENT
 			this._achievements = new AchievementManager();
 			AchievementInitializer.Load();
 			DyeInitializer.Load();
@@ -8172,6 +_,7 @@
 			AchievementCompleteUI.Initialize();
 			UILinksInitializer.Load();
 			ItemSorting.SetupWhiteLists();
+#endif
 			foreach (DisplayMode current in GraphicsAdapter.DefaultAdapter.SupportedDisplayModes)
 			{
 				if (current.Width >= Main.minScreenW && current.Height >= Main.minScreenH && current.Width <= Main.maxScreenW && current.Height <= Main.maxScreenH)
@@ -9206,7 +_,31 @@
 
 		protected void UpdateMusic()
 		{
-			if (Main.musicVolume == 0f)
+#if !WINDOWS
+			if (Main.engine != null)
+			{
+				Main.engine.Update();
+			}
+			object audioLock = Main._audioLock;
+			lock (audioLock)
+			{
+				for (int i = 0; i < Main.ActiveSoundInstances.Count; i++)
+				{
+					if (Main.ActiveSoundInstances[i] == null)
+					{
+						Main.ActiveSoundInstances.RemoveAt(i);
+						i--;
+					}
+					else if (Main.ActiveSoundInstances[i].State == SoundState.Stopped)
+					{
+						Main.ActiveSoundInstances[i].Dispose();
+						Main.ActiveSoundInstances.RemoveAt(i);
+						i--;
+					}
+				}
+			}
+#endif
+            if (Main.musicVolume == 0f)
 			{
 				Main.curMusic = 0;
 			}
@@ -12522,10 +_,12 @@
 			}
 			Main.MouseOversTryToClear();
 			PlayerInput.ResetInputsOnActiveStateChange();
+#if CLIENT
 			if (Main.OnTick != null)
 			{
 				Main.OnTick();
 			}
+#endif
 			if (Main._hasPendingNetmodeChange)
 			{
 				Main.netMode = Main._targetNetMode;
@@ -12867,7 +_,9 @@
 				}
 				if (!base.IsActive && Main.netMode == 0)
 				{
+#if WINDOWS || LINUX
 					base.IsMouseVisible = true;
+#endif
 					if (Main.netMode != 2 && Main.myPlayer >= 0)
 					{
 						Main.player[Main.myPlayer].delayUseItem = true;
@@ -12881,7 +_,9 @@
 					Main.gamePaused = true;
 					return;
 				}
+#if WINDOWS || LINUX
 				base.IsMouseVisible = false;
+#endif
 				EmoteBubble.UpdateAll();
 				ScreenObstruction.Update();
 				ScreenDarkness.Update();
@@ -14693,6 +_,7 @@
 
 		public static string GetInputText(string oldString)
 		{
+#if CLIENT
 			Main.<>c__DisplayClass1c <>c__DisplayClass1c = new Main.<>c__DisplayClass1c();
 			<>c__DisplayClass1c.oldString = oldString;
 			if (!Main.hasFocus)
@@ -14833,6 +_,9 @@
 				}
 			}
 			return text;
+#else
+			return "";
+#endif
 		}
 
 		public string TooltipMousetextProcessor(string tooltip)
@@ -40163,9 +_,14 @@
 		protected void QuitGame()
 		{
 			Main.SaveSettings();
+#if CLIENT
 			SocialAPI.Shutdown();
+#endif
 			base.Exit();
-		}
+#if MAC
+            SDL.SDL_DestroyWindow(base.Window.Handle);
+#endif
+        }
 
 		protected Microsoft.Xna.Framework.Color randColor()
 		{
@@ -40923,6 +_,16 @@
 							"\" -lang ",
 							Lang.lang
 						});
+#if LINUX
+				        if (IntPtr.Size == 8)
+				        {
+					        text += " -x64";
+				        }
+				        else
+				        {
+					        text += " -x86";
+				        }
+#endif
 						if (Main.ActiveWorldFileData.IsCloudSave)
 						{
 							text = text + " -cloudworld \"" + Main.worldPathName + "\"";
@@ -42280,6 +_,7 @@
 						{
 							array7[num25] = 0.85f;
 						}
+#if WINDOWS
 						bool flag7 = true;
 						Form form = (Form)Control.FromHandle(Main.instance.Window.Handle);
 						System.Drawing.Rectangle bounds = Screen.FromPoint(form.Location).Bounds;
@@ -42287,6 +_,9 @@
 						{
 							flag7 = false;
 						}
+#else
+						bool flag7 = false;
+#endif
 						num2 = 210;
 						num4 = 55;
 						int num26 = 0;
@@ -53600,6 +_,7 @@
 
 		private static void CheckMonoliths()
 		{
+#if CLIENT
 			bool flag = Main.player[Main.myPlayer].ZoneTowerVortex || Main.player[Main.myPlayer].ZoneTowerNebula || Main.player[Main.myPlayer].ZoneTowerStardust || Main.player[Main.myPlayer].ZoneTowerSolar;
 			for (int i = 0; i < Main.MonolithFilterNames.Length; i++)
 			{
@@ -53626,6 +_,7 @@
 					}
 				}
 			}
+#endif
 		}
 
 		protected override void Draw(GameTime gameTime)
@@ -53675,7 +_,9 @@
 			{
 				Main.maxQ = true;
 			}
+#if CLIENT
 			this.UpdateDisplaySettings();
+#endif
 			Main.drawTime++;
 			Main.screenLastPosition = Main.screenPosition;
 			if (Main.stackSplit == 0)
@@ -56706,6 +_,7 @@
 			Main.time += (double)Main.dayRate;
 			CultistRitual.UpdateTime();
 			BirthdayParty.UpdateTime();
+#if CLIENT
 			if (NPC.MoonLordCountdown > 0)
 			{
 				float num5 = MathHelper.Clamp((float)Math.Sin((double)((float)NPC.MoonLordCountdown / 60f * 0.5f)) * 2f, 0f, 1f);
@@ -56720,6 +_,7 @@
 			{
 				Filters.Scene.Deactivate("MoonLordShake", new object[0]);
 			}
+#endif
 			if (NPC.MoonLordCountdown > 0)
 			{
 				NPC.MoonLordCountdown--;
@@ -58292,6 +_,7 @@
 			{
 				Main.graphics.ToggleFullScreen();
 			}
+#if WINDOWS
 			Main.screenMaximized = (((Form)Control.FromHandle(Main.instance.Window.Handle)).WindowState == FormWindowState.Maximized);
 			if (Main.screenBorderless && Main.screenMaximized && !Main.graphics.IsFullScreen)
 			{
@@ -58300,6 +_,9 @@
 			}
 			Form form = (Form)Control.FromHandle(Main.instance.Window.Handle);
 			bool flag = form.FormBorderStyle == FormBorderStyle.None;
+#else
+			Main.screenMaximized = false;
+#endif
 			if (!Main.instance.IsActive && (Main.screenBorderless || Main.screenMaximized || Main.graphics.IsFullScreen))
 			{
 				return;
@@ -58309,6 +_,7 @@
 			int num4;
 			if (Main.screenBorderless || Main.screenMaximized || Main.graphics.IsFullScreen)
 			{
+#if WINDOWS
 				form.MinimumSize = new Size(0, 0);
 				if (Main.screenBorderless && !Main.graphics.IsFullScreen)
 				{
@@ -58316,6 +_,7 @@
 					width = bounds.Width;
 					height = bounds.Height;
 				}
+#endif
 				if (width > Main.maxScreenW)
 				{
 					float num = (float)height / (float)width;
@@ -58333,18 +_,21 @@
 			}
 			else
 			{
+#if WINDOWS
 				form.MinimumSize = new Size(Main.minScreenW, Main.minScreenH);
 				if (flag)
 				{
 					width = Main.displayWidth[0];
 					height = Main.displayHeight[0];
 				}
+#endif
 				width = Math.Min(width, Main.maxScreenW);
 				height = Math.Min(height, Main.maxScreenH);
 				num3 = Main.graphics.GraphicsDevice.Viewport.Width;
 				num4 = Main.graphics.GraphicsDevice.Viewport.Height;
 				flag2 = (Main.graphics.PreferredBackBufferWidth != Main.graphics.GraphicsDevice.Viewport.Width || Main.graphics.PreferredBackBufferHeight != Main.graphics.GraphicsDevice.Viewport.Height);
 			}
+#if WINDOWS
 			if (!fullscreen && !flag2)
 			{
 				if (form.ClientSize.Width < Main.graphics.PreferredBackBufferWidth)
@@ -58358,6 +_,11 @@
 					flag2 = true;
 				}
 			}
+#else
+			if (!fullscreen)
+			{
+			}
+#endif
 			width &= 2147483646;
 			height &= 2147483646;
 			width = Math.Max(width, Main.minScreenW);
@@ -58376,6 +_,7 @@
 				Main.graphics.ApplyChanges();
 				Main.PendingResolutionWidth = Main.screenWidth;
 				Main.PendingResolutionHeight = Main.screenHeight;
+#if WINDOWS
 				if (!fullscreen)
 				{
 					form.SendToBack();
@@ -58393,6 +_,7 @@
 						form.FormBorderStyle = FormBorderStyle.Sizable;
 					}
 				}
+#endif
 				Lighting.Initialize(true);
 				if (!Main.drawToScreen)
 				{

