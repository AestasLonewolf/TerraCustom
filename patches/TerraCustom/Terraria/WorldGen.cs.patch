--- src/tModLoader/Terraria/WorldGen.cs
+++ src/TerraCustom/Terraria/WorldGen.cs
@@ -469,6 +_,7 @@
 		public static int tBottom;
 		public static int tRooms;
 		public static int[] mossType = new int[3];
+		private static int numPyramids = 0;
 		public static int c = 0;
 		public static int m = 0;
 		public static int a = 0;
@@ -581,7 +_,7 @@
 		public static int dungeonX;
 		public static int dungeonY;
 		public static Vector2 lastDungeonHall = Vector2.Zero;
-		public static int maxDRooms = 100;
+		public static int maxDRooms = 1000; // TODO? prob?
 		public static int numDRooms = 0;
 		public static int[] dRoomX = new int[maxDRooms];
 		public static int[] dRoomY = new int[maxDRooms];
@@ -592,12 +_,12 @@
 		private static int[] dRoomT = new int[maxDRooms];
 		private static int[] dRoomB = new int[maxDRooms];
 		private static int numDDoors;
-		private static int[] DDoorX = new int[300];
+		private static int[] DDoorX = new int[3000];
-		private static int[] DDoorY = new int[300];
+		private static int[] DDoorY = new int[3000];
-		private static int[] DDoorPos = new int[300];
+		private static int[] DDoorPos = new int[3000];
 		private static int numDPlats;
-		private static int[] DPlatX = new int[300];
+		private static int[] DPlatX = new int[3000];
-		private static int[] DPlatY = new int[300];
+		private static int[] DPlatY = new int[3000];
 		private static int JungleItemCount = 0;
 		private static int[] JChestX = new int[100];
 		private static int[] JChestY = new int[100];
@@ -1637,7 +_,7 @@
 		}
 
 		public static void dropMeteor() {
-			bool flag = true;
+			bool flag = false;
 			if (Main.netMode == 1)
 				return;
 
@@ -1649,12 +_,12 @@
 			}
 
 			int num = 0;
-			float num2 = Main.maxTilesX / 4200;
+			float num2 = Main.maxTilesX / 4200f;
 			int num3 = (int)(400f * num2);
 			for (int j = 5; j < Main.maxTilesX - 5; j++) {
 				for (int k = 5; (double)k < Main.worldSurface; k++) {
 					if (Main.tile[j, k].active() && Main.tile[j, k].type == 37) {
-						num++;
+						//num++; // prevents dropmeteor from failing
 						if (num > num3)
 							return;
 					}
@@ -1700,8 +_,8 @@
 					break;
 				}
 
-				if (num4 < 100f)
-					break;
+				//if (num4 < 100f)
+				//	break;
 			}
 		}
 
@@ -1861,10 +_,12 @@
 			generateWorld(Main.ActiveWorldFileData.Seed, threadContext as GenerationProgress);
 			WorldFile.saveWorld(Main.ActiveWorldFileData.IsCloudSave, resetTime: true);
 			BackupIO.archiveLock = false;
+			/*
 			if (Main.menuMode == 10 || Main.menuMode == 888)
 				Main.menuMode = 6;
-
+			*/
 			Main.PlaySound(10);
+			Main.menuMode = (int)TerraCustom.MenuModes.Settings;
 		}
 
 		public static void CreateNewWorld(GenerationProgress progress = null) {
@@ -2098,6 +_,7 @@
 		}
 
 		public static void clearWorld() {
+			WorldGen.numPyramids = 0;
 			TownManager = new TownRoomManager();
 			Hooks.ClearWorld();
 			TileEntity.Clear();
@@ -2109,7 +_,7 @@
 					Main.statusText = Lang.gen[65].Value;
 				}
 
-				Main.Map.Clear();
+				//Main.Map.Clear();
 			}
 
 			NPC.MoonLordCountdown = 0;
@@ -2149,16 +_,17 @@
 			prioritizedTownNPC = 0;
 			shadowOrbCount = 0;
 			altarCount = 0;
-			oreTier1 = -1;
-			oreTier2 = -1;
-			oreTier3 = -1;
+			//WorldGen.oreTier1 = -1;
+			//WorldGen.oreTier2 = -1;
+			//WorldGen.oreTier3 = -1;
 			Main.cloudBGActive = 0f;
 			Main.raining = false;
-			Main.hardMode = false;
+			//Main.hardMode = false;
 			Main.helpText = 0;
 			Main.BartenderHelpTextIndex = 0;
 			Main.dungeonX = 0;
 			Main.dungeonY = 0;
+			/*
 			NPC.downedBoss1 = false;
 			NPC.downedBoss2 = false;
 			NPC.downedBoss3 = false;
@@ -2171,11 +_,25 @@
 			NPC.downedFishron = false;
 			NPC.downedAncientCultist = false;
 			NPC.downedMoonlord = false;
+			*/
+			NPC.downedBoss1 = Main.setting.downedEyeOfCthulu;
+			NPC.downedBoss2 = Main.setting.downedEaterBrain;
+			NPC.downedBoss3 = Main.setting.downedSkeletron;
+			NPC.downedQueenBee = Main.setting.downedQueenBee;
+			NPC.downedSlimeKing = Main.setting.downedSlimeKing;
+			NPC.downedMechBossAny = Main.setting.downedTwins | Main.setting.downedDestroyer | Main.setting.downedSkeletronPrime;//false;
+			NPC.downedMechBoss1 = Main.setting.downedTwins;
+			NPC.downedMechBoss2 = Main.setting.downedDestroyer;
+			NPC.downedMechBoss3 = Main.setting.downedSkeletronPrime;
+			NPC.downedFishron = Main.setting.downedFishron;
+			NPC.downedAncientCultist = Main.setting.downedAncientCultist;
+			NPC.downedMoonlord = Main.setting.downedMoonlord;
 			NPC.downedHalloweenKing = false;
 			NPC.downedHalloweenTree = false;
 			NPC.downedChristmasIceQueen = false;
 			NPC.downedChristmasSantank = false;
 			NPC.downedChristmasTree = false;
+			/*
 			NPC.downedPlantBoss = false;
 			NPC.downedGolemBoss = false;
 			NPC.savedStylist = false;
@@ -2185,6 +_,16 @@
 			NPC.savedTaxCollector = false;
 			NPC.savedAngler = false;
 			NPC.savedBartender = false;
+			*/
+			NPC.downedPlantBoss = Main.setting.downedPlantera;
+			NPC.downedGolemBoss = Main.setting.downedGolem;
+			NPC.savedStylist = Main.setting.savedStylist;
+			NPC.savedGoblin = Main.setting.savedGoblin;
+			NPC.savedWizard = Main.setting.savedWizard;
+			NPC.savedMech = Main.setting.savedMechanic;
+			NPC.savedTaxCollector = Main.setting.savedTaxCollector;
+			NPC.savedAngler = Main.setting.savedAngler;
+			NPC.savedBartender = Main.setting.savedBartender;
 			NPC.downedGoblins = false;
 			NPC.downedClown = false;
 			NPC.downedFrost = false;
@@ -2206,13 +_,15 @@
 			Main.treeX[0] = Main.maxTilesX;
 			Main.treeX[1] = Main.maxTilesX;
 			Main.treeX[2] = Main.maxTilesX;
-			Main.treeStyle[0] = 0;
+			//Main.treeStyle[0] = 0;
-			Main.treeStyle[1] = 0;
+			//Main.treeStyle[1] = 0;
-			Main.treeStyle[2] = 0;
+			//Main.treeStyle[2] = 0;
-			Main.treeStyle[3] = 0;
+			//Main.treeStyle[3] = 0;
 			noLiquidCheck = false;
 			Liquid.numLiquid = 0;
 			LiquidBuffer.numLiquidBuffer = 0;
+			Main.tile = new Tile[Main.maxTilesX + 1, Main.maxTilesY + 1]; // should be +1?
+			/*
 			if (Main.netMode == 1 || lastMaxTilesX > Main.maxTilesX || lastMaxTilesY > Main.maxTilesY) {
 				for (int j = 0; j < lastMaxTilesX; j++) {
 					float num = (float)j / (float)lastMaxTilesX;
@@ -2222,7 +_,7 @@
 					}
 				}
 			}
-
+			*/
 			lastMaxTilesX = Main.maxTilesX;
 			lastMaxTilesY = Main.maxTilesY;
 			if (Main.netMode != 2)
@@ -2563,11 +_,175 @@
 		}
 
 		public static void RandomizeMoonState() {
+			Main.moonType = Main.setting.MoonStyle;
+			if (Main.setting.MoonStyle == 3)
+			{
-			Main.moonType = genRand.Next(Main.maxMoons);
+				Main.moonType = WorldGen.genRand.Next(Main.maxMoons);
+			}
 		}
 
 		public static void RandomizeBackgrounds() {
-			treeBG = genRand.Next(9);
+			if (Main.setting.ForestStyle == 14)
+			{
+				WorldGen.treeBG = WorldGen.genRand.Next(9);
+				if ((WorldGen.treeBG == 1 || WorldGen.treeBG == 2) && WorldGen.genRand.Next(2) == 0)
+				{
+					WorldGen.treeBG = WorldGen.genRand.Next(7);
+				}
+				if (WorldGen.treeBG == 0)
+				{
+					WorldGen.treeBG = WorldGen.genRand.Next(7);
+				}
+				if (WorldGen.treeBG == 3 && WorldGen.genRand.Next(3) == 0)
+				{
+					WorldGen.treeBG = 31;
+				}
+				if (WorldGen.treeBG == 5 && WorldGen.genRand.Next(2) == 0)
+				{
+					WorldGen.treeBG = 51;
+				}
+				if (WorldGen.treeBG == 7 && WorldGen.genRand.Next(4) == 0)
+				{
+					WorldGen.treeBG = WorldGen.genRand.Next(71, 74);
+				}
+				WorldGen.setBG(0, WorldGen.treeBG);
+			}
+			else
+			{
+				switch (Main.setting.ForestStyle)
+				{
+					case 9:
+						WorldGen.setBG(0, 31);
+						break;
+					case 10:
+						WorldGen.setBG(0, 51);
+						break;
+					case 11:
+						WorldGen.setBG(0, 71);
+						break;
+					case 12:
+						WorldGen.setBG(0, 72);
+						break;
+					case 13:
+						WorldGen.setBG(0, 73);
+						break;
+					default:
+						WorldGen.setBG(0, Main.setting.ForestStyle);
+						break;
+				}
+			}
+			if (Main.setting.CorruptStyle == 2)
+			{
+				WorldGen.setBG(1, WorldGen.genRand.Next(2));
+			}
+			else
+			{
+				WorldGen.setBG(1, Main.setting.CorruptStyle);
+			}
+			if (Main.setting.JungleStyle == 2)
+			{
+				WorldGen.setBG(2, WorldGen.genRand.Next(2));
+			}
+			else
+			{
+				WorldGen.setBG(2, Main.setting.JungleStyle);
+			}
+			if (Main.setting.SnowStyle == 11)
+			{
+				WorldGen.snowBG = WorldGen.genRand.Next(6);
+				if (WorldGen.snowBG == 2 && WorldGen.genRand.Next(2) == 0)
+				{
+					if (WorldGen.genRand.Next(2) == 0)
+					{
+						WorldGen.snowBG = 21;
+					}
+					else
+					{
+						WorldGen.snowBG = 22;
+					}
+				}
+				if (WorldGen.snowBG == 3 && WorldGen.genRand.Next(2) == 0)
+				{
+					if (WorldGen.genRand.Next(2) == 0)
+					{
+						WorldGen.snowBG = 31;
+					}
+					else
+					{
+						WorldGen.snowBG = 32;
+					}
+				}
+				if (WorldGen.snowBG == 4 && WorldGen.genRand.Next(2) == 0)
+				{
+					if (WorldGen.genRand.Next(2) == 0)
+					{
+						WorldGen.snowBG = 41;
+					}
+					else
+					{
+						WorldGen.snowBG = 42;
+					}
+				}
+				WorldGen.setBG(3, WorldGen.snowBG);
+			}
+			else
+			{
+				switch (Main.setting.SnowStyle)
+				{
+					case 5:
+						WorldGen.setBG(3, 21);
+						break;
+					case 6:
+						WorldGen.setBG(3, 22);
+						break;
+					case 7:
+						WorldGen.setBG(3, 31);
+						break;
+					case 8:
+						WorldGen.setBG(3, 32);
+						break;
+					case 9:
+						WorldGen.setBG(3, 41);
+						break;
+					case 10:
+						WorldGen.setBG(3, 42);
+						break;
+					default:
+						WorldGen.setBG(3, Main.setting.SnowStyle);
+						break;
+				}
+			}
+			if (Main.setting.HallowStyle == 2)
+			{
+				WorldGen.setBG(4, WorldGen.genRand.Next(2));
+			}
+			else
+			{
+				WorldGen.setBG(4, Main.setting.HallowStyle);
+			}
+			if (Main.setting.CrimsonStyle == 3)
+			{
+				WorldGen.setBG(5, WorldGen.genRand.Next(3));
+			}
+			else
+			{
+				WorldGen.setBG(5, Main.setting.CrimsonStyle);
+			}
+			if (Main.setting.DesertStyle == 2)
+			{
+				WorldGen.setBG(6, WorldGen.genRand.Next(2));
+			}
+			else
+			{
+				WorldGen.setBG(6, Main.setting.DesertStyle);
+			}
+			if (Main.setting.OceanStyle == 3)
+			{
+				WorldGen.setBG(7, WorldGen.genRand.Next(3));
+				return;
+			}
+			WorldGen.setBG(7, Main.setting.OceanStyle);
+			/*
 			if ((treeBG == 1 || treeBG == 2) && genRand.Next(2) == 0)
 				treeBG = genRand.Next(7);
 
@@ -2613,6 +_,7 @@
 			setBG(5, genRand.Next(3));
 			setBG(6, genRand.Next(2));
 			setBG(7, genRand.Next(3));
+			*/
 		}
 
 		public static void RandomizeTreeStyle() {
@@ -2626,6 +_,7 @@
 
 				Main.treeX[1] = Main.maxTilesX;
 				Main.treeX[2] = Main.maxTilesX;
+				TerraCustom.TerraCustomUtils.FixTreeStyles();
 				return;
 			}
 
@@ -2644,6 +_,7 @@
 				}
 
 				Main.treeX[2] = Main.maxTilesX;
+				TerraCustom.TerraCustomUtils.FixTreeStyles();
 				return;
 			}
 
@@ -2665,6 +_,7 @@
 			while (Main.treeStyle[3] == Main.treeStyle[0] || Main.treeStyle[3] == Main.treeStyle[1] || Main.treeStyle[3] == Main.treeStyle[2]) {
 				Main.treeStyle[3] = genRand.Next(6);
 			}
+			TerraCustom.TerraCustomUtils.FixTreeStyles();
 		}
 
 		public static void RandomizeCaveBackgrounds() {
@@ -2718,6 +_,13 @@
 			Main.iceBackStyle = genRand.Next(4);
 			Main.hellBackStyle = genRand.Next(3);
 			Main.jungleBackStyle = genRand.Next(2);
+			Main.iceBackStyle = Main.setting.IceBackStyle == 0 ? Main.iceBackStyle : Main.setting.IceBackStyle - 1;
+			Main.hellBackStyle = Main.setting.HellBackStyle == 0 ? Main.hellBackStyle : Main.setting.HellBackStyle - 1;
+			Main.jungleBackStyle = Main.setting.JungleBackStyle == 0 ? Main.jungleBackStyle : Main.setting.JungleBackStyle - 1;
+			Main.caveBackStyle[0] = Main.setting.CaveBackStyle1 == 0 ? Main.caveBackStyle[0] : Main.setting.CaveBackStyle1 - 1;
+			Main.caveBackStyle[1] = Main.setting.CaveBackStyle2 == 0 ? Main.caveBackStyle[1] : Main.setting.CaveBackStyle2 - 1;
+			Main.caveBackStyle[2] = Main.setting.CaveBackStyle3 == 0 ? Main.caveBackStyle[2] : Main.setting.CaveBackStyle3 - 1;
+			Main.caveBackStyle[3] = Main.setting.CaveBackStyle4 == 0 ? Main.caveBackStyle[3] : Main.setting.CaveBackStyle4 - 1;
 		}
 
 		private static void ResetGenerator() {
@@ -3068,7 +_,19 @@
 			}
 		}
 
+		// type: -1: random
+		// 0: 19/40, Dart
+		// 1: 19/40, Boulder // If snow/ice, change to dart
+		// 2: 1/20 Explosives
+		// 3: Below Lava: 5/6 Geyser
 		public static bool placeTrap(int x2, int y2, int type = -1) {
+			int inType = type;
+			int wireType = WorldGen.genRand.Next(3);
+			if (Main.setting.SmartTrapsOff == true)
+			{
+				wireType = 0;
+			}
+			Tile.WireTypeOverride = wireType;
 			int num = y2;
 			bool flag = false;
 			bool flag2 = false;
@@ -3114,7 +_,7 @@
 				for (int i = x2 - 3; i <= x2 + 3; i++) {
 					for (int j = num - 3; j <= num + 3; j++) {
 						if (Main.tile[i, j].type == 147 || Main.tile[i, j].type == 161)
-							type = 0;
+							type = 0; // change 1 to 0 if snow or ice block around
 					}
 				}
 			}
@@ -3568,6 +_,10 @@
 			return true;
 		}
 
+		public static bool InWorldY(int y, int fluff = 0)
+		{
+			return y >= fluff && y < Main.maxTilesY - fluff;
+		}
 		public static void gemCave(int x, int y) {
 			countTiles(x, y);
 			for (int i = 0; i < 6; i++) {
@@ -3623,6 +_,7 @@
 			while (mossType[2] == mossType[0] || mossType[2] == mossType[1]) {
 				mossType[2] = genRand.Next(5);
 			}
+			TerraCustom.TerraCustomUtils.FixMossStyles();
 		}
 
 		public static void setMoss(int x, int y) {
@@ -3763,6 +_,7 @@
 			int silver = 9;
 			int gold = 8;
 			int dungeonSide = 0;
+			int crimsonSide = 0;
 			ushort jungleHut = (ushort)genRand.Next(5);
 			int howFar = 0;
 			int[] PyrX = null;
@@ -3820,29 +_,65 @@
 				ironBar = 22;
 				silverBar = 21;
 				goldBar = 19;
-				if (genRand.Next(2) == 0) {
+				if (Main.setting.IsCopper == 0 || (Main.setting.IsCopper == 2 && genRand.Next(2) == 0)) {
 					copper = 166;
 					copperBar = 703;
 					CopperTierOre = 166;
 				}
 
-				if (genRand.Next(2) == 0) {
+				if (Main.setting.IsIron == 0 || (Main.setting.IsIron == 2 && genRand.Next(2) == 0)) {
 					iron = 167;
 					ironBar = 704;
 					IronTierOre = 167;
 				}
 
-				if (genRand.Next(2) == 0) {
+				if (Main.setting.IsSilver == 0 || (Main.setting.IsSilver == 2 && genRand.Next(2) == 0)) {
 					silver = 168;
 					silverBar = 705;
 					SilverTierOre = 168;
 				}
 
-				if (genRand.Next(2) == 0) {
+				if (Main.setting.IsGold == 0 || (Main.setting.IsGold == 2 && genRand.Next(2) == 0)) {
 					gold = 169;
 					goldBar = 706;
 					GoldTierOre = 169;
 				}
+				if (Main.setting.IsCobalt == 0)
+				{
+					oreTier1 = 221;
+				}
+				else if (Main.setting.IsCobalt == 1)
+				{
+					oreTier1 = 107;//Terraria.ID.TileID.Cobalt
+				}
+				else
+				{
+					oreTier1 = -1;
+				}
+				if (Main.setting.IsMythril == 0)
+				{
+					oreTier2 = 222;
+				}
+				else if (Main.setting.IsMythril == 1)
+				{
+					oreTier2 = 108;
+				}
+				else
+				{
+					oreTier2 = -1;
+				}
+				if (Main.setting.IsAdaman == 0)
+				{
+					oreTier3 = 223;
+				}
+				else if (Main.setting.IsAdaman == 1)
+				{
+					oreTier3 = 111;
+				}
+				else
+				{
+					oreTier3 = -1;
+				}
 
 				crimson = (genRand.Next(2) == 0);
 				if (WorldGenParam_Evil == 0)
@@ -3851,8 +_,19 @@
 				if (WorldGenParam_Evil == 1)
 					crimson = true;
 
+				jungleHut = (ushort)Main.setting.ShrineType;
 				if (jungleHut == 0)
+				{
+					jungleHut = (ushort)WorldGen.genRand.Next(5);
+				}
+				else
+				{
+					jungleHut--;
+				}
+				if (jungleHut == 0)
+				{
 					jungleHut = 119;
+				}
 				else if (jungleHut == 1)
 					jungleHut = 120;
 				else if (jungleHut == 2)
@@ -3861,20 +_,45 @@
 					jungleHut = 175;
 				else if (jungleHut == 4)
 					jungleHut = 45;
-
+				else
+					jungleHut = 45;
+				switch (Main.setting.IsCorruption)
+				{
+					case 2:
+					case 4:
+						WorldGen.crimson = true;
+						break;
+					case 1:
+					case 3:
+						WorldGen.crimson = false;
+						break;
+				}
 				Main.worldID = genRand.Next(int.MaxValue);
 				RandomizeTreeStyle();
 				RandomizeCaveBackgrounds();
 				RandomizeBackgrounds();
 				RandomizeMoonState();
 				dungeonSide = ((genRand.Next(2) != 0) ? 1 : (-1));
+				switch (Main.setting.DungeonSide)
+				{
+					case 1:
+						dungeonSide = -1;
+						break;
+					case 2:
+						dungeonSide = 1;
+						break;
+				}
+				if (Main.setting.CrimsonCorruptionAvoidEachOther && (Main.setting.IsCorruption == 3 || Main.setting.IsCorruption == 4) && !Main.setting.CrimsonCorruptionAvoidJungle)
+				{
+					crimsonSide = ((WorldGen.genRand.Next(2) == 0) ? -1 : 1);
+				}
 			});
 
 			AddGenerationPass("Terrain", delegate (GenerationProgress progress) {
 				progress.Message = Lang.gen[0].Value;
 				int num700 = 0;
 				int num701 = 0;
-				worldSurface = (double)Main.maxTilesY * 0.3;
+				worldSurface = (double)Main.maxTilesY * Main.setting.SurfaceTerrainHeightMin; // 0.3
 				worldSurface *= (double)genRand.Next(90, 110) * 0.005;
 				rockLayer = worldSurface + (double)Main.maxTilesY * 0.2;
 				rockLayer *= (double)genRand.Next(90, 110) * 0.01;
@@ -3882,6 +_,7 @@
 				worldSurfaceHigh = worldSurface;
 				rockLayerLow = rockLayer;
 				rockLayerHigh = rockLayer;
+				double oldWorldSurface = worldSurface;
 				for (int num702 = 0; num702 < Main.maxTilesX; num702++) {
 					float value21 = (float)num702 / (float)Main.maxTilesX;
 					progress.Set(value21);
@@ -3905,18 +_,23 @@
 					}
 
 					num701--;
+					// randomness??
+					// flatish near bigger middle
 					if ((double)num702 > (double)Main.maxTilesX * 0.43 && (double)num702 < (double)Main.maxTilesX * 0.57 && num700 >= 3)
+						if(!Main.setting.BypassSpawnAreaFlatness)
-						num700 = genRand.Next(3);
+							num700 = genRand.Next(3);
 
+					// flat near middle
 					if ((double)num702 > (double)Main.maxTilesX * 0.47 && (double)num702 < (double)Main.maxTilesX * 0.53)
+						if(!Main.setting.BypassSpawnAreaFlatness)
-						num700 = 0;
+							num700 = 0;
 
-					if (num700 == 0) {
+					if (num700 == 0) { // +/- 1: 1/7th chance
 						while (genRand.Next(0, 7) == 0) {
 							worldSurface += genRand.Next(-1, 2);
 						}
 					}
-					else if (num700 == 1) {
+					else if (num700 == 1) { // 1/4 chance -1(up) 1/10 chance down
 						while (genRand.Next(0, 4) == 0) {
 							worldSurface -= 1.0;
 						}
@@ -3925,7 +_,9 @@
 							worldSurface += 1.0;
 						}
 					}
+					
 					else if (num700 == 2) {
+						// 1/10 chance -1(up) 1/4 chance down
 						while (genRand.Next(0, 4) == 0) {
 							worldSurface += 1.0;
 						}
@@ -3935,6 +_,7 @@
 						}
 					}
 					else if (num700 == 3) {
+						//  1/2 chance -1(up) 1/6 chance down
 						while (genRand.Next(0, 2) == 0) {
 							worldSurface -= 1.0;
 						}
@@ -3944,6 +_,7 @@
 						}
 					}
 					else if (num700 == 4) {
+						// 1/5 chance -1(up) 1/2 chance down
 						while (genRand.Next(0, 2) == 0) {
 							worldSurface += 1.0;
 						}
@@ -3952,20 +_,23 @@
 							worldSurface -= 1.0;
 						}
 					}
+					
+					worldSurface = oldWorldSurface + ((worldSurface - oldWorldSurface) * Main.setting.SurfaceTerrainHeightMultiplier);
-
+					double a = worldSurface - Math.Truncate(worldSurface);
-					if (worldSurface < (double)Main.maxTilesY * 0.17) {
+					if (worldSurface < (double)Main.maxTilesY * Main.setting.SurfaceTerrainHeightMax) { // 0.17 prevent surface from going to high
-						worldSurface = (double)Main.maxTilesY * 0.17;
+						worldSurface = (double)Main.maxTilesY * Main.setting.SurfaceTerrainHeightMax;
 						num701 = 0;
 					}
-					else if (worldSurface > (double)Main.maxTilesY * 0.3) {
+					else if (worldSurface > (double)Main.maxTilesY * Main.setting.SurfaceTerrainHeightMin) { // 0.3 prevent surface from going too deep
-						worldSurface = (double)Main.maxTilesY * 0.3;
+						worldSurface = (double)Main.maxTilesY * Main.setting.SurfaceTerrainHeightMin;
 						num701 = 0;
 					}
 
-					if ((num702 < 275 || num702 > Main.maxTilesX - 275) && worldSurface > (double)Main.maxTilesY * 0.25) {
+					if ((num702 < 275 || num702 > Main.maxTilesX - 275) && worldSurface > (double)Main.maxTilesY * (Main.setting.SurfaceTerrainHeightMin - .05)) { // .25 prevent ocean from being too deep
-						worldSurface = (double)Main.maxTilesY * 0.25;
+						worldSurface = (double)Main.maxTilesY * (Main.setting.SurfaceTerrainHeightMin - .05);
 						num701 = 1;
 					}
+					oldWorldSurface = worldSurface + a;
 
 					while (genRand.Next(0, 3) == 0) {
 						rockLayer += genRand.Next(-2, 3);
@@ -3978,6 +_,7 @@
 						rockLayer -= 1.0;
 
 					for (int num703 = 0; (double)num703 < worldSurface; num703++) {
+						// sky
 						Main.tile[num702, num703].active(active: false);
 						Main.tile[num702, num703].frameX = -1;
 						Main.tile[num702, num703].frameY = -1;
@@ -4006,10 +_,11 @@
 				waterLine = (int)(Main.rockLayer + (double)Main.maxTilesY) / 2;
 				waterLine += genRand.Next(-100, 20);
 				lavaLine = waterLine + genRand.Next(50, 80);
+				// TODO, lava world, set lavaline to real high
 			});
 
 			AddGenerationPass("Tunnels", delegate {
-				for (int num695 = 0; num695 < (int)((double)Main.maxTilesX * 0.0015); num695++) {
+				for (int num695 = 0; num695 < (int)((double)Main.maxTilesX * 0.0015 * Main.setting.SurfaceHorizontalTunnelsMultiplier); num695++) {
 					int[] array = new int[10];
 					int[] array2 = new int[10];
 					int num696 = genRand.Next(450, Main.maxTilesX - 450);
@@ -4038,6 +_,7 @@
 				progress.Message = Lang.gen[1].Value;
 				int num682 = genRand.Next((int)((double)Main.maxTilesX * 0.0008), (int)((double)Main.maxTilesX * 0.0025));
 				num682 += 2;
+				num682 = (int)(num682 * Main.setting.SandMultiplier);
 				PyrX = new int[num682];
 				PyrY = new int[num682];
 				for (int num683 = 0; num683 < num682; num683++) {
@@ -4048,7 +_,7 @@
 
 					int num685 = genRand.Next(35, 90);
 					if (num683 == 1) {
-						float num686 = Main.maxTilesX / 4200;
+						float num686 = Main.maxTilesX / 4200f;
 						num685 += (int)((float)genRand.Next(20, 40) * num686);
 					}
 
@@ -4101,7 +_,14 @@
 
 						for (int num691 = 0; (double)num691 < Main.worldSurface; num691++) {
 							if (Main.tile[num690, num691].active()) {
+								if (Main.setting.IsPyramid == 2 || Main.setting.IsPyramid == 0) {
-								if (num690 == (num687 + num688) / 2 && genRand.Next(6) == 0) {
+									if (num690 == (num687 + num688) / 2 && genRand.Next(6) == 0) {
+										PyrX[numPyr] = num690;
+										PyrY[numPyr] = num691;
+										numPyr++;
+									}
+								}
+								else if (Main.setting.IsPyramid == 1 && num690 == (num687 + num688) / 2) {
 									PyrX[numPyr] = num690;
 									PyrY[numPyr] = num691;
 									numPyr++;
@@ -4126,7 +_,8 @@
 					}
 				}
 
-				for (int num694 = 0; num694 < (int)((double)(Main.maxTilesX * Main.maxTilesY) * 8E-06); num694++) {
+				for (int num694 = 0; num694 < (int)((double)(Main.maxTilesX * Main.maxTilesY) * 8E-06 * Main.setting.SandMultiplier); num694++) {
+					// TODO sand ammount  TileID.Sand
 					TileRunner(genRand.Next(0, Main.maxTilesX), genRand.Next((int)Main.worldSurface, (int)Main.rockLayer), genRand.Next(15, 70), genRand.Next(20, 130), 53);
 				}
 			});
@@ -4237,16 +_,18 @@
 			});
 
 			AddGenerationPass("Clay", delegate (GenerationProgress progress) {
+				// TODO clay spawn
+				if  (Main.setting.ClayMult <= 0) return;
 				progress.Message = Lang.gen[6].Value;
-				for (int num661 = 0; num661 < (int)((double)(Main.maxTilesX * Main.maxTilesY) * 2E-05); num661++) {
+				for (int num661 = 0; num661 < (int)((double)(Main.maxTilesX * Main.maxTilesY) * 2E-05 * Main.setting.ClayMult); num661++) {
 					TileRunner(genRand.Next(0, Main.maxTilesX), genRand.Next(0, (int)worldSurfaceLow), genRand.Next(4, 14), genRand.Next(10, 50), 40);
 				}
 
-				for (int num662 = 0; num662 < (int)((double)(Main.maxTilesX * Main.maxTilesY) * 5E-05); num662++) {
+				for (int num662 = 0; num662 < (int)((double)(Main.maxTilesX * Main.maxTilesY) * 5E-05 * Main.setting.ClayMult); num662++) {
 					TileRunner(genRand.Next(0, Main.maxTilesX), genRand.Next((int)worldSurfaceLow, (int)worldSurfaceHigh + 1), genRand.Next(8, 14), genRand.Next(15, 45), 40);
 				}
 
-				for (int num663 = 0; num663 < (int)((double)(Main.maxTilesX * Main.maxTilesY) * 2E-05); num663++) {
+				for (int num663 = 0; num663 < (int)((double)(Main.maxTilesX * Main.maxTilesY) * 2E-05 * Main.setting.ClayMult); num663++) {
 					TileRunner(genRand.Next(0, Main.maxTilesX), genRand.Next((int)worldSurfaceHigh, (int)rockLayerHigh + 1), genRand.Next(8, 15), genRand.Next(5, 50), 40);
 				}
 
@@ -4268,7 +_,8 @@
 			AddGenerationPass("Small Holes", delegate (GenerationProgress progress) {
 				i2 = 0;
 				progress.Message = Lang.gen[7].Value;
+				if (Main.setting.DeepCaveMult <= 0) return;
-				for (int num660 = 0; num660 < (int)((double)(Main.maxTilesX * Main.maxTilesY) * 0.0015); num660++) {
+				for (int num660 = 0; num660 < (int)((double)(Main.maxTilesX * Main.maxTilesY) * 0.0015 * Main.setting.DeepCaveMult); num660++) {
 					float value19 = (float)((double)num660 / ((double)(Main.maxTilesX * Main.maxTilesY) * 0.0015));
 					progress.Set(value19);
 					int type9 = -1;
@@ -4282,7 +_,8 @@
 
 			AddGenerationPass("Dirt Layer Caves", delegate (GenerationProgress progress) {
 				progress.Message = Lang.gen[8].Value;
+				if (Main.setting.SurfaceCaveMult <= 0) return;
-				for (int num659 = 0; num659 < (int)((double)(Main.maxTilesX * Main.maxTilesY) * 3E-05); num659++) {
+				for (int num659 = 0; num659 < (int)((double)(Main.maxTilesX * Main.maxTilesY) * 3E-05 * Main.setting.SurfaceCaveMult); num659++) {
 					float value18 = (float)((double)num659 / ((double)(Main.maxTilesX * Main.maxTilesY) * 3E-05));
 					progress.Set(value18);
 					if (rockLayerHigh <= (double)Main.maxTilesY) {
@@ -4297,7 +_,8 @@
 
 			AddGenerationPass("Rock Layer Caves", delegate (GenerationProgress progress) {
 				progress.Message = Lang.gen[9].Value;
+				if (Main.setting.DeepCaveMult <= 0) return;
-				for (int num658 = 0; num658 < (int)((double)(Main.maxTilesX * Main.maxTilesY) * 0.00013); num658++) {
+				for (int num658 = 0; num658 < (int)((double)(Main.maxTilesX * Main.maxTilesY) * 0.00013 * Main.setting.DeepCaveMult); num658++) {
 					float value17 = (float)((double)num658 / ((double)(Main.maxTilesX * Main.maxTilesY) * 0.00013));
 					progress.Set(value17);
 					if (rockLayerHigh <= (double)Main.maxTilesY) {
@@ -4312,7 +_,8 @@
 
 			AddGenerationPass("Surface Caves", delegate (GenerationProgress progress) {
 				progress.Message = Lang.gen[10].Value;
+				if (Main.setting.SurfaceCaveMult <= 0) return;
-				for (int num648 = 0; num648 < (int)((double)Main.maxTilesX * 0.002); num648++) {
+				for (int num648 = 0; num648 < (int)((double)Main.maxTilesX * 0.002 * Main.setting.SurfaceCaveMult); num648++) {
 					i2 = genRand.Next(0, Main.maxTilesX);
 					while ((float)i2 > (float)Main.maxTilesX * 0.45f && (float)i2 < (float)Main.maxTilesX * 0.55f) {
 						i2 = genRand.Next(0, Main.maxTilesX);
@@ -4370,10 +_,13 @@
 					}
 				}
 
-				float num656 = Main.maxTilesX / 4200;
+				float num656 = Main.maxTilesX / 4200f;
 				for (int num657 = 0; (float)num657 < 5f * num656; num657++) {
 					try {
+						if (Main.maxTilesY > 1000)
-						Caverer(genRand.Next(100, Main.maxTilesX - 100), genRand.Next((int)Main.rockLayer, Main.maxTilesY - 400));
+							Caverer(genRand.Next(100, Main.maxTilesX - 100), genRand.Next((int)Main.rockLayer, Main.maxTilesY - 400));
+						else
+							Caverer(genRand.Next(100, Main.maxTilesX - 100), genRand.Next((int)Main.rockLayer, Main.maxTilesY - 100));
 					}
 					catch {
 					}
@@ -4381,6 +_,7 @@
 			});
 
 			AddGenerationPass("Slush Check", delegate (GenerationProgress progress) {
+				if (Main.setting.NoSnow) return;
 				progress.Message = Lang.gen[56].Value;
 				snowTop = (int)Main.worldSurface;
 				int num639 = genRand.Next(Main.maxTilesX);
@@ -4396,10 +_,14 @@
 				}
 
 				int num640 = genRand.Next(50, 90);
-				float num641 = Main.maxTilesX / 4200;
+				float num641 = Main.maxTilesX / 4200f;
 				num640 += (int)((float)genRand.Next(20, 40) * num641);
 				num640 += (int)((float)genRand.Next(20, 40) * num641);
-				int num642 = num639 - num640;
+				int num642 = (int)((num639 - num640) / (Main.setting.IceBiomeWidth));
+				if (num642 > (num639 - num640))
+				{
+					num642 = num639 - num640;
+				}
 				num640 = genRand.Next(50, 90);
 				num640 += (int)((float)genRand.Next(20, 40) * num641);
 				num640 += (int)((float)genRand.Next(20, 40) * num641);
@@ -4411,9 +_,19 @@
 					num643 = Main.maxTilesX;
 
 				int num644 = 10;
-				for (int num645 = 0; num645 <= lavaLine - 140; num645++) {
-					num642 += genRand.Next(-4, 4);
-					num643 += genRand.Next(-3, 5);
+				int Ybase = WorldGen.lavaLine - 140;
+				if (Main.setting.IceBiomeDepth == 2)
+				{
+					Ybase = WorldGen.lastMaxTilesY - 220;
+				}
+				if (Main.setting.IceBiomeDepth == 0) {
+					Ybase = (int)Main.worldSurface + (int)(WorldGen.lastMaxTilesY / 24);
+				}
+				for (int num645 = 0; num645 <= Ybase; num645++) {
+					num642 += (int)(genRand.Next(-4, 4) * Main.setting.IceBiomeWidth);
+					num643 += (int)(genRand.Next(-3, 5) * Main.setting.IceBiomeWidth);
+					num642 = Utils.Clamp(num642, 0, Main.maxTilesX);
+					num643 = Utils.Clamp(num643, 0, Main.maxTilesX);
 					snowMinX[num645] = num642;
 					snowMaxX[num645] = num643;
 					for (int num646 = num642; num646 < num643; num646++) {
@@ -4497,10 +_,12 @@
 			});
 
 			AddGenerationPass("Jungle", delegate (GenerationProgress progress) {
+				if (Main.setting.NoJungle) return;
 				progress.Message = Lang.gen[11].Value;
-				float num616 = Main.maxTilesX / 4200;
+				float num616 = Main.maxTilesX / 4200f;
-				num616 *= 1.5f;
+				num616 *= 1.5f * Main.setting.JungleScale;
 				int num617 = 0;
+				float yStrength = (Main.maxTilesY / 4200f) * 3.5f * 1.5f; // num616 is xStrength
 				float num618 = (float)genRand.Next(15, 30) * 0.01f;
 				if (dungeonSide == -1) {
 					num618 = 1f - num618;
@@ -4512,38 +_,38 @@
 
 				int num619 = (int)((double)Main.maxTilesY + Main.rockLayer) / 2;
 				num617 += genRand.Next((int)(-100f * num616), (int)(101f * num616));
-				num619 += genRand.Next((int)(-100f * num616), (int)(101f * num616));
+				num619 += genRand.Next((int)(-100f * yStrength), (int)(101f * yStrength));
 				int num620 = num617;
 				int num621 = num619;
 				TileRunner(num617, num619, genRand.Next((int)(250f * num616), (int)(500f * num616)), genRand.Next(50, 150), 59, addTile: false, dungeonSide * 3);
-				for (int num622 = 0; (float)num622 < 6f * num616; num622++) {
+				for (int num622 = 0; (float)num622 < 6f * num616 / Main.setting.JungleScale; num622++) { // TODO: Is this logic correct?
-					TileRunner(num617 + genRand.Next(-(int)(125f * num616), (int)(125f * num616)), num619 + genRand.Next(-(int)(125f * num616), (int)(125f * num616)), genRand.Next(3, 7), genRand.Next(3, 8), genRand.Next(63, 65));
+					TileRunner(num617 + genRand.Next(-(int)(125f * num616), (int)(125f * num616)), num619 + genRand.Next(-(int)(125f * yStrength), (int)(125f * yStrength)), genRand.Next(3, 7), genRand.Next(3, 8), genRand.Next(63, 65));
 				}
 
 				mudWall = true;
 				progress.Set(0.15f);
 				num617 += genRand.Next((int)(-250f * num616), (int)(251f * num616));
-				num619 += genRand.Next((int)(-150f * num616), (int)(151f * num616));
+				num619 += genRand.Next((int)(-150f * yStrength), (int)(151f * yStrength));
 				int num623 = num617;
 				int num624 = num619;
 				int num625 = num617;
 				int num626 = num619;
 				TileRunner(num617, num619, genRand.Next((int)(250f * num616), (int)(500f * num616)), genRand.Next(50, 150), 59);
 				mudWall = false;
-				for (int num627 = 0; (float)num627 < 6f * num616; num627++) {
+				for (int num627 = 0; (float)num627 < 6f * num616 / Main.setting.JungleScale; num627++) {
-					TileRunner(num617 + genRand.Next(-(int)(125f * num616), (int)(125f * num616)), num619 + genRand.Next(-(int)(125f * num616), (int)(125f * num616)), genRand.Next(3, 7), genRand.Next(3, 8), genRand.Next(65, 67));
+					TileRunner(num617 + genRand.Next(-(int)(125f * num616), (int)(125f * num616)), num619 + genRand.Next(-(int)(125f * yStrength), (int)(125f * yStrength)), genRand.Next(3, 7), genRand.Next(3, 8), genRand.Next(65, 67));
 				}
 
 				mudWall = true;
 				progress.Set(0.3f);
 				num617 += genRand.Next((int)(-400f * num616), (int)(401f * num616));
-				num619 += genRand.Next((int)(-150f * num616), (int)(151f * num616));
+				num619 += genRand.Next((int)(-150f * yStrength), (int)(151f * yStrength));
 				int num628 = num617;
 				int num629 = num619;
 				TileRunner(num617, num619, genRand.Next((int)(250f * num616), (int)(500f * num616)), genRand.Next(50, 150), 59, addTile: false, dungeonSide * -3);
 				mudWall = false;
-				for (int num630 = 0; (float)num630 < 6f * num616; num630++) {
+				for (int num630 = 0; (float)num630 < 6f * num616/ Main.setting.JungleScale; num630++) {
-					TileRunner(num617 + genRand.Next(-(int)(125f * num616), (int)(125f * num616)), num619 + genRand.Next(-(int)(125f * num616), (int)(125f * num616)), genRand.Next(3, 7), genRand.Next(3, 8), genRand.Next(67, 69));
+					TileRunner(num617 + genRand.Next(-(int)(125f * num616), (int)(125f * num616)), num619 + genRand.Next(-(int)(125f * yStrength), (int)(125f * yStrength)), genRand.Next(3, 7), genRand.Next(3, 8), genRand.Next(67, 69));
 				}
 
 				mudWall = true;
@@ -4567,23 +_,23 @@
 
 				num617 = num625;
 				num619 = num626;
-				for (int num632 = 0; (float)num632 <= 20f * num616; num632++) {
+				for (int num632 = 0; (float)num632 <= 20f * num616 / Main.setting.JungleScale; num632++) {
 					progress.Set((60f + (float)num632 / num616) * 0.01f);
 					num617 += genRand.Next((int)(-5f * num616), (int)(6f * num616));
-					num619 += genRand.Next((int)(-5f * num616), (int)(6f * num616));
+					num619 += genRand.Next((int)(-5f * yStrength), (int)(6f * yStrength));
 					TileRunner(num617, num619, genRand.Next(40, 100), genRand.Next(300, 500), 59);
 				}
 
-				for (int num633 = 0; (float)num633 <= 10f * num616; num633++) {
+				for (int num633 = 0; (float)num633 <= 10f * num616 / Main.setting.JungleScale; num633++) {
-					progress.Set((80f + (float)num633 / num616 * 2f) * 0.01f);
+					progress.Set((80f + (float)num633 / num616 * 2f / Main.setting.JungleScale) * 0.01f);
 					num617 = num625 + genRand.Next((int)(-600f * num616), (int)(600f * num616));
-					num619 = num626 + genRand.Next((int)(-200f * num616), (int)(200f * num616));
+					num619 = num626 + genRand.Next((int)(-200f * yStrength), (int)(200f * yStrength));
 					while (num617 < 1 || num617 >= Main.maxTilesX - 1 || num619 < 1 || num619 >= Main.maxTilesY - 1 || Main.tile[num617, num619].type != 59) {
 						num617 = num625 + genRand.Next((int)(-600f * num616), (int)(600f * num616));
-						num619 = num626 + genRand.Next((int)(-200f * num616), (int)(200f * num616));
+						num619 = num626 + genRand.Next((int)(-200f * yStrength), (int)(200f * yStrength));
 					}
 
-					for (int num634 = 0; (float)num634 < 8f * num616; num634++) {
+					for (int num634 = 0; (float)num634 < 8f * num616 / Main.setting.JungleScale; num634++) {
 						num617 += genRand.Next(-30, 31);
 						num619 += genRand.Next(-30, 31);
 						int type5 = -1;
@@ -4594,12 +_,12 @@
 					}
 				}
 
-				for (int num635 = 0; (float)num635 <= 300f * num616; num635++) {
+				for (int num635 = 0; (float)num635 <= 300f * num616 / Main.setting.JungleScale; num635++) {
 					num617 = num625 + genRand.Next((int)(-600f * num616), (int)(600f * num616));
-					num619 = num626 + genRand.Next((int)(-200f * num616), (int)(200f * num616));
+					num619 = num626 + genRand.Next((int)(-200f * yStrength), (int)(200f * yStrength));
 					while (num617 < 1 || num617 >= Main.maxTilesX - 1 || num619 < 1 || num619 >= Main.maxTilesY - 1 || Main.tile[num617, num619].type != 59) {
 						num617 = num625 + genRand.Next((int)(-600f * num616), (int)(600f * num616));
-						num619 = num626 + genRand.Next((int)(-200f * num616), (int)(200f * num616));
+						num619 = num626 + genRand.Next((int)(-200f * yStrength), (int)(200f * yStrength));
 					}
 
 					TileRunner(num617, num619, genRand.Next(4, 10), genRand.Next(5, 30), 1);
@@ -4613,7 +_,7 @@
 			AddGenerationPass("Marble", delegate (GenerationProgress progress) {
 				progress.Message = Lang.gen[80].Value;
 				float num611 = (float)(Main.maxTilesX * Main.maxTilesY) / 5040000f;
-				int num612 = (int)((float)genRand.Next(10, 15) * num611);
+				int num612 = (int)((float)genRand.Next(10, 15) * num611 * Main.setting.MarbleCaveMultiplier);
 				float num613 = (float)(Main.maxTilesX - 160) / (float)num612;
 				int num614 = 0;
 				while (num614 < num612) {
@@ -4627,7 +_,7 @@
 			AddGenerationPass("Granite", delegate (GenerationProgress progress) {
 				progress.Message = Lang.gen[81].Value;
 				float num606 = (float)Main.maxTilesX / 4200f;
-				int num607 = (int)((float)genRand.Next(8, 14) * num606);
+				int num607 = (int)((float)genRand.Next(8, 14) * num606 * Main.setting.GraniteCaveMultiplier);
 				float num608 = (float)(Main.maxTilesX - 200) / (float)num607;
 				int num609 = 0;
 				while (num609 < num607) {
@@ -4645,6 +_,12 @@
 						if (Main.tile[num601, num602].active()) {
 							grassSpread = 0;
 							SpreadGrass(num601, num602, 59, 60, repeat: true, 0);
+							int GrassID = 60;
+							if (Main.setting.SwapShroomJungle)
+							{
+								GrassID = 70;
+							}
+							WorldGen.SpreadGrass(num601, num602, 59, GrassID, repeat: true, 0);
 						}
 
 						progress.Set(0.2f * ((float)(num601 * Main.maxTilesY + num602) / (float)(Main.maxTilesX * Main.maxTilesY)));
@@ -4663,6 +_,7 @@
 			});
 
 			AddGenerationPass("Full Desert", delegate (GenerationProgress progress) {
+				if (Main.setting.NoAnthill) return;
 				progress.Message = Lang.gen[78].Value;
 				int num597 = dungeonSide;
 				int num598 = Main.maxTilesX / 2;
@@ -4680,12 +_,12 @@
 					}
 				}
 			});
-
+			// TODO Floating Island
 			AddGenerationPass("Floating Islands", delegate (GenerationProgress progress) {
 				numIslandHouses = 0;
 				houseCount = 0;
 				progress.Message = Lang.gen[12].Value;
-				for (int num591 = 0; num591 < (int)((double)Main.maxTilesX * 0.0008) + skyLakes; num591++) {
+				for (int num591 = 0; num591 < (int)((double)Main.maxTilesX * 0.0008 * Main.setting.SkyIslandMultiplier) + skyLakes; num591++) {
 					int num592 = 1000;
 					int num593 = genRand.Next((int)((double)Main.maxTilesX * 0.1), (int)((double)Main.maxTilesX * 0.9));
 					while (--num592 > 0) {
@@ -4715,12 +_,13 @@
 							if (flag45) {
 								int val = genRand.Next(90, num595 - 100);
 								val = Math.Min(val, (int)worldSurfaceLow - 50);
+								if (val < 30) continue;
 								if (num591 < skyLakes) {
 									skyLake[numIslandHouses] = true;
 									CloudLake(num593, val);
 								}
 								else {
-									CloudIsland(num593, val);
+									try { WorldGen.CloudIsland(num593, val); } catch { }
 								}
 
 								fihX[numIslandHouses] = num593;
@@ -4734,12 +_,13 @@
 
 			AddGenerationPass("Mushroom Patches", delegate (GenerationProgress progress) {
 				progress.Message = Lang.gen[13].Value;
-				for (int num575 = 0; num575 < Main.maxTilesX / 500; num575++) {
+				for (int num575 = 0; num575 < Main.maxTilesX / 500 * Main.setting.MushroomBiomeMultiplier; num575++) {
 					int num576 = 0;
 					bool flag43 = true;
 					while (flag43) {
 						int num577 = genRand.Next((int)((double)Main.maxTilesX * 0.3), (int)((double)Main.maxTilesX * 0.7));
 						int num578 = genRand.Next((int)Main.rockLayer, Main.maxTilesY - 350);
+						if (Main.maxTilesY < 1000) num578 = WorldGen.genRand.Next((int)Main.rockLayer, Main.maxTilesY - 100);
 						flag43 = false;
 						int num579 = 60;
 						for (int num580 = num577 - num579; num580 < num577 + num579; num580 += 3) {
@@ -4769,7 +_,11 @@
 					for (int num583 = (int)Main.worldSurface; num583 < Main.maxTilesY; num583++) {
 						if (Main.tile[num582, num583].active()) {
 							grassSpread = 0;
+							int GrassID = 70;
+							if (Main.setting.SwapShroomJungle) {
+								GrassID = 60;
+							}
-							SpreadGrass(num582, num583, 59, 70, repeat: false, 0);
+							SpreadGrass(num582, num583, 59, GrassID, repeat: false, 0);
 							if (Main.tile[num582, num583].type == 70 && genRand.Next(20) == 0) {
 								int num584 = (genRand.Next(5) != 0) ? 1 : 2;
 								int num585 = genRand.Next(2, 6);
@@ -4827,68 +_,91 @@
 
 			AddGenerationPass("Silt", delegate (GenerationProgress progress) {
 				progress.Message = Lang.gen[15].Value;
-				for (int num572 = 0; num572 < (int)((double)(Main.maxTilesX * Main.maxTilesY) * 0.0001); num572++) {
+				for (int num572 = 0; num572 < (int)((double)(Main.maxTilesX * Main.maxTilesY) * 0.0001 * Main.setting.SiltMultiplier); num572++) {
 					TileRunner(genRand.Next(0, Main.maxTilesX), genRand.Next((int)rockLayerHigh, Main.maxTilesY), genRand.Next(5, 12), genRand.Next(15, 50), 123);
 				}
 
-				for (int num573 = 0; num573 < (int)((double)(Main.maxTilesX * Main.maxTilesY) * 0.0005); num573++) {
+				for (int num573 = 0; num573 < (int)((double)(Main.maxTilesX * Main.maxTilesY) * 0.0005 * Main.setting.SiltMultiplier); num573++) {
 					TileRunner(genRand.Next(0, Main.maxTilesX), genRand.Next((int)rockLayerHigh, Main.maxTilesY), genRand.Next(2, 5), genRand.Next(2, 5), 123);
 				}
 			});
 
 			AddGenerationPass("Shinies", delegate (GenerationProgress progress) {
 				progress.Message = Lang.gen[16].Value;
-				for (int num559 = 0; num559 < (int)((double)(Main.maxTilesX * Main.maxTilesY) * 6E-05); num559++) {
+				for (int k = 0; k < (int)((double)(Main.maxTilesX * Main.maxTilesY) * 6E-05 * Main.setting.PercCopp); k++)
+					{
+						if (Main.setting.IsCopper == 3) copper = WorldGen.genRand.NextBool() ? 7 : 166;
 					TileRunner(genRand.Next(0, Main.maxTilesX), genRand.Next((int)worldSurfaceLow, (int)worldSurfaceHigh), genRand.Next(3, 6), genRand.Next(2, 6), copper);
 				}
 
-				for (int num560 = 0; num560 < (int)((double)(Main.maxTilesX * Main.maxTilesY) * 8E-05); num560++) {
+				for (int l = 0; l < (int)((double)(Main.maxTilesX * Main.maxTilesY) * 8E-05 * Main.setting.PercCopp); l++)
+					{
+						if (Main.setting.IsCopper == 3) copper = WorldGen.genRand.NextBool() ? 7 : 166;
 					TileRunner(genRand.Next(0, Main.maxTilesX), genRand.Next((int)worldSurfaceHigh, (int)rockLayerHigh), genRand.Next(3, 7), genRand.Next(3, 7), copper);
 				}
 
-				for (int num561 = 0; num561 < (int)((double)(Main.maxTilesX * Main.maxTilesY) * 0.0002); num561++) {
+				for (int m = 0; m < (int)((double)(Main.maxTilesX * Main.maxTilesY) * 0.0002 * Main.setting.PercCopp); m++)
+					{
+						if (Main.setting.IsCopper == 3) copper = WorldGen.genRand.NextBool() ? 7 : 166;
 					TileRunner(genRand.Next(0, Main.maxTilesX), genRand.Next((int)rockLayerLow, Main.maxTilesY), genRand.Next(4, 9), genRand.Next(4, 8), copper);
 				}
 
-				for (int num562 = 0; num562 < (int)((double)(Main.maxTilesX * Main.maxTilesY) * 3E-05); num562++) {
+				for (int n = 0; n < (int)((double)(Main.maxTilesX * Main.maxTilesY) * 3E-05 * Main.setting.PercIron); n++)
+					{
+						if (Main.setting.IsIron == 3) iron = WorldGen.genRand.NextBool() ? 6 : 167;
 					TileRunner(genRand.Next(0, Main.maxTilesX), genRand.Next((int)worldSurfaceLow, (int)worldSurfaceHigh), genRand.Next(3, 7), genRand.Next(2, 5), iron);
 				}
 
-				for (int num563 = 0; num563 < (int)((double)(Main.maxTilesX * Main.maxTilesY) * 8E-05); num563++) {
+				for (int num = 0; num < (int)((double)(Main.maxTilesX * Main.maxTilesY) * 8E-05 * Main.setting.PercIron); num++)
+					{
+						if (Main.setting.IsIron == 3) iron = WorldGen.genRand.NextBool() ? 6 : 167;
 					TileRunner(genRand.Next(0, Main.maxTilesX), genRand.Next((int)worldSurfaceHigh, (int)rockLayerHigh), genRand.Next(3, 6), genRand.Next(3, 6), iron);
 				}
 
-				for (int num564 = 0; num564 < (int)((double)(Main.maxTilesX * Main.maxTilesY) * 0.0002); num564++) {
+				for (int num2 = 0; num2 < (int)((double)(Main.maxTilesX * Main.maxTilesY) * 0.0002 * Main.setting.PercIron); num2++)
+					{
+						if (Main.setting.IsIron == 3) iron = WorldGen.genRand.NextBool() ? 6 : 167;
 					TileRunner(genRand.Next(0, Main.maxTilesX), genRand.Next((int)rockLayerLow, Main.maxTilesY), genRand.Next(4, 9), genRand.Next(4, 8), iron);
 				}
 
-				for (int num565 = 0; num565 < (int)((double)(Main.maxTilesX * Main.maxTilesY) * 2.6E-05); num565++) {
+				for (int num3 = 0; num3 < (int)((double)(Main.maxTilesX * Main.maxTilesY) * 2.6E-05 * Main.setting.PercSilv); num3++)
+					{
+						if (Main.setting.IsSilver == 3) silver = WorldGen.genRand.NextBool() ? 9 : 168;
 					TileRunner(genRand.Next(0, Main.maxTilesX), genRand.Next((int)worldSurfaceHigh, (int)rockLayerHigh), genRand.Next(3, 6), genRand.Next(3, 6), silver);
 				}
 
-				for (int num566 = 0; num566 < (int)((double)(Main.maxTilesX * Main.maxTilesY) * 0.00015); num566++) {
+				for (int num4 = 0; num4 < (int)((double)(Main.maxTilesX * Main.maxTilesY) * 0.00015 * Main.setting.PercSilv); num4++)
+					{
+						if (Main.setting.IsSilver == 3) silver = WorldGen.genRand.NextBool() ? 9 : 168;
 					TileRunner(genRand.Next(0, Main.maxTilesX), genRand.Next((int)rockLayerLow, Main.maxTilesY), genRand.Next(4, 9), genRand.Next(4, 8), silver);
 				}
 
-				for (int num567 = 0; num567 < (int)((double)(Main.maxTilesX * Main.maxTilesY) * 0.00017); num567++) {
+				for (int num5 = 0; num5 < (int)((double)(Main.maxTilesX * Main.maxTilesY) * 0.00017 * Main.setting.PercSilv); num5++)
+					{
+						if (Main.setting.IsSilver == 3) silver = WorldGen.genRand.NextBool() ? 9 : 168;
 					TileRunner(genRand.Next(0, Main.maxTilesX), genRand.Next(0, (int)worldSurfaceLow), genRand.Next(4, 9), genRand.Next(4, 8), silver);
 				}
 
-				for (int num568 = 0; num568 < (int)((double)(Main.maxTilesX * Main.maxTilesY) * 0.00012); num568++) {
+				for (int num6 = 0; num6 < (int)((double)(Main.maxTilesX * Main.maxTilesY) * 0.00012 * Main.setting.PercGold); num6++)
+					{
+						if (Main.setting.IsGold == 3) gold = WorldGen.genRand.NextBool() ? 8 : 169;
 					TileRunner(genRand.Next(0, Main.maxTilesX), genRand.Next((int)rockLayerLow, Main.maxTilesY), genRand.Next(4, 8), genRand.Next(4, 8), gold);
 				}
 
-				for (int num569 = 0; num569 < (int)((double)(Main.maxTilesX * Main.maxTilesY) * 0.00012); num569++) {
+				for (int num7 = 0; num7 < (int)((double)(Main.maxTilesX * Main.maxTilesY) * 0.00012 * Main.setting.PercGold); num7++)
+					{
+						if (Main.setting.IsGold == 3) gold = WorldGen.genRand.NextBool() ? 8 : 169;
 					TileRunner(genRand.Next(0, Main.maxTilesX), genRand.Next(0, (int)worldSurfaceLow - 20), genRand.Next(4, 8), genRand.Next(4, 8), gold);
 				}
 
-				if (crimson) {
-					for (int num570 = 0; num570 < (int)((double)(Main.maxTilesX * Main.maxTilesY) * 2E-05); num570++) {
+				if ((WorldGen.crimson || Main.setting.IsCorruption == 3) && Main.setting.IsCorruption != 5)
+					{
+						for (int num8 = 0; num8 < (int)((double)(Main.maxTilesX * Main.maxTilesY) * 2E-05 * Main.setting.PercDemonite); num8++) {
 						TileRunner(genRand.Next(0, Main.maxTilesX), genRand.Next((int)rockLayerLow, Main.maxTilesY), genRand.Next(2, 4), genRand.Next(3, 6), 204);
 					}
 				}
-				else {
-					for (int num571 = 0; num571 < (int)((double)(Main.maxTilesX * Main.maxTilesY) * 2E-05); num571++) {
+				if ((!WorldGen.crimson || Main.setting.IsCorruption == 4) && Main.setting.IsCorruption != 5) {
+					for (int num9 = 0; num9 < (int)((double)(Main.maxTilesX * Main.maxTilesY) * 2E-05 * Main.setting.PercDemonite); num9++) {
 						TileRunner(genRand.Next(0, Main.maxTilesX), genRand.Next((int)rockLayerLow, Main.maxTilesY), genRand.Next(2, 4), genRand.Next(3, 6), 22);
 					}
 				}
@@ -4896,7 +_,8 @@
 
 			AddGenerationPass("Webs", delegate (GenerationProgress progress) {
 				progress.Message = Lang.gen[17].Value;
+				if (Main.setting.WebMult <= 0) return;
-				for (int num555 = 0; num555 < (int)((double)(Main.maxTilesX * Main.maxTilesY) * 0.0006); num555++) {
+				for (int num555 = 0; num555 < (int)((double)(Main.maxTilesX * Main.maxTilesY) * 0.0006 * Main.setting.WebMult); num555++) {
 					int num556 = genRand.Next(20, Main.maxTilesX - 20);
 					int num557 = genRand.Next((int)worldSurfaceHigh, Main.maxTilesY - 20);
 					if (num555 < numMCaves) {
@@ -4925,6 +_,7 @@
 			});
 
 			AddGenerationPass("Underworld", delegate (GenerationProgress progress) {
+				if (Main.setting.NoUnderworld) return;
 				progress.Message = Lang.gen[18].Value;
 				progress.Set(0f);
 				int num540 = Main.maxTilesY - genRand.Next(150, 190);
@@ -5024,22 +_,24 @@
 					}
 				}
 
-				for (int num554 = 0; num554 < (int)((double)(Main.maxTilesX * Main.maxTilesY) * 0.0008); num554++) {
+				for (int num554 = 0; num554 < (int)((double)(Main.maxTilesX * Main.maxTilesY) * 0.0008 * Main.setting.PercHellstone); num554++) {
 					TileRunner(genRand.Next(0, Main.maxTilesX), genRand.Next(Main.maxTilesY - 140, Main.maxTilesY), genRand.Next(2, 7), genRand.Next(3, 7), 58);
 				}
 
+				if (Main.setting.UnderworldHouseMult > 0)
 				AddHellHouses();
 			});
 
 			AddGenerationPass("Lakes", delegate (GenerationProgress progress) {
 				progress.Message = Lang.gen[19].Value;
-				int num536 = genRand.Next(2, (int)((double)Main.maxTilesX * 0.005));
+				int num536 = genRand.Next(2, (int)((double)Main.maxTilesX * 0.005 * Main.setting.LakeMultiplier));
 				for (int num537 = 0; num537 < num536; num537++) {
 					float value16 = (float)num537 / (float)num536;
 					progress.Set(value16);
 					int num538 = genRand.Next(300, Main.maxTilesX - 300);
 					while (num538 > Main.maxTilesX / 2 - 100 && num538 < Main.maxTilesX / 2 + 100) {
 						num538 = genRand.Next(300, Main.maxTilesX - 300);
+						if (Main.maxTilesX <= 600) num538 = genRand.Next(0, Main.maxTilesX);
 					}
 
 					int num539;
@@ -5050,7 +_,8 @@
 				}
 			});
 
-			AddGenerationPass("Dungeon", delegate {
+			AddGenerationPass("Dungeon", delegate (GenerationProgress progress) {
+				progress.Message = Lang.gen[58].Value;
 				int num535 = 0;
 				if (dungeonSide == -1) {
 					num535 = genRand.Next((int)((double)Main.maxTilesX * 0.05), (int)((double)Main.maxTilesX * 0.2));
@@ -5062,14 +_,28 @@
 				}
 
 				int y9 = (int)((Main.worldSurface + Main.rockLayer) / 2.0) + genRand.Next(-200, 200);
-				MakeDungeon(num535, y9);
+				if (!InWorldY(y9, 0)) 
+					y9 = (int)((Main.worldSurface + Main.rockLayer) / 2.0);
+				if (!Main.setting.NoDungeon) {
+					MakeDungeon(num535, y9, progress);
+				}
+				if (Main.setting.DoubleDungeon == true) {
+					if (dungeonSide == 1)
+						num535 = WorldGen.genRand.Next((int)((double)Main.maxTilesX * 0.05), (int)((double)Main.maxTilesX * 0.2));
+					else
+						num535 = WorldGen.genRand.Next((int)((double)Main.maxTilesX * 0.8), (int)((double)Main.maxTilesX * 0.95));
+					y9 = (int)((Main.worldSurface + Main.rockLayer) / 2.0) + WorldGen.genRand.Next(-200, 200);
+					if (!InWorldY(y9, 0)) 
+						y9 = (int)((Main.worldSurface + Main.rockLayer) / 2.0);
+					MakeDungeon(num535, y9, progress);
+				}
 			});
 
 			AddGenerationPass("Corruption", delegate (GenerationProgress progress) {
-				if (crimson) {
+				if ((crimson || Main.setting.IsCorruption == 3) && Main.setting.IsCorruption != 5) {
 					progress.Message = Lang.gen[72].Value;
-					for (int num487 = 0; (double)num487 < (double)Main.maxTilesX * 0.00045; num487++) {
+					for (int num487 = 0; (double)num487 < (double)Main.maxTilesX * 0.00045 * Main.setting.CrimsonMultiplier; num487++) {
-						float value14 = (float)((double)num487 / ((double)Main.maxTilesX * 0.00045));
+						float value14 = (float)((double)num487 / ((double)Main.maxTilesX * 0.00045 * Main.setting.CrimsonMultiplier));
 						progress.Set(value14);
 						bool flag38 = false;
 						int num488 = 0;
@@ -5080,20 +_,85 @@
 							flag38 = true;
 							int num492 = Main.maxTilesX / 2;
 							int num493 = 200;
+							if (dungeonSide < 0) {
+								num488 = WorldGen.genRand.Next(600, Main.maxTilesX - 320);
+								if (Main.maxTilesY < 1000) num488 = WorldGen.genRand.Next(100, Main.maxTilesX - 50);
+							} else {
+								num488 = WorldGen.genRand.Next(320, Main.maxTilesX - 600);
+								if (Main.maxTilesY < 1000) num488 = WorldGen.genRand.Next(50, Main.maxTilesX - 100);
+							}
+							// I don't like this ugly diff...
+							if (Main.setting.CrimsonCorruptionAvoidJungle)
+							{
+								if (dungeonSide == -1) // dungeon on left side, so place on left side
+								{
+									if (num488 > Main.maxTilesX / 2) {
+										flag38 = false;
+										continue;
+									}
+								} else {
+									if (num488 < Main.maxTilesX / 2)
+									{
+										flag38 = false;
+										continue;
+									}
+								}
+							}
+							if (Main.setting.CrimsonCorruptionAvoidEachOther)
+							{
+								if (crimsonSide == -1) // Crimson on left
+								{
+									if (num488 > Main.maxTilesX / 2)
+									{
+										flag38 = false;
+										continue;
+									}
+								}
+								else if (crimsonSide == 1)
+								{
+									if (num488 < Main.maxTilesX / 2)
+									{
+										flag38 = false;
+										continue;
+									}
+								}
-							num488 = ((dungeonSide >= 0) ? genRand.Next(320, Main.maxTilesX - 600) : genRand.Next(600, Main.maxTilesX - 320));
+							}
-							num489 = num488 - genRand.Next(200) - 100;
+							num489 = num488 - WorldGen.genRand.Next(200) - 100;
-							num490 = num488 + genRand.Next(200) + 100;
+							num490 = num488 + WorldGen.genRand.Next(200) + 100;
-							if (num489 < 285)
+							if (num489 < 285) {
 								num489 = 285;
-
-							if (num490 > Main.maxTilesX - 285)
+							}
+							if (num490 > Main.maxTilesX - 285) {
 								num490 = Main.maxTilesX - 285;
-
-							if (dungeonSide < 0 && num489 < 400)
+							}
+							if (dungeonSide < 0 && num489 < 400) {
 								num489 = 400;
+							}
-							else if (dungeonSide > 0 && num489 > Main.maxTilesX - 400)
+							else if (dungeonSide > 0 && num489 > Main.maxTilesX - 400) {
 								num489 = Main.maxTilesX - 400;
-
+							}
+							if (Main.maxTilesY < 1000)
+							{
+								num489 = num488 - WorldGen.genRand.Next(50) - 50;
+								num490 = num488 + WorldGen.genRand.Next(50) + 50;
+								if (num489 < 50)
+								{
+									num489 = 50;
+								}
+								if (num490 > Main.maxTilesX - 50)
+								{
+									num490 = Main.maxTilesX - 50;
+								}
+								if (dungeonSide < 0 && num489 < 50)
+								{
+									num489 = 50;
+								}
+								else if (dungeonSide > 0 && num489 > Main.maxTilesX - 50)
+								{
+									num489 = Main.maxTilesX - 50;
+								}
+								num493 = 50;
+							}
 							if (num488 > num492 - num493 && num488 < num492 + num493)
 								flag38 = false;
 
@@ -5136,7 +_,7 @@
 								if (Main.tile[num496, num497].active()) {
 									int num498 = num497 + genRand.Next(10, 14);
 									for (int num499 = num497; num499 < num498; num499++) {
-										if ((Main.tile[num496, num499].type == 59 || Main.tile[num496, num499].type == 60) && num496 >= num489 + genRand.Next(5) && num496 < num490 - genRand.Next(5))
+										if ((Main.tile[num497, num499].type == 59 || Main.tile[num497, num499].type == 60 || Main.tile[num497, num499].type == 70) && num497 >= num488 + WorldGen.genRand.Next(5) && num497 < num490 - WorldGen.genRand.Next(5))
 											Main.tile[num496, num499].type = 0;
 									}
 
@@ -5230,10 +_,11 @@
 						}
 					}
 				}
+				if ((!WorldGen.crimson || Main.setting.IsCorruption == 4) && Main.setting.IsCorruption != 5) {
-				else {
+					// Making the world evil -- corruption
-					progress.Message = Lang.gen[20].Value;
+ 					progress.Message = Lang.gen[20].Value;
-					for (int num509 = 0; (double)num509 < (double)Main.maxTilesX * 0.00045; num509++) {
+					for (int num509 = 0; (double)num509 < (double)Main.maxTilesX * 0.00045 * Main.setting.CorruptionMultiplier; num509++) {
-						float value15 = (float)((double)num509 / ((double)Main.maxTilesX * 0.00045));
+						float value15 = (float)((double)num509 / ((double)Main.maxTilesX * 0.00045 * Main.setting.CorruptionMultiplier));
 						progress.Set(value15);
 						bool flag41 = false;
 						int num510 = 0;
@@ -5247,12 +_,60 @@
 							num510 = genRand.Next(320, Main.maxTilesX - 320);
 							num511 = num510 - genRand.Next(200) - 100;
 							num512 = num510 + genRand.Next(200) + 100;
+							if (Main.maxTilesX <= 640)
+							{
+								num510 = WorldGen.genRand.Next(100, Main.maxTilesX - 100);
+								num511 = num510 - WorldGen.genRand.Next(50) - 50;
+								num512 = num510 + WorldGen.genRand.Next(50) + 50;
+								num515 = 50;
+							}
+							if (Main.setting.CrimsonCorruptionAvoidJungle)
+							{
+								if (dungeonSide == -1) // dungeon on left side, so place on left side
+								{
+									if (num510 > Main.maxTilesX / 2)
+									{
+										flag41 = false;
+										continue;
+									}
+								}
+								else
+								{
+									if (num510 < Main.maxTilesX / 2)
+									{
+										flag41 = false;
+										continue;
+									}
+								}
+							}
+							if (Main.setting.CrimsonCorruptionAvoidEachOther)
+							{
+								if (crimsonSide == -1) // Crimson on left
+								{
+									if (num510 < Main.maxTilesX / 2)
+									{
+										flag41 = false;
+										continue;
+									}
+								}
+								else if (crimsonSide == 1)
+								{
+									if (num510 > Main.maxTilesX / 2)
+									{
+										flag41 = false;
+										continue;
+									}
+								}
+							}
 							if (num511 < 285)
 								num511 = 285;
 
 							if (num512 > Main.maxTilesX - 285)
 								num512 = Main.maxTilesX - 285;
 
+							if (Main.maxTilesX < 1000)
+								num512 = Utils.Clamp(num512, 50, Main.maxTilesX - 50);
+
 							if (num510 > num514 - num515 && num510 < num514 + num515)
 								flag41 = false;
 
@@ -5370,7 +_,7 @@
 
 						for (int num527 = num511; num527 < num512; num527++) {
 							for (int num528 = 0; num528 < Main.maxTilesY - 50; num528++) {
-								if (Main.tile[num527, num528].active() && Main.tile[num527, num528].type == 31) {
+								if (Main.tile[num527, num528].active() && Main.tile[num527, num528].type == 31 && Main.tile[num527, num528].frameX < 36) {
 									int num529 = num527 - 13;
 									int num530 = num527 + 13;
 									int num531 = num528 - 13;
@@ -5409,7 +_,7 @@
 									int num484 = 3;
 									for (int num485 = num483 - num484; num485 <= num483 + num484; num485++) {
 										for (int num486 = num482 - num484; num486 <= num482 + num484; num486++) {
-											if (Main.tile[num485, num486].type == 60 || Main.tile[num485, num486].type == 70 || Main.tile[num485, num486].type == 71 || Main.tile[num485, num486].type == 72) {
+											if (InWorld(num485, num486) && (Main.tile[num485, num486].type == 60 || Main.tile[num485, num486].type == 70 || Main.tile[num485, num486].type == 71 || Main.tile[num485, num486].type == 72)) {
 												flag37 = false;
 												break;
 											}
@@ -5440,6 +_,7 @@
 			});
 
 			AddGenerationPass("Beaches", delegate (GenerationProgress progress) {
+				if (Main.setting.NoBeach) return;
 				int num462 = 0;
 				int num463 = 0;
 				int num464 = 20;
@@ -5451,9 +_,10 @@
 					if (num466 == 0) {
 						num467 = 0;
 						num468 = genRand.Next(125, 200) + 50;
+						num468 = (int)(num468 * Main.setting.BeachSizeMultiplier);
 						if (dungeonSide == 1)
 							num468 = 275;
-
+							num468 = (int)(num468 * Main.setting.BeachSizeMultiplier);
 						int num469 = 0;
 						float num470 = 1f;
 						int num471;
@@ -5522,10 +_,10 @@
 						}
 					}
 					else {
-						num467 = Main.maxTilesX - genRand.Next(125, 200) - 50;
+						num467 = Main.maxTilesX - (int)((WorldGen.genRand.Next(125, 200) - 50) * Main.setting.BeachSizeMultiplier);
 						num468 = Main.maxTilesX;
 						if (dungeonSide == -1)
-							num467 = Main.maxTilesX - 275;
+							num467 = Main.maxTilesX - (int)(275 * Main.setting.BeachSizeMultiplier);
 
 						float num475 = 1f;
 						int num476 = 0;
@@ -5604,6 +_,7 @@
 			});
 
 			AddGenerationPass("Gems", delegate (GenerationProgress progress) {
+				// TODO non-gemcave gems?
 				progress.Message = Lang.gen[23].Value;
 				for (int num449 = 63; num449 <= 68; num449++) {
 					float num450 = 0f;
@@ -5629,6 +_,7 @@
 					}
 
 					num450 *= 0.2f;
+					num450 *= Main.setting.GemMultiplier;
 					for (int num451 = 0; (float)num451 < num450; num451++) {
 						int num452 = genRand.Next(0, Main.maxTilesX);
 						int num453 = genRand.Next((int)Main.worldSurface, Main.maxTilesY);
@@ -5673,6 +_,7 @@
 			});
 
 			AddGenerationPass("Gravitating Sand", delegate (GenerationProgress progress) {
+				if (Main.setting.NoGravitate == true) return;
 				progress.Message = Lang.gen[24].Value;
 				for (int num445 = 0; num445 < Main.maxTilesX; num445++) {
 					float value13 = (float)num445 / (float)(Main.maxTilesX - 1);
@@ -5794,6 +_,50 @@
 							if (num436 >= 250) {
 								num435--;
 								Pyramid(num434, num435);
+								if (Main.setting.IsPyramid != 0)
+								{
+									WorldGen.Pyramid(num434, num435);
+								}
+							}
+						}
+					}
+				}
+
+				if (Main.setting.IsPyramid == 1 && WorldGen.numPyramids <= 0)
+				{
+					for (int k = 0; k < numPyr; k++)
+					{
+						int num = PyrX[k];
+						int num2 = PyrY[k];
+						if (num > 300 && num < Main.maxTilesX - 300 && (dungeonSide >= 0 || (double)num >= (double)WorldGen.dungeonX + (double)Main.maxTilesX * 0.15))
+						{
+							if (dungeonSide <= 0 || (double)num <= (double)WorldGen.dungeonX - (double)Main.maxTilesX * 0.15)
+							{
+								while (!Main.tile[num, num2].active() && (double)num2 < Main.worldSurface)
+								{
+									num2++;
+								}
+								if ((double)num2 < Main.worldSurface && Main.tile[num, num2].type == 53)
+								{
+									int num3 = Main.maxTilesX;
+									for (int l = 0; l < k; l++)
+									{
+										int num4 = Math.Abs(num - PyrX[l]);
+										if (num4 < num3)
+										{
+											num3 = num4;
+										}
+									}
+									if (num3 >= 250)
+									{
+										num2--;
+										if (Main.setting.IsPyramid != 0)
+										{
+											WorldGen.Pyramid(num, num2);
+											break;
+										}
+									}
+								}
 							}
 						}
 					}
@@ -5810,8 +_,13 @@
 			});
 
 			AddGenerationPass("Living Trees", delegate {
-				float num422 = Main.maxTilesX / 4200;
+				float num422 = Main.maxTilesX / 4200 * Main.setting.GiantTreeMult;
 				int num423 = genRand.Next(0, (int)(3f * num422));
+				if (Main.setting.IsGiantTree == 1)
+					{
+						// TODO, slider for Living Trees.
+						num423 = 1 + (int)(3f * num422);
+					}
 				for (int num424 = 0; num424 < num423; num424++) {
 					bool flag32 = false;
 					int num425 = 0;
@@ -5840,7 +_,7 @@
 										}
 									}
 
-									if (flag33)
+									if (flag33 && Main.setting.IsGiantTree != 0)
 										flag32 = GrowLivingTree(num426, num427);
 								}
 							}
@@ -5879,9 +_,18 @@
 						int num416 = genRand.Next(1, Main.maxTilesX - 3);
 						int num417 = (int)(worldSurfaceHigh + 20.0);
 						int style2 = crimson ? 1 : 0;
+						if (Main.setting.IsCorruption == 3 || Main.setting.IsCorruption == 4)
+						{
+							style2 = WorldGen.genRand.Next(2); // TODO Fix altars to be correct maybe?
+						}
+						if (!Main.setting.NoAltar)
+						{
-						Place3x2(num416, num417, 26, style2);
+							WorldGen.Place3x2(num416, num417, 26, style2);
-						if (Main.tile[num416, num417].type == 26)
+							if (Main.tile[num416, num417].type == 26)
-							break;
+							{
+								break;
+							}
+						}
 					}
 				}
 			});
@@ -5925,22 +_,32 @@
 			});
 
 			AddGenerationPass("Jungle Temple", delegate (GenerationProgress progress) {
+				if (Main.setting.NoJungle) return;
+				//if (Main.setting.) -- i will return to this idea -greenbiridmusic
+				//for (int tottemples = 0, tottemples < Main.setting., tottemples++ )
 				progress.Message = Lang.gen[70].Value;
 				bool flag30 = true;
 				while (flag30) {
 					int num406 = genRand.Next((int)Main.rockLayer, Main.maxTilesY - 500);
+					if (Main.maxTilesY < 1000) num406 = WorldGen.genRand.Next((int)Main.rockLayer, Main.maxTilesY - 200);
 					int num407 = (dungeonSide >= 0) ? genRand.Next((int)((double)Main.maxTilesX * 0.15), (int)((double)Main.maxTilesX * 0.4)) : genRand.Next((int)((double)Main.maxTilesX * 0.6), (int)((double)Main.maxTilesX * 0.85));
 					if (Main.tile[num407, num406].active() && Main.tile[num407, num406].type == 60) {
 						flag30 = false;
+												if (!Main.setting.NoTemple)
+						{
-						makeTemple(num407, num406);
+							makeTemple(num407, num406);
+						}
 					}
 				}
 			});
 
 			AddGenerationPass("Hives", delegate (GenerationProgress progress) {
+				if (Main.setting.NoHive || Main.setting.NoJungle) return;
+				// TODO Hives Ammount
 				progress.Message = Lang.gen[71].Value;
-				float num397 = Main.maxTilesX / 4200;
+				float num397 = Main.maxTilesX / 4200f;
 				float num398 = 1 + genRand.Next((int)(5f * num397), (int)(8f * num397));
+				num398 *= Main.setting.HiveMultiplier;
 				int num399 = 10000;
 				while (num398 > 0f && num399 > 0) {
 					num399--;
@@ -5966,8 +_,10 @@
 			AddGenerationPass("Jungle Chests", delegate {
 				int num371 = genRand.Next(40, Main.maxTilesX - 40);
 				int num372 = genRand.Next((int)(Main.worldSurface + Main.rockLayer) / 2, Main.maxTilesY - 400);
+				if (Main.maxTilesY < 1000) num372 = WorldGen.genRand.Next((int)(Main.worldSurface + Main.rockLayer) / 2, Main.maxTilesY - 100);
 				float num373 = genRand.Next(7, 12);
-				num373 *= (float)(Main.maxTilesX / 4200);
+				num373 *= ((float)Main.maxTilesX / 4200);
+				num373 *= Main.setting.JungleShrineMultiplier;
 				for (int num374 = 0; (float)num374 < num373; num374++) {
 					bool flag28 = true;
 					while (flag28) {
@@ -5994,6 +_,30 @@
 							int num378 = genRand.Next(2, 4);
 							int num379 = genRand.Next(2, 4);
 							int num380 = 0;
+							if (Main.setting.ShrineType == 6)
+								{
+									jungleHut = (ushort)WorldGen.genRand.Next(5);
+									if (jungleHut == 0)
+									{
+										jungleHut = 119;
+									}
+									else if (jungleHut == 1)
+									{
+										jungleHut = 120;
+									}
+									else if (jungleHut == 2)
+									{
+										jungleHut = 158;
+									}
+									else if (jungleHut == 3)
+									{
+										jungleHut = 175;
+									}
+									else if (jungleHut == 4)
+									{
+										jungleHut = 45;
+									}
+								}
 							if (jungleHut == 119)
 								num380 = 23;
 							else if (jungleHut == 120)
@@ -6320,8 +_,8 @@
 
 			AddGenerationPass("Traps", delegate (GenerationProgress progress) {
 				progress.Message = Lang.gen[34].Value;
-				for (int num344 = 0; num344 < (int)((double)Main.maxTilesX * 0.05); num344++) {
+				for (int num344 = 0; num344 < (int)((double)Main.maxTilesX * 0.05 * Main.setting.TrapMultiplier); num344++) {
-					float value11 = (float)((double)num344 / ((double)Main.maxTilesX * 0.05));
+					float value11 = (float)((double)num344 / ((double)Main.maxTilesX * 0.05 * Main.setting.TrapMultiplier));
 					progress.Set(value11);
 					for (int num345 = 0; num345 < 1150; num345++) {
 						int num346 = genRand.Next(200, Main.maxTilesX - 200);
@@ -6330,13 +_,74 @@
 							break;
 					}
 				}
+				progress.Message = "Placing more traps: Dart";
+					for (int k = 0; k < (int)((double)Main.maxTilesX * 0.05 * Main.setting.AdditionalDartTrapMultiplier); k++)
+					{
+						float value = (float)((double)k / ((double)Main.maxTilesX * 0.05 * Main.setting.AdditionalDartTrapMultiplier));
+						progress.Set(value);
+						for (int l = 0; l < 1000; l++)
+						{
+							int num = WorldGen.genRand.Next(200, Main.maxTilesX - 200);
+							int num2 = WorldGen.genRand.Next((int)Main.worldSurface, Main.maxTilesY - 300);
+							if (Main.tile[num, num2].wall == 0 && WorldGen.placeTrap(num, num2, 0))
+							{
+								break;
+							}
+						}
+					}
+					progress.Message = "Placing more traps: Boulder";
+					for (int k = 0; k < (int)((double)Main.maxTilesX * 0.05 * Main.setting.AdditionalBoulderTrapMultiplier); k++)
+					{
+						float value = (float)((double)k / ((double)Main.maxTilesX * 0.05 * Main.setting.AdditionalBoulderTrapMultiplier));
+						progress.Set(value);
+						for (int l = 0; l < 1000; l++)
+						{
+							int num = WorldGen.genRand.Next(200, Main.maxTilesX - 200);
+							int num2 = WorldGen.genRand.Next((int)Main.worldSurface, Main.maxTilesY - 300);
+							if (Main.tile[num, num2].wall == 0 && WorldGen.placeTrap(num, num2, 1))
+							{
+								break;
+							}
+						}
+					}
+					progress.Message = "Placing more traps: Explosive";
+					for (int k = 0; k < (int)((double)Main.maxTilesX * 0.05 * Main.setting.AdditionalExplosiveTrapMultiplier); k++)
+					{
+						float value = (float)((double)k / ((double)Main.maxTilesX * 0.05 * Main.setting.AdditionalExplosiveTrapMultiplier));
+						progress.Set(value);
+						for (int l = 0; l < 10000; l++)
+						{
+							int num = WorldGen.genRand.Next(200, Main.maxTilesX - 200);
+							int num2 = WorldGen.genRand.Next((int)Main.worldSurface, Main.maxTilesY - 300);
+							if (Main.tile[num, num2].wall == 0 && WorldGen.placeTrap(num, num2, 2))
+							{
+								break;
+							}
+						}
+					}
+					progress.Message = "Placing more traps: Geyser";
+					for (int k = 0; k < (int)((double)Main.maxTilesX * 0.05 * Main.setting.AdditionalGeyserTrapMultiplier); k++)
+					{
+						float value = (float)((double)k / ((double)Main.maxTilesX * 0.05 * Main.setting.AdditionalGeyserTrapMultiplier));
+						progress.Set(value);
+						for (int l = 0; l < 10000; l++)
+						{
+							int num = WorldGen.genRand.Next(200, Main.maxTilesX - 200);
+							int num2 = WorldGen.genRand.Next(WorldGen.lavaLine + 30, Main.maxTilesY - 300);
+							if (Main.tile[num, num2].wall == 0 && WorldGen.placeTrap(num, num2, 3))
+							{
+								break;
+							}
+						}
+					}
+					Tile.WireTypeOverride = -1;
 			});
 
 			AddGenerationPass("Life Crystals", delegate (GenerationProgress progress) {
 				dub2 = Main.maxTilesX / 4200;
 				progress.Message = Lang.gen[28].Value;
-				for (int num342 = 0; num342 < (int)((double)(Main.maxTilesX * Main.maxTilesY) * 2E-05); num342++) {
+				for (int num342 = 0; num342 < (int)((double)(Main.maxTilesX * Main.maxTilesY) * 2E-05 * Main.setting.CrystalHeartMultiplier); num342++) {
-					float value10 = (float)((double)num342 / ((double)(Main.maxTilesX * Main.maxTilesY) * 2E-05));
+					float value10 = (float)((double)num342 / ((double)(Main.maxTilesX * Main.maxTilesY) * 2E-05 * Main.setting.CrystalHeartMultiplier));
 					progress.Set(value10);
 					bool flag25 = false;
 					int num343 = 0;
@@ -6358,7 +_,7 @@
 			AddGenerationPass("Statues", delegate (GenerationProgress progress) {
 				progress.Message = Lang.gen[29].Value;
 				int num336 = 0;
-				int num337 = (int)((float)(statueList.Length * 2) * dub2);
+				int num337 = (int)((float)(statueList.Length * 2) * dub2 * Main.setting.StatueMultiplier);
 				for (int num338 = 0; num338 < num337; num338++) {
 					if (num336 >= statueList.Length)
 						num336 = 0;
@@ -6398,12 +_,14 @@
 				Main.tileSolid[226] = true;
 				Main.tileSolid[162] = true;
 				Main.tileSolid[225] = true;
+				// Remove shadow chests from here
-				for (int num327 = 0; num327 < (int)((double)(Main.maxTilesX * Main.maxTilesY) * 1.6E-05); num327++) {
+				for (int num327 = 0; num327 < (int)((double)(Main.maxTilesX * Main.maxTilesY) * 1.6E-05 * Main.setting.UndergroundCabinMultiplier); num327++) {
-					float value8 = (float)((double)num327 / ((double)(Main.maxTilesX * Main.maxTilesY) * 1.6E-05));
+					float value8 = (float)((double)num327 / ((double)(Main.maxTilesX * Main.maxTilesY) * 1.6E-05 * Main.setting.UndergroundCabinMultiplier));
 					progress.Set(value8);
 					bool flag23 = false;
 					int num328 = 0;
 					while (!flag23) {
+						// number of shadow chests
 						float num329 = genRand.Next((int)(5f * dub2), (int)(8f * dub2 + 1f));
 						int num330 = genRand.Next(20, Main.maxTilesX - 20);
 						int num331 = genRand.Next((int)(worldSurfaceHigh + 20.0), Main.maxTilesY - 230);
@@ -6429,7 +_,7 @@
 								}
 							}
 						}
-						else if (AddBuriedChest(num330, num331)) {
+						else /* if (AddBuriedChest(num330, num331)) */ {
 							flag23 = true;
 						}
 
@@ -6439,7 +_,33 @@
 					}
 				}
 
+				// Shadow only
+					float numberShadowChests = (float)WorldGen.genRand.Next((int)(5f * dub2 * Main.setting.ShadowChestMultiplier), (int)(8f * dub2 * Main.setting.ShadowChestMultiplier + 1f)); // number of shadow chests
+					for (int k = 0; k < numberShadowChests; k++)
+					{
+						bool flag2 = false;
+						int num = 0;
+						while (!flag2)
+						{
+							int num3 = WorldGen.genRand.Next(20, Main.maxTilesX - 20);
+							int num4 = WorldGen.genRand.Next(Main.maxTilesY - 200, Main.maxTilesY - 50);
+							while (Main.wallDungeon[(int)Main.tile[num3, num4].wall])
+							{
+								num3 = WorldGen.genRand.Next(1, Main.maxTilesX);
+								num4 = WorldGen.genRand.Next(Main.maxTilesY - 200, Main.maxTilesY - 50);
+							}
+							if (WorldGen.AddBuriedChest(num3, num4, 0, false, -1))
+							{
+								flag2 = true;
+							}
+							num++;
+							if (num >= 1000)
+							{
+								flag2 = true;
+							}
+						}
+					}
-				int num334 = (int)(2f * (float)(Main.maxTilesX * Main.maxTilesY) / 5040000f);
+					int num334 = (int)(Main.setting.UndergroundCabinMultiplier * 2f * (float)(Main.maxTilesX * Main.maxTilesY) / 5040000f);
 				int num335 = 1000;
 				while (num335 >= 0 && num334 >= 0) {
 					if (Biomes<CaveHouseBiome>.Place(RandomRectanglePoint(UndergroundDesertLocation), structures))
@@ -6455,8 +_,8 @@
 
 			AddGenerationPass("Surface Chests", delegate (GenerationProgress progress) {
 				progress.Message = Lang.gen[31].Value;
-				for (int num323 = 0; num323 < (int)((double)Main.maxTilesX * 0.005); num323++) {
+				for (int num323 = 0; num323 < (int)((double)Main.maxTilesX * 0.005 * Main.setting.SurfaceChestMultiplier); num323++) {
-					float value7 = (float)((double)num323 / ((double)Main.maxTilesX * 0.005));
+					float value7 = (float)((double)num323 / ((double)Main.maxTilesX * 0.005 * Main.setting.SurfaceChestMultiplier));
 					progress.Set(value7);
 					bool flag21 = false;
 					int num324 = 0;
@@ -6507,10 +_,11 @@
 			});
 
 			AddGenerationPass("Water Chests", delegate (GenerationProgress progress) {
+				if (Main.setting.NoChest) return;
 				progress.Message = Lang.gen[33].Value;
 				int num311 = 0;
-				for (int num312 = 0; (float)num312 < 9f * dub2; num312++) {
+				for (int num312 = 0; (float)num312 < 9f * dub2 * Main.setting.WaterChestMultiplier; num312++) {
-					float value5 = (float)num312 / (9f * dub2);
+					float value5 = (float)num312 / (9f * dub2 * Main.setting.WaterChestMultiplier);
 					progress.Set(value5);
 					int num313 = 0;
 					num311++;
@@ -6561,8 +_,8 @@
 			AddGenerationPass("Spider Caves", delegate (GenerationProgress progress) {
 				progress.Message = Lang.gen[64].Value;
 				maxTileCount = 3500;
-				for (int num308 = 0; num308 < (int)((double)Main.maxTilesX * 0.005); num308++) {
+				for (int num308 = 0; num308 < (int)((double)Main.maxTilesX * 0.005 * Main.setting.SpiderCaveMultiplier); num308++) {
-					float value4 = (float)((double)num308 / ((double)Main.maxTilesX * 0.005));
+					float value4 = (float)((double)num308 / ((double)Main.maxTilesX * 0.005 * Main.setting.SpiderCaveMultiplier));
 					progress.Set(value4);
 					int num309 = 0;
 					int x9 = genRand.Next(200, Main.maxTilesX - 200);
@@ -6584,15 +_,17 @@
 
 			AddGenerationPass("Gem Caves", delegate (GenerationProgress progress) {
 				progress.Message = Lang.gen[64].Value;
-				maxTileCount = 300;
-				for (int num305 = 0; num305 < (int)((double)Main.maxTilesX * 0.003); num305++) {
-					float value3 = (float)((double)num305 / ((double)Main.maxTilesX * 0.003));
+				maxTileCount = (int)(300 * Main.setting.GemCaveSizeMultiplier);
+				WorldGen.countX = new int[WorldGen.maxTileCount];
+				WorldGen.countY = new int[WorldGen.maxTileCount];
+				for (int num305 = 0; num305 < (int)((double)Main.maxTilesX * 0.003 * Main.setting.GemCaveMultiplier); num305++) {
+					float value3 = (float)((double)num305 / ((double)Main.maxTilesX * 0.003 * Main.setting.GemCaveMultiplier));
 					progress.Set(value3);
 					int num306 = 0;
 					int x8 = genRand.Next(200, Main.maxTilesX - 200);
 					int y4 = genRand.Next((int)Main.rockLayer + 30, Main.maxTilesY - 230);
 					int num307 = countTiles(x8, y4);
-					while ((num307 >= 300 || num307 < 50 || lavaCount > 0 || iceCount > 0 || rockCount == 0) && num306 < 1000) {
+					while ((num307 >= (int)(300 * Main.setting.GemCaveSizeMultiplier) || num307 < 50 || lavaCount > 0 || iceCount > 0 || rockCount == 0) && num306 < 1000) {
 						num306++;
 						x8 = genRand.Next(200, Main.maxTilesX - 200);
 						y4 = genRand.Next((int)Main.rockLayer + 30, Main.maxTilesY - 230);
@@ -6602,6 +_,8 @@
 					if (num306 < 1000)
 						gemCave(x8, y4);
 				}
+				WorldGen.countX = new int[3500];
+				WorldGen.countY = new int[3500];
 			});
 
 			AddGenerationPass("Moss", delegate (GenerationProgress progress) {
@@ -6792,7 +_,7 @@
 			AddGenerationPass("Jungle Trees", delegate {
 				for (int num272 = 0; num272 < Main.maxTilesX; num272++) {
 					for (int num273 = (int)Main.worldSurface - 1; num273 < Main.maxTilesY - 350; num273++) {
-						if (genRand.Next(10) == 0)
+						if (genRand.Next(10) == 0 && !Main.setting.NoTree)
 							GrowUndergroundTree(num272, num273);
 					}
 				}
@@ -6834,8 +_,8 @@
 				Main.tileSolid[137] = true;
 				Main.tileSolid[130] = true;
 				progress.Message = Lang.gen[35].Value;
-				for (int num262 = 0; num262 < (int)((double)(Main.maxTilesX * Main.maxTilesY) * 0.0008); num262++) {
+				for (int num262 = 0; num262 < (int)((double)(Main.maxTilesX * Main.maxTilesY) * 0.0008 * Main.setting.PotsMultiplier); num262++) {
-					float num263 = (float)((double)num262 / ((double)(Main.maxTilesX * Main.maxTilesY) * 0.0008));
+					float num263 = (float)((double)num262 / ((double)(Main.maxTilesX * Main.maxTilesY) * 0.0008 * Main.setting.PotsMultiplier));
 					progress.Set(num263);
 					bool flag18 = false;
 					int num264 = 0;
@@ -6903,6 +_,7 @@
 			});
 
 			AddGenerationPass("Hellforge", delegate (GenerationProgress progress) {
+				if (Main.setting.NoUnderworld) return;
 				progress.Message = Lang.gen[36].Value;
 				for (int num258 = 0; num258 < Main.maxTilesX / 200; num258++) {
 					float value = num258 / (Main.maxTilesX / 200);
@@ -7427,6 +_,7 @@
 				}
 			});
 
+			// TODO Spawn Choices?
 			AddGenerationPass("Spawn Point", delegate {
 				int num190 = 5;
 				bool flag7 = true;
@@ -7567,13 +_,16 @@
 					int num167 = genRand.Next(50, Main.maxTilesX - 50);
 					int num168 = genRand.Next(25, 50);
 					for (int num169 = num167 - num168; num169 < num167 + num168; num169++) {
-						for (int num170 = 20; (double)num170 < Main.worldSurface; num170++) {
+						for (int num170 = 20; (double)num170 < Main.worldSurface && !Main.setting.NoTree; num170++) {
 							GrowEpicTree(num169, num170);
 						}
 					}
 				}
 
-				AddTrees();
+				if (!Main.setting.NoTree)
+					{
+						WorldGen.AddTrees();
+					}
 			});
 
 			AddGenerationPass("Herbs", delegate (GenerationProgress progress) {
@@ -8111,7 +_,6 @@
 							int num31 = 0;
 							int num32 = num21;
 							num31 += num30 / 2;
-							num31 = (crimson ? 1 : 0);
 							num30 %= 2;
 							num32 -= num30;
 							int num33 = Main.tile[num21, num22].frameY / 18;
@@ -8347,19 +_,23 @@
 				progress.Message = Lang.gen[76].Value + "..Thin Ice";
 				float num = (float)(Main.maxTilesX * Main.maxTilesY) / 5040000f;
 				float num2 = (float)Main.maxTilesX / 4200f;
-				int num3 = (int)((float)genRand.Next(3, 6) * num);
+				int num3 = (int)((float)genRand.Next(3, 6) * num * Main.setting.ThinIceBiomeMultiplier);
 				int num4 = 0;
+				if (!Main.setting.NoSnow) {
-				while (num4 < num3) {
+					while (num4 < num3) {
-					if (Biomes<ThinIceBiome>.Place(RandomWorldPoint((int)Main.worldSurface + 20, 50, 200, 50), structures))
+						if (Biomes<ThinIceBiome>.Place(RandomWorldPoint((int)Main.worldSurface + 20, 50, 200, 50), structures))
-						num4++;
+							num4++;
+					}
 				}
 
 				progress.Set(0.1f);
 				progress.Message = Lang.gen[76] + "..Enchanted Swords";
-				int num5 = (int)Math.Ceiling(num);
+				int num5 = (int)Math.Ceiling(num * Main.setting.EnchantedSwordBiomeMultiplier);
 				int num6 = 0;
 				Point origin = default(Point);
-				while (num6 < num5) {
+				int attempts = 0;
+				while (num6 < num5 && attempts < 10000) {
+					attempts++;
 					origin.Y = (int)worldSurface + genRand.Next(50, 100);
 					if (genRand.Next(2) == 0)
 						origin.X = genRand.Next(50, (int)((float)Main.maxTilesX * 0.3f));
@@ -8372,7 +_,7 @@
 
 				progress.Set(0.2f);
 				progress.Message = Lang.gen[76] + "..Campsites";
-				int num7 = (int)((float)genRand.Next(6, 12) * num);
+				int num7 = (int)((float)genRand.Next(6, 12) * num * Main.setting.CampsiteBiomeMultiplier);
 				int num8 = 0;
 				while (num8 < num7) {
 					if (Biomes<CampsiteBiome>.Place(RandomWorldPoint((int)Main.worldSurface, 50, 200, 50), structures))
@@ -8381,7 +_,7 @@
 
 				progress.Message = Lang.gen[76] + "..Mining Explosives";
 				progress.Set(0.25f);
-				int num9 = (int)((float)genRand.Next(14, 30) * num);
+				int num9 = (int)((float)genRand.Next(14, 30) * num * Main.setting.MiningExplosiveMultiplier);
 				int num10 = 0;
 				while (num10 < num9) {
 					if (Biomes<MiningExplosivesBiome>.Place(RandomWorldPoint((int)rockLayer, 50, 200, 50), structures))
@@ -8390,10 +_,10 @@
 
 				progress.Message = Lang.gen[76] + "..Mahogany Trees";
 				progress.Set(0.3f);
-				int num11 = (int)((float)genRand.Next(6, 12) * num2);
+				int num11 = (int)((float)genRand.Next(6, 12) * num2 * Main.setting.MahoganyTreeMultiplier);
 				int num12 = 0;
 				int num13 = 0;
-				while (num12 < num11 && num13 < 20000) {
+				while (num12 < num11 && num13 < 20000 * Main.setting.MahoganyTreeMultiplier) {
 					if (Biomes<MahoganyTreeBiome>.Place(RandomWorldPoint((int)Main.worldSurface + 50, 50, 500, 50), structures))
 						num12++;
 
@@ -8402,22 +_,23 @@
 
 				progress.Message = Lang.gen[76] + "..Corruption Pits";
 				progress.Set(0.4f);
-				if (!crimson) {
+				if ((!WorldGen.crimson || Main.setting.IsCorruption == 4) && Main.setting.IsCorruption != 5 && ((int)Math.Ceiling(Main.maxTilesX * 0.00045 * Main.setting.CorruptionMultiplier) > 0)) {
 					int num14 = (int)((float)genRand.Next(1, 3) * num);
 					int num15 = 0;
 					while (num15 < num14) {
-						if (Biomes<CorruptionPitBiome>.Place(RandomWorldPoint((int)Main.worldSurface, 50, 500, 50), structures))
+						if (Biomes<CorruptionPitBiome>.Place(WorldGen.RandomWorldPoint((int)Main.worldSurface, Main.setting.CrimsonCorruptionAvoidJungle && dungeonSide == -1 ? Main.maxTilesX / 2 : 50, 500, Main.setting.CrimsonCorruptionAvoidJungle && dungeonSide == 1 ? Main.maxTilesX / 2 : 50), structures))
 							num15++;
 					}
 				}
 
 				progress.Message = Lang.gen[76] + "..Minecart Tracks";
 				progress.Set(0.5f);
-				TrackGenerator.Run((int)(10f * num), (int)(num * 25f) + 250);
+				int minTrackLength = Math.Min((int)(num * 25f) + 250, 350);
+				TrackGenerator.Run(progress, (int)(10f * num * Main.setting.MineCartMultiplier), minTrackLength);
 				progress.Set(1f);
 			});
 
-			AddGenerationPass("Final Cleanup", delegate {
+			AddGenerationPass("Final Cleanup", delegate (GenerationProgress progress) {
 				for (int l = 0; l < Main.maxTilesX; l++) {
 					for (int m = 0; m < Main.maxTilesY; m++) {
 						if (Main.tile[l, m].active() && (!SolidTile(l, m + 1) || !SolidTile(l, m + 2))) {
@@ -8441,7 +_,24 @@
 						}
 					}
 				}
-
+				progress.Message = "Meteor Shower...";
+				for (int predropMeteors = 0; predropMeteors < Main.setting.PreDropMeteor; predropMeteors++)
+				{
+					WorldGen.dropMeteor();
+				}
+				if (Main.hardMode && Main.setting.HardmodeStripes)
+				{
+					progress.Message = "Generating hardmode stripes...";
+					smCallBack(null);
+				}
+				progress.Message = "Generating hardmode ores...";
+				int preSmash = 0;
+				while ((float)preSmash < Main.setting.PreSmashAltar * 50f)
+				{
+					WorldGen.SmashAltar();
+					preSmash++;
+				}
+				WorldGen.altarCount = 0;
 				noTileActions = false;
 				gen = false;
 				Main.AnglerQuestSwap();
@@ -8533,6 +_,8 @@
 					bool flag = false;
 					bool flag2 = false;
 					int num2 = genRand.Next(20, 30);
+					if (Main.setting.TreeLowerBound != 5)
+						num2 = WorldGen.genRand.Next(Main.setting.TreeLowerBound, Main.setting.TreeUpperBound + 1);
 					int num3;
 					for (int k = j - num2; k < j; k++) {
 						Main.tile[i, k].frameNumber((byte)genRand.Next(3));
@@ -8912,11 +_,12 @@
 		}
 
 		public static bool Pyramid(int i, int j) {
+			WorldGen.numPyramids++;
 			ushort num = 151;
 			int num2 = j - genRand.Next(0, 7);
 			int num3 = genRand.Next(9, 13);
 			int num4 = 1;
-			int num5 = j + genRand.Next(75, 125);
+			int num5 = j + genRand.Next(75, 125); // TODO * Main.setting.PyramidSizeMultiplier;
 			for (int k = num2; k < num5; k++) {
 				for (int l = i - num4; l < i + num4 - 1; l++) {
 					Main.tile[l, k].type = num;
@@ -9805,15 +_,16 @@
 				return false;
 
 			if (Main.tile[i, j].nactive() && !Main.tile[i, j].halfBrick() && Main.tile[i, j].slope() == 0 && (Main.tile[i, j].type == 2 || Main.tile[i, j].type == 23 || Main.tile[i, j].type == 60 || Main.tile[i, j].type == 109 || Main.tile[i, j].type == 147 || Main.tile[i, j].type == 199 || Main.tile[i, j].type == 70 || TileLoader.CanGrowModTree(Main.tile[i, j].type)) && (Main.tile[i, j - 1].wall == 0 || Main.tile[i, j - 1].wall == 106 || Main.tile[i, j - 1].wall == 107 || Main.tile[i, j - 1].wall >= 138 && Main.tile[i, j - 1].wall <= 141 || Main.tile[i, j - 1].wall == 145 || Main.tile[i, j - 1].wall == 150 || Main.tile[i, j - 1].wall == 152) && (Main.tile[i - 1, j].active() && (Main.tile[i - 1, j].type == 2 || Main.tile[i - 1, j].type == 23 || Main.tile[i - 1, j].type == 60 || Main.tile[i - 1, j].type == 109 || Main.tile[i - 1, j].type == 147 || Main.tile[i - 1, j].type == 199 || Main.tile[i - 1, j].type == 70 || TileLoader.CanGrowModTree(Main.tile[i - 1, j].type)) || Main.tile[i + 1, j].active() && (Main.tile[i + 1, j].type == 2 || Main.tile[i + 1, j].type == 23 || Main.tile[i + 1, j].type == 60 || Main.tile[i + 1, j].type == 109 || Main.tile[i + 1, j].type == 147 || Main.tile[i + 1, j].type == 199 || Main.tile[i + 1, j].type == 70 || TileLoader.CanGrowModTree(Main.tile[i + 1, j].type)))) {
+				// desert? near spawn? near ocean, near dungeon
 				int num = 2;
-				int num2 = 16;
+				int num2 = Main.setting.TreeUpperBound; // 16;
 				if (Main.tile[i, j].type == 60)
 					num2 += 5;
 
 				if (EmptyTileCheck(i - num, i + num, j - num2, j - 1, 20)) {
 					bool flag = false;
 					bool flag2 = false;
-					int num3 = genRand.Next(5, num2 + 1);
+					int num3 = genRand.Next(Main.setting.TreeLowerBound, num2 + 1);
 					int num4;
 					for (int k = j - num3; k < j; k++) {
 						Main.tile[i, k].frameNumber((byte)genRand.Next(3));
@@ -10810,7 +_,7 @@
 			else if (Main.netMode == 2)
 				NetMessage.BroadcastChatMessage(NetworkText.FromKey(Lang.misc[15].Key), new Color(50, 255, 130));
 
-			AchievementsHelper.NotifyProgressionEvent(9);
+			// AchievementsHelper.NotifyProgressionEvent(9);
 			}));
 
 			WorldHooks.ModifyHardmodeTasks(hardmodetasks);
@@ -10995,7 +_,7 @@
 			return false;
 		}
 
-		public static void AddShadowOrb(int x, int y) {
+		public static void AddShadowOrb(int x, int y, bool shadowOrb) {
 			if (x < 10 || x > Main.maxTilesX - 10 || y < 10 || y > Main.maxTilesY - 10)
 				return;
 
@@ -11007,7 +_,7 @@
 			}
 
 			short num = 0;
-			if (crimson)
+			if (!shadowOrb)
 				num = (short)(num + 36);
 
 			Main.tile[x - 1, y - 1].active(active: true);
@@ -11046,13 +_,12 @@
 						wallType = 14;
 
 					HellFort(i, num2, num3, wallType);
-					i += genRand.Next(30, 130);
+					i += (int)(genRand.Next(30, 130) / Main.setting.UnderworldHouseMult);
 					if (genRand.Next(10) == 0)
-						i += genRand.Next(0, 200);
+						i += (int)(WorldGen.genRand.Next(0, 200) / Main.setting.UnderworldHouseMult);
 				}
 			}
-
-			float num4 = Main.maxTilesX / 4200;
+			float num4 = ((float)Main.maxTilesX / 4200);
 			for (int j = 0; (float)j < 200f * num4; j++) {
 				int num5 = 0;
 				bool flag = false;
@@ -12043,8 +_,9 @@
 		}
 
 		public static void makeTemple(int x, int y) {
-			Rectangle[] array = new Rectangle[40];
+			Rectangle[] array = new Rectangle[400]; // 40 to 400
-			float num = Main.maxTilesX / 4200;
+			float num = Main.maxTilesX / 4200f;
+			num *= Main.setting.TempleSizeMultiplier;
 			int num2 = genRand.Next((int)(num * 10f), (int)(num * 16f));
 			int num3 = 1;
 			if (genRand.Next(2) == 0)
@@ -12559,6 +_,7 @@
 
 			float num94 = (float)num2 * 1.1f;
 			num94 *= 1f + (float)genRand.Next(-25, 26) * 0.01f;
+			num94 *= Main.setting.TempleTrapMultiplier;
 			int num95 = 0;
 			while (num94 > 0f) {
 				num95++;
@@ -12712,7 +_,7 @@
 			}
 
 			Main.tileSolid[232] = false;
-			float num7 = (float)num2 * 0.35f;
+			float num7 = (float)num2 * 0.35f * Main.setting.TempleChestMultiplier;
 			num7 *= 1f + (float)genRand.Next(-15, 16) * 0.01f;
 			int contain = 1293;
 			num4 = 0;
@@ -12832,12 +_,17 @@
 			return false;
 		}
 
-		public static void MakeDungeon(int x, int y) {
-			int num = genRand.Next(3);
+		public static void MakeDungeon(int x, int y) { } // Empty method for IL compatibility
+		public static void MakeDungeon(int x, int y, GenerationProgress progress) {
+			Main.setting.DungeonStyle = Main.setting.SelectDungeon;
+			if (Main.setting.DungeonStyle == 3)
+			{
+				Main.setting.DungeonStyle = WorldGen.genRand.Next(3);
+			}
 			genRand.Next(3);
 			ushort num2;
 			int num3;
-			switch (num) {
+			switch (Main.setting.DungeonStyle) {
 				case 0:
 					num2 = 41;
 					num3 = 7;
@@ -12865,7 +_,7 @@
 			dyStrength1 = genRand.Next(20, 25);
 			dxStrength2 = genRand.Next(35, 50);
 			dyStrength2 = genRand.Next(10, 15);
-			float num4 = Main.maxTilesX / 60;
+			float num4 = (float)(Main.setting.DungeonSizeMultiplier * Main.maxTilesX / 60);
 			num4 += (float)genRand.Next(0, (int)(num4 / 3f));
 			float num5 = num4;
 			int num6 = 5;
@@ -12882,6 +_,7 @@
 
 				num4 -= 1f;
 				Main.statusText = Lang.gen[58].Value + " " + (int)((num5 - num4) / num5 * 60f) + "%";
+				progress.Message = Main.statusText;
 				if (num6 > 0)
 					num6--;
 
@@ -13256,7 +_,7 @@
 							if ((double)num56 > Main.worldSurface) {
 								float num57 = Math.Abs(num53 - num55);
 								float num58 = Math.Abs(num54 - num56);
-								if (Math.Sqrt(num57 * num57 + num58 * num58) < (double)num52 * 0.4 && Main.wallDungeon[Main.tile[num55, num56].wall])
+								if (Math.Sqrt(num57 * num57 + num58 * num58) < (double)num52 * 0.4 &&  num53 < Main.maxTilesX && Main.wallDungeon[Main.tile[num55, num56].wall])
 									Spread.WallDungeon(num55, num56, array[num51]);
 							}
 						}
@@ -13359,7 +_,12 @@
 				}
 			}
 
+			int numChests = 4;
+			if (Main.setting.IsCorruption == 3 || Main.setting.IsCorruption == 4)
+				numChests++;
+			for (int round = 0; round < Main.setting.BiomeChestSets; round++)
+			{
-			for (int num77 = 0; num77 < 4; num77++) {
+			for (int num77 = 0; num77 < numChests; num77++) {
 				bool flag5 = false;
 				while (!flag5) {
 					int num78 = genRand.Next(dMinX, dMaxX);
@@ -13392,11 +_,25 @@
 							style2 = 27;
 							contain = 1572;
 							break;
+						case 4:
+							if (WorldGen.crimson)
+							{
+								style2 = 24;
+								contain = 1571;
+							}
+							else
+							{
+								style2 = 25;
+								contain = 1569;
+							}
+							break;
+
 					}
 
 					flag5 = AddBuriedChest(num78, num79, contain, notNearOtherChests: false, style2);
 				}
 			}
+			}
 
 			int[] array2 = new int[3] {
 				genRand.Next(9, 13),
@@ -13623,6 +_,7 @@
 					failCount = 0;
 				}
 			}
+			Tile.WireTypeOverride = -1;
 		}
 
 		private static void MakeDungeon_Lights(ushort tileType, ref int failCount, int failMax, ref int numAdd, int[] roomWall) {
@@ -14807,7 +_,7 @@
 					int num5 = num4;
 					bool flag9 = false;
 					for (int num6 = j; num6 > j - num5; num6--) {
-						if (Main.tile[i, num6].wall == wallType) {
+						if (InWorld(i, num6) && Main.tile[i, num6].wall == wallType) {
 							if (flag9) {
 								flag5 = false;
 								break;
@@ -15920,10 +_,12 @@
 								int num7 = genRand.Next(2);
 								int stack3 = genRand.Next(26) + 25;
 								if (num7 == 0)
+									if (Main.setting.IsCopper == 3) WorldGen.copperBar = WorldGen.genRand.NextBool() ? 20 : 703;
-									Main.chest[num2].item[num4].SetDefaults(40);
+									Main.chest[num2].item[num4].SetDefaults(copperBar, false);
 
 								if (num7 == 1)
+									if (Main.setting.IsIron == 3) WorldGen.ironBar = WorldGen.genRand.NextBool() ? 22 : 704;
-									Main.chest[num2].item[num4].SetDefaults(42);
+									Main.chest[num2].item[num4].SetDefaults(ironBar, false);
 
 								Main.chest[num2].item[num4].stack = stack3;
 								num4++;
@@ -16262,10 +_,12 @@
 								int num18 = genRand.Next(2);
 								int stack15 = genRand.Next(26) + 25;
 								if (num18 == 0)
+									if (Main.setting.IsGold == 3) WorldGen.goldBar = WorldGen.genRand.NextBool() ? 19 : 706;
-									Main.chest[num2].item[num4].SetDefaults(41);
+									Main.chest[num2].item[num4].SetDefaults(goldBar, false);
 
 								if (num18 == 1)
+									if (Main.setting.IsSilver == 3) WorldGen.silverBar = WorldGen.genRand.NextBool() ? 21 : 705;
-									Main.chest[num2].item[num4].SetDefaults(279);
+									Main.chest[num2].item[num4].SetDefaults(silverBar, false);
 
 								Main.chest[num2].item[num4].stack = stack15;
 								num4++;
@@ -16406,8 +_,10 @@
 								if (num24 == 0)
 									Main.chest[num2].item[num4].SetDefaults(117);
 
-								if (num24 == 1)
+								if (num24 == 1) {
+									if (Main.setting.IsGold == 3) WorldGen.goldBar = WorldGen.genRand.NextBool() ? 19 : 706;
 									Main.chest[num2].item[num4].SetDefaults(goldBar);
+								}
 
 								Main.chest[num2].item[num4].stack = stack21;
 								num4++;
@@ -21697,13 +_,14 @@
 			}
 		}
 
-		public static void SmashAltar(int i, int j) {
+		public static void SmashAltar(/*int i, int j*/) {
+			/*
 			if (Main.netMode == 1 || !Main.hardMode || noTileActions || gen)
 				return;
-
+			*/
 			int num = altarCount % 3;
 			int num2 = altarCount / 3 + 1;
-			float num3 = Main.maxTilesX / 4200;
+			float num3 = Main.maxTilesX / 4200f;
 			int num4 = 1 - num;
 			num3 = num3 * 310f - (float)(85 * num);
 			num3 *= 0.85f;
@@ -21728,6 +_,12 @@
 							NetMessage.BroadcastChatMessage(NetworkText.FromKey(Lang.misc[num7].Key), new Color(50, 255, 130));
 
 						num = oreTier1;
+						if (Main.setting.PreSmashAltarOreGenerateOpposite)
+							num = num == 107 ? 221 : 107; // For presmash, flip it.
+						if (Main.setting.PreSmashAltarOreAlternates && WorldGen.genRand.Next(2) == 0)
+						{
+							num = num == 107 ? 221 : 107; // if both, flip again maybe
+						}
 						num3 *= 1.05f;
 						break;
 					}
@@ -21774,7 +_,8 @@
 						break;
 					}
 			}
-
+			if (!Main.setting.PreSmashAltarPreventPatches)
+			{
 			for (int k = 0; (float)k < num3; k++) {
 				int i2 = genRand.Next(100, Main.maxTilesX - 100);
 				double num8 = Main.worldSurface;
@@ -21811,16 +_,16 @@
 
 				break;
 			}
-
+			}
 			if (Main.netMode != 1) {
 				int num13 = Main.rand.Next(2) + 1;
 				for (int l = 0; l < num13; l++) {
-					NPC.SpawnOnPlayer(Player.FindClosest(new Vector2(i * 16, j * 16), 16, 16), 82);
+					// NPC.SpawnOnPlayer(Player.FindClosest(new Vector2(i * 16, j * 16), 16, 16), 82);
 				}
 			}
 
 			altarCount++;
-			AchievementsHelper.NotifyProgressionEvent(6);
+			// AchievementsHelper.NotifyProgressionEvent(6);
 		}
 
 		public static void Check3x1(int i, int j, int type) {
@@ -22063,7 +_,7 @@
 					break;
 				case 26:
 					if (!noTileActions && !IsGeneratingHardMode)
-						SmashAltar(i, j);
+						SmashAltar();
 					break;
 				case 298:
 					Item.NewItem(i * 16, j * 16, 32, 32, 2190);
@@ -35362,7 +_,7 @@
 		public static void CrimStart(int i, int j) {
 			int crimDir = 1;
 			heartCount = 0;
-			crimson = true;
+			// crimson = true;
 			int k = j;
 			if ((double)k > Main.worldSurface)
 				k = (int)Main.worldSurface;
@@ -35531,7 +_,7 @@
 			}
 
 			for (int num34 = 0; num34 < heartCount; num34++) {
-				AddShadowOrb((int)heartPos[num34].X, (int)heartPos[num34].Y);
+				AddShadowOrb((int)heartPos[num34].X, (int)heartPos[num34].Y, false);
 			}
 
 			int num35 = Main.maxTilesX;
@@ -35773,9 +_,9 @@
 					num = 2f;
 
 				if (num <= 0f) {
-					if (!flag2) {
+					if (!flag2 && !Main.setting.NoOrbHeart) {
 						flag2 = true;
-						AddShadowOrb((int)vector.X, (int)vector.Y);
+						WorldGen.AddShadowOrb((int)vector.X, (int)vector.Y, true);
 					}
 					else if (!flag3) {
 						flag3 = false;
@@ -35797,7 +_,14 @@
 								num10 = Main.maxTilesY - 5;
 
 							if ((double)num10 > Main.worldSurface) {
-								Place3x2(num9, num10, 26);
+								if (Main.setting.NoAltar)
+								{
+									flag4 = true;
+								}
+								else
+								{
+									WorldGen.Place3x2(num9, num10, 26, 0);
+								}
 								if (Main.tile[num9, num10].type == 26) {
 									flag4 = true;
 									continue;
@@ -35951,7 +_,7 @@
 
 		public static void GERunner(int i, int j, float speedX = 0f, float speedY = 0f, bool good = true) {
 			int num = genRand.Next(200, 250);
-			float num2 = Main.maxTilesX / 4200;
+			float num2 = Main.maxTilesX / 4200f;
 			num = (int)((float)num * num2);
 			double num3 = num;
 			Vector2 vector = default(Vector2);
@@ -37560,9 +_,9 @@
 		}
 
 		public static void Lakinater(int i, int j) {
-			double num = genRand.Next(25, 50);
+			double num = genRand.Next(25, 50) * Main.setting.LakeScale;
 			double num2 = num;
-			float num3 = genRand.Next(30, 80);
+			float num3 = genRand.Next(30, 80) * Main.setting.LakeScale;
 			if (genRand.Next(5) == 0) {
 				num *= 1.5;
 				num2 *= 1.5;
@@ -37717,9 +_,9 @@
 
 					int num12 = genRand.Next(7, 10);
 					int num13 = genRand.Next(7, 10);
-					TileRunner(num10, num11, num12, num13, 59, addTile: false, 0f, 2f, noYChange: true);
+					TileRunner(num10, num11, num12 * Main.setting.MushroomScale, num13 + (int)(Main.setting.MushroomScale - 1) / 2, 59, addTile: false, 0f, 2f, noYChange: true);
 					if (genRand.Next(3) == 0)
-						TileRunner(num10, num11, num12 - 3, num13 - 3, -1, addTile: false, 0f, 2f, noYChange: true);
+						TileRunner(num10, num11, num12 - 4 + Main.setting.MushroomScale, num13 - 3 + (int)(Main.setting.MushroomScale - 1) / 2, -1, addTile: false, 0f, 2f, noYChange: true);
 				}
 			}
 		}
