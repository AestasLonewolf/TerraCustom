--- src/tModLoader\Terraria\WorldGen.cs
+++ src/TerraCustom\Terraria\WorldGen.cs
@@ -469,6 +_,7 @@
 		public static int tBottom;
 		public static int tRooms;
 		public static int[] mossType = new int[3];
+		private static int numPyramids = 0;
 		public static int c = 0;
 		public static int m = 0;
 		public static int a = 0;
@@ -581,7 +_,7 @@
 		public static int dungeonX;
 		public static int dungeonY;
 		public static Vector2 lastDungeonHall = Vector2.Zero;
-		public static int maxDRooms = 100;
+		public static int maxDRooms = 1000; // TODO? prob?
 		public static int numDRooms = 0;
 		public static int[] dRoomX = new int[maxDRooms];
 		public static int[] dRoomY = new int[maxDRooms];
@@ -592,12 +_,12 @@
 		private static int[] dRoomT = new int[maxDRooms];
 		private static int[] dRoomB = new int[maxDRooms];
 		private static int numDDoors;
-		private static int[] DDoorX = new int[300];
-		private static int[] DDoorY = new int[300];
-		private static int[] DDoorPos = new int[300];
+		private static int[] DDoorX = new int[3000];
+		private static int[] DDoorY = new int[3000];
+		private static int[] DDoorPos = new int[3000];
 		private static int numDPlats;
-		private static int[] DPlatX = new int[300];
-		private static int[] DPlatY = new int[300];
+		private static int[] DPlatX = new int[3000];
+		private static int[] DPlatY = new int[3000];
 		private static int JungleItemCount = 0;
 		private static int[] JChestX = new int[100];
 		private static int[] JChestY = new int[100];
@@ -1638,5 +_,5 @@
 
 		public static void dropMeteor() {
-			bool flag = true;
+			bool flag = false;
 			if (Main.netMode == 1)
 				return;
@@ -1649,5 +_,5 @@
 			}
 
 			int num = 0;
-			float num2 = Main.maxTilesX / 4200;
+			float num2 = Main.maxTilesX / 4200f;
 			int num3 = (int)(400f * num2);
@@ -1655,5 +_,5 @@
 				for (int k = 5; (double)k < Main.worldSurface; k++) {
 					if (Main.tile[j, k].active() && Main.tile[j, k].type == 37) {
-						num++;
+						//num++; // prevents dropmeteor from failing
 						if (num > num3)
 							return;
@@ -1698,9 +_,9 @@
 					}
 
 					break;
 				}
 
-				if (num4 < 100f)
-					break;
+				//if (num4 < 100f)
+				//	break;
 			}
 		}
@@ -1861,10 +_,13 @@
 			generateWorld(Main.ActiveWorldFileData.Seed, threadContext as GenerationProgress);
 			WorldFile.saveWorld(Main.ActiveWorldFileData.IsCloudSave, resetTime: true);
 			BackupIO.archiveLock = false;
+			/*
 			if (Main.menuMode == 10 || Main.menuMode == 888)
 				Main.menuMode = 6;
 
+			*/
 			Main.PlaySound(10);
+			Main.menuMode = (int)TerraCustom.MenuModes.Settings;
 		}
 
 		public static void CreateNewWorld(GenerationProgress progress = null) {
@@ -2099,5 +_,6 @@
 
 		public static void clearWorld() {
+			WorldGen.numPyramids = 0;
 			TownManager = new TownRoomManager();
 			Hooks.ClearWorld();
 			TileEntity.Clear();
@@ -2108,9 +_,9 @@
 					_ = (float)i / (float)lastMaxTilesX;
 					Main.statusText = Lang.gen[65].Value;
 				}
 
-				Main.Map.Clear();
+				//Main.Map.Clear();
 			}
 
 			NPC.MoonLordCountdown = 0;
 			Main.pumpkinMoon = false;
@@ -2149,16 +_,17 @@
 			prioritizedTownNPC = 0;
 			shadowOrbCount = 0;
 			altarCount = 0;
-			oreTier1 = -1;
-			oreTier2 = -1;
-			oreTier3 = -1;
+			//WorldGen.oreTier1 = -1;
+			//WorldGen.oreTier2 = -1;
+			//WorldGen.oreTier3 = -1;
 			Main.cloudBGActive = 0f;
 			Main.raining = false;
-			Main.hardMode = false;
+			//Main.hardMode = false;
 			Main.helpText = 0;
 			Main.BartenderHelpTextIndex = 0;
 			Main.dungeonX = 0;
 			Main.dungeonY = 0;
+			/*
 			NPC.downedBoss1 = false;
 			NPC.downedBoss2 = false;
 			NPC.downedBoss3 = false;
@@ -2171,11 +_,25 @@
 			NPC.downedFishron = false;
 			NPC.downedAncientCultist = false;
 			NPC.downedMoonlord = false;
+			*/
+			NPC.downedBoss1 = Main.setting.downedEyeOfCthulu;
+			NPC.downedBoss2 = Main.setting.downedEaterBrain;
+			NPC.downedBoss3 = Main.setting.downedSkeletron;
+			NPC.downedQueenBee = Main.setting.downedQueenBee;
+			NPC.downedSlimeKing = Main.setting.downedSlimeKing;
+			NPC.downedMechBossAny = Main.setting.downedTwins | Main.setting.downedDestroyer | Main.setting.downedSkeletronPrime;//false;
+			NPC.downedMechBoss1 = Main.setting.downedTwins;
+			NPC.downedMechBoss2 = Main.setting.downedDestroyer;
+			NPC.downedMechBoss3 = Main.setting.downedSkeletronPrime;
+			NPC.downedFishron = Main.setting.downedFishron;
+			NPC.downedAncientCultist = Main.setting.downedAncientCultist;
+			NPC.downedMoonlord = Main.setting.downedMoonlord;
 			NPC.downedHalloweenKing = false;
 			NPC.downedHalloweenTree = false;
 			NPC.downedChristmasIceQueen = false;
 			NPC.downedChristmasSantank = false;
 			NPC.downedChristmasTree = false;
+			/*
 			NPC.downedPlantBoss = false;
 			NPC.downedGolemBoss = false;
 			NPC.savedStylist = false;
@@ -2185,6 +_,16 @@
 			NPC.savedTaxCollector = false;
 			NPC.savedAngler = false;
 			NPC.savedBartender = false;
+			*/
+			NPC.downedPlantBoss = Main.setting.downedPlantera;
+			NPC.downedGolemBoss = Main.setting.downedGolem;
+			NPC.savedStylist = Main.setting.savedStylist;
+			NPC.savedGoblin = Main.setting.savedGoblin;
+			NPC.savedWizard = Main.setting.savedWizard;
+			NPC.savedMech = Main.setting.savedMechanic;
+			NPC.savedTaxCollector = Main.setting.savedTaxCollector;
+			NPC.savedAngler = Main.setting.savedAngler;
+			NPC.savedBartender = Main.setting.savedBartender;
 			NPC.downedGoblins = false;
 			NPC.downedClown = false;
 			NPC.downedFrost = false;
@@ -2206,12 +_,14 @@
 			Main.treeX[0] = Main.maxTilesX;
 			Main.treeX[1] = Main.maxTilesX;
 			Main.treeX[2] = Main.maxTilesX;
-			Main.treeStyle[0] = 0;
-			Main.treeStyle[1] = 0;
-			Main.treeStyle[2] = 0;
-			Main.treeStyle[3] = 0;
+			//Main.treeStyle[0] = 0;
+			//Main.treeStyle[1] = 0;
+			//Main.treeStyle[2] = 0;
+			//Main.treeStyle[3] = 0;
 			noLiquidCheck = false;
 			Liquid.numLiquid = 0;
 			LiquidBuffer.numLiquidBuffer = 0;
+			Main.tile = new Tile[Main.maxTilesX + 1, Main.maxTilesY + 1]; // should be +1?
+			/*
 			if (Main.netMode == 1 || lastMaxTilesX > Main.maxTilesX || lastMaxTilesY > Main.maxTilesY) {
 				for (int j = 0; j < lastMaxTilesX; j++) {
@@ -2222,7 +_,8 @@
 					}
 				}
 			}
 
+			*/
 			lastMaxTilesX = Main.maxTilesX;
 			lastMaxTilesY = Main.maxTilesY;
 			if (Main.netMode != 2)
@@ -3176,12 +_,176 @@
 
 		public static void RandomizeMoonState()
 		{
-			Main.moonType = WorldGen.genRand.Next(Main.maxMoons);
+			Main.moonType = Main.setting.MoonStyle;
+			if (Main.setting.MoonStyle == 3)
+			{
+				Main.moonType = WorldGen.genRand.Next(Main.maxMoons);
+			}
 		}
 
 		public static void RandomizeBackgrounds()
 		{
-			WorldGen.treeBG = WorldGen.genRand.Next(9);
+			if (Main.setting.ForestStyle == 14)
+			{
+				WorldGen.treeBG = WorldGen.genRand.Next(9);
+				if ((WorldGen.treeBG == 1 || WorldGen.treeBG == 2) && WorldGen.genRand.Next(2) == 0)
+				{
+					WorldGen.treeBG = WorldGen.genRand.Next(7);
+				}
+				if (WorldGen.treeBG == 0)
+				{
+					WorldGen.treeBG = WorldGen.genRand.Next(7);
+				}
+				if (WorldGen.treeBG == 3 && WorldGen.genRand.Next(3) == 0)
+				{
+					WorldGen.treeBG = 31;
+				}
+				if (WorldGen.treeBG == 5 && WorldGen.genRand.Next(2) == 0)
+				{
+					WorldGen.treeBG = 51;
+				}
+				if (WorldGen.treeBG == 7 && WorldGen.genRand.Next(4) == 0)
+				{
+					WorldGen.treeBG = WorldGen.genRand.Next(71, 74);
+				}
+				WorldGen.setBG(0, WorldGen.treeBG);
+			}
+			else
+			{
+				switch (Main.setting.ForestStyle)
+				{
+					case 9:
+						WorldGen.setBG(0, 31);
+						break;
+					case 10:
+						WorldGen.setBG(0, 51);
+						break;
+					case 11:
+						WorldGen.setBG(0, 71);
+						break;
+					case 12:
+						WorldGen.setBG(0, 72);
+						break;
+					case 13:
+						WorldGen.setBG(0, 73);
+						break;
+					default:
+						WorldGen.setBG(0, Main.setting.ForestStyle);
+						break;
+				}
+			}
+			if (Main.setting.CorruptStyle == 2)
+			{
+				WorldGen.setBG(1, WorldGen.genRand.Next(2));
+			}
+			else
+			{
+				WorldGen.setBG(1, Main.setting.CorruptStyle);
+			}
+			if (Main.setting.JungleStyle == 2)
+			{
+				WorldGen.setBG(2, WorldGen.genRand.Next(2));
+			}
+			else
+			{
+				WorldGen.setBG(2, Main.setting.JungleStyle);
+			}
+			if (Main.setting.SnowStyle == 11)
+			{
+				WorldGen.snowBG = WorldGen.genRand.Next(6);
+				if (WorldGen.snowBG == 2 && WorldGen.genRand.Next(2) == 0)
+				{
+					if (WorldGen.genRand.Next(2) == 0)
+					{
+						WorldGen.snowBG = 21;
+					}
+					else
+					{
+						WorldGen.snowBG = 22;
+					}
+				}
+				if (WorldGen.snowBG == 3 && WorldGen.genRand.Next(2) == 0)
+				{
+					if (WorldGen.genRand.Next(2) == 0)
+					{
+						WorldGen.snowBG = 31;
+					}
+					else
+					{
+						WorldGen.snowBG = 32;
+					}
+				}
+				if (WorldGen.snowBG == 4 && WorldGen.genRand.Next(2) == 0)
+				{
+					if (WorldGen.genRand.Next(2) == 0)
+					{
+						WorldGen.snowBG = 41;
+					}
+					else
+					{
+						WorldGen.snowBG = 42;
+					}
+				}
+				WorldGen.setBG(3, WorldGen.snowBG);
+			}
+			else
+			{
+				switch (Main.setting.SnowStyle)
+				{
+					case 5:
+						WorldGen.setBG(3, 21);
+						break;
+					case 6:
+						WorldGen.setBG(3, 22);
+						break;
+					case 7:
+						WorldGen.setBG(3, 31);
+						break;
+					case 8:
+						WorldGen.setBG(3, 32);
+						break;
+					case 9:
+						WorldGen.setBG(3, 41);
+						break;
+					case 10:
+						WorldGen.setBG(3, 42);
+						break;
+					default:
+						WorldGen.setBG(3, Main.setting.SnowStyle);
+						break;
+				}
+			}
+			if (Main.setting.HallowStyle == 2)
+			{
+				WorldGen.setBG(4, WorldGen.genRand.Next(2));
+			}
+			else
+			{
+				WorldGen.setBG(4, Main.setting.HallowStyle);
+			}
+			if (Main.setting.CrimsonStyle == 3)
+			{
+				WorldGen.setBG(5, WorldGen.genRand.Next(3));
+			}
+			else
+			{
+				WorldGen.setBG(5, Main.setting.CrimsonStyle);
+			}
+			if (Main.setting.DesertStyle == 2)
+			{
+				WorldGen.setBG(6, WorldGen.genRand.Next(2));
+			}
+			else
+			{
+				WorldGen.setBG(6, Main.setting.DesertStyle);
+			}
+			if (Main.setting.OceanStyle == 3)
+			{
+				WorldGen.setBG(7, WorldGen.genRand.Next(3));
+				return;
+			}
+			WorldGen.setBG(7, Main.setting.OceanStyle);
+			/*
 			if ((WorldGen.treeBG == 1 || WorldGen.treeBG == 2) && WorldGen.genRand.Next(2) == 0)
 			{
 				WorldGen.treeBG = WorldGen.genRand.Next(7);
@@ -3244,6 +_,7 @@
 			WorldGen.setBG(5, WorldGen.genRand.Next(3));
 			WorldGen.setBG(6, WorldGen.genRand.Next(2));
 			WorldGen.setBG(7, WorldGen.genRand.Next(3));
+			*/
 		}
 
 		public static void RandomizeTreeStyle()
@@ -3259,6 +_,7 @@
 				}
 				Main.treeX[1] = Main.maxTilesX;
 				Main.treeX[2] = Main.maxTilesX;
+				TerraCustom.TerraCustomUtils.FixTreeStyles();
 				return;
 			}
 			if (Main.maxTilesX == 6400)
@@ -3277,6 +_,7 @@
 					Main.treeStyle[2] = WorldGen.genRand.Next(6);
 				}
 				Main.treeX[2] = Main.maxTilesX;
+				TerraCustom.TerraCustomUtils.FixTreeStyles();
 				return;
 			}
 			Main.treeX[0] = WorldGen.genRand.Next((int)((double)Main.maxTilesX * 0.25 - (double)((float)Main.maxTilesX * 0.15f)), (int)((double)Main.maxTilesX * 0.25 + (double)((float)Main.maxTilesX * 0.15f)));
@@ -3298,6 +_,7 @@
 			{
 				Main.treeStyle[3] = WorldGen.genRand.Next(6);
 			}
+			TerraCustom.TerraCustomUtils.FixTreeStyles();
 		}
 
 		public static void RandomizeCaveBackgrounds()
@@ -3357,6 +_,13 @@
 			Main.iceBackStyle = WorldGen.genRand.Next(4);
 			Main.hellBackStyle = WorldGen.genRand.Next(3);
 			Main.jungleBackStyle = WorldGen.genRand.Next(2);
+			Main.iceBackStyle = Main.setting.IceBackStyle == 0 ? Main.iceBackStyle : Main.setting.IceBackStyle - 1;
+			Main.hellBackStyle = Main.setting.HellBackStyle == 0 ? Main.hellBackStyle : Main.setting.HellBackStyle - 1;
+			Main.jungleBackStyle = Main.setting.JungleBackStyle == 0 ? Main.jungleBackStyle : Main.setting.JungleBackStyle - 1;
+			Main.caveBackStyle[0] = Main.setting.CaveBackStyle1 == 0 ? Main.caveBackStyle[0] : Main.setting.CaveBackStyle1 - 1;
+			Main.caveBackStyle[1] = Main.setting.CaveBackStyle2 == 0 ? Main.caveBackStyle[1] : Main.setting.CaveBackStyle2 - 1;
+			Main.caveBackStyle[2] = Main.setting.CaveBackStyle3 == 0 ? Main.caveBackStyle[2] : Main.setting.CaveBackStyle3 - 1;
+			Main.caveBackStyle[3] = Main.setting.CaveBackStyle4 == 0 ? Main.caveBackStyle[3] : Main.setting.CaveBackStyle4 - 1;
 		}
 
 		private static void ResetGenerator()
@@ -3773,8 +_,20 @@
 			}
 		}
 
+		// type: -1: random
+		// 0: 19/40, Dart
+		// 1: 19/40, Boulder // If snow/ice, change to dart
+		// 2: 1/20 Explosives
+		// 3: Below Lava: 5/6 Geyser
 		public static bool placeTrap(int x2, int y2, int type = -1)
 		{
+			int inType = type;
+			int wireType = WorldGen.genRand.Next(3);
+			if (Main.setting.SmartTrapsOff == true)
+			{
+				wireType = 0;
+			}
+			Tile.WireTypeOverride = wireType;
 			int num = y2;
 			bool flag = false;
 			bool flag2 = false;
@@ -3839,7 +_,7 @@
 					{
 						if (Main.tile[i, j].type == 147 || Main.tile[i, j].type == 161)
 						{
-							type = 0;
+							type = 0; // change 1 to 0 if snow or ice block around
 						}
 					}
 				}
@@ -4377,6 +_,11 @@
 			return x >= fluff && x < Main.maxTilesX - fluff && y >= fluff && y < Main.maxTilesY - fluff;
 		}
 
+		public static bool InWorldY(int y, int fluff = 0)
+		{
+			return y >= fluff && y < Main.maxTilesY - fluff;
+		}
+
 		public static void gemCave(int x, int y)
 		{
 			WorldGen.countTiles(x, y, false, false);
@@ -4448,6 +_,7 @@
 			{
 				WorldGen.mossType[2] = WorldGen.genRand.Next(5);
 			}
+			TerraCustom.TerraCustomUtils.FixMossStyles();
 		}
 
 		public static void setMoss(int x, int y)
@@ -4646,6 +_,7 @@
 			int silver = 9;
 			int gold = 8;
 			int dungeonSide = 0;
+			int crimsonSide = 0;
 			ushort jungleHut = (ushort)WorldGen.genRand.Next(5);
 			int howFar = 0;
 			int[] PyrX = null;
@@ -4710,30 +_,66 @@
 					WorldGen.ironBar = 22;
 					WorldGen.silverBar = 21;
 					WorldGen.goldBar = 19;
-					if (WorldGen.genRand.Next(2) == 0)
+					if (Main.setting.IsCopper == 0 || (Main.setting.IsCopper == 2 && WorldGen.genRand.Next(2) == 0))
 					{
 						copper = 166;
 						WorldGen.copperBar = 703;
 						WorldGen.CopperTierOre = 166;
 					}
-					if (WorldGen.genRand.Next(2) == 0)
+					if (Main.setting.IsIron == 0 || (Main.setting.IsIron == 2 && WorldGen.genRand.Next(2) == 0))
 					{
 						iron = 167;
 						WorldGen.ironBar = 704;
 						WorldGen.IronTierOre = 167;
 					}
-					if (WorldGen.genRand.Next(2) == 0)
+					if (Main.setting.IsSilver == 0 || (Main.setting.IsSilver == 2 && WorldGen.genRand.Next(2) == 0))
 					{
 						silver = 168;
 						WorldGen.silverBar = 705;
 						WorldGen.SilverTierOre = 168;
 					}
-					if (WorldGen.genRand.Next(2) == 0)
+					if (Main.setting.IsGold == 0 || (Main.setting.IsGold == 2 && WorldGen.genRand.Next(2) == 0))
 					{
 						gold = 169;
 						WorldGen.goldBar = 706;
 						WorldGen.GoldTierOre = 169;
 					}
+					if (Main.setting.IsCobalt == 0)
+					{
+						oreTier1 = 221;
+					}
+					else if (Main.setting.IsCobalt == 1)
+					{
+						oreTier1 = 107;//Terraria.ID.TileID.Cobalt
+					}
+					else
+					{
+						oreTier1 = -1;
+					}
+					if (Main.setting.IsMythril == 0)
+					{
+						oreTier2 = 222;
+					}
+					else if (Main.setting.IsMythril == 1)
+					{
+						oreTier2 = 108;
+					}
+					else
+					{
+						oreTier2 = -1;
+					}
+					if (Main.setting.IsAdaman == 0)
+					{
+						oreTier3 = 223;
+					}
+					else if (Main.setting.IsAdaman == 1)
+					{
+						oreTier3 = 111;
+					}
+					else
+					{
+						oreTier3 = -1;
+					}
 					WorldGen.crimson = (WorldGen.genRand.Next(2) == 0);
 					if (WorldGen.WorldGenParam_Evil == 0)
 					{
@@ -4743,8 +_,17 @@
 					{
 						WorldGen.crimson = true;
 					}
+					jungleHut = (ushort)Main.setting.ShrineType;
 					if (jungleHut == 0)
 					{
+						jungleHut = (ushort)WorldGen.genRand.Next(5);
+					}
+					else
+					{
+						jungleHut--;
+					}
+					if (jungleHut == 0)
+					{
 						jungleHut = 119;
 					}
 					else if (jungleHut == 1)
@@ -4762,6 +_,21 @@
 					else if (jungleHut == 4)
 					{
 						jungleHut = 45;
+					}
+					else
+					{
+						jungleHut = 45;
+					}
+					switch (Main.setting.IsCorruption)
+					{
+						case 2:
+						case 4:
+							WorldGen.crimson = true;
+							break;
+						case 1:
+						case 3:
+							WorldGen.crimson = false;
+							break;
 					}
 					Main.worldID = WorldGen.genRand.Next(2147483647);
 					WorldGen.RandomizeTreeStyle();
@@ -4769,13 +_,26 @@
 					WorldGen.RandomizeBackgrounds();
 					WorldGen.RandomizeMoonState();
 					dungeonSide = ((WorldGen.genRand.Next(2) == 0) ? -1 : 1);
+					switch (Main.setting.DungeonSide)
+					{
+						case 1:
+							dungeonSide = -1;
+							break;
+						case 2:
+							dungeonSide = 1;
+							break;
+					}
+					if (Main.setting.CrimsonCorruptionAvoidEachOther && (Main.setting.IsCorruption == 3 || Main.setting.IsCorruption == 4) && !Main.setting.CrimsonCorruptionAvoidJungle)
+					{
+						crimsonSide = ((WorldGen.genRand.Next(2) == 0) ? -1 : 1);
+					}
 				});
 			WorldGen.AddGenerationPass("Terrain", delegate(GenerationProgress progress)
 				{
 					progress.Message = Lang.gen[0].Value;
 					int num = 0;
 					int num2 = 0;
-					worldSurface = (double)Main.maxTilesY * 0.3;
+					worldSurface = (double)Main.maxTilesY * Main.setting.SurfaceTerrainHeightMin; // 0.3
 					worldSurface *= (double)WorldGen.genRand.Next(90, 110) * 0.005;
 					rockLayer = worldSurface + (double)Main.maxTilesY * 0.2;
 					rockLayer *= (double)WorldGen.genRand.Next(90, 110) * 0.01;
@@ -4783,6 +_,7 @@
 					worldSurfaceHigh = worldSurface;
 					rockLayerLow = rockLayer;
 					rockLayerHigh = rockLayer;
+					double oldWorldSurface = worldSurface;
 					for (int k = 0; k < Main.maxTilesX; k++)
 					{
 						float value = (float)k / (float)Main.maxTilesX;
@@ -4812,23 +_,25 @@
 								num2 *= (int)((double)WorldGen.genRand.Next(5, 30) * 0.2);
 							}
 						}
-						num2--;
-						if ((double)k > (double)Main.maxTilesX * 0.43 && (double)k < (double)Main.maxTilesX * 0.57 && num >= 3)
-						{
-							num = WorldGen.genRand.Next(3);
-						}
-						if ((double)k > (double)Main.maxTilesX * 0.47 && (double)k < (double)Main.maxTilesX * 0.53)
-						{
-							num = 0;
-						}
-						if (num == 0)
+						num2--; // randomness??
+						if ((double)k > (double)Main.maxTilesX * 0.43 && (double)k < (double)Main.maxTilesX * 0.57 && num >= 3) // flatish near bigger middle
+						{
+							if(!Main.setting.BypassSpawnAreaFlatness)
+								num = WorldGen.genRand.Next(3);
+						}
+						if ((double)k > (double)Main.maxTilesX * 0.47 && (double)k < (double)Main.maxTilesX * 0.53) // flat near middle
+						{
+							if(!Main.setting.BypassSpawnAreaFlatness)
+								num = 0;
+						}
+						if (num == 0) // +/- 1: 1/7th chance
 						{
 							while (WorldGen.genRand.Next(0, 7) == 0)
 							{
 								worldSurface += (double)WorldGen.genRand.Next(-1, 2);
 							}
 						}
-						else if (num == 1)
+						else if (num == 1) // 1/4 chance -1(up) 1/10 chance down
 						{
 							while (WorldGen.genRand.Next(0, 4) == 0)
 							{
@@ -4839,7 +_,7 @@
 								worldSurface += 1.0;
 							}
 						}
-						else if (num == 2)
+						else if (num == 2) // 1/10 chance -1(up) 1/4 chance down
 						{
 							while (WorldGen.genRand.Next(0, 4) == 0)
 							{
@@ -4850,7 +_,7 @@
 								worldSurface -= 1.0;
 							}
 						}
-						else if (num == 3)
+						else if (num == 3) // 1/2 chance -1(up) 1/6 chance down
 						{
 							while (WorldGen.genRand.Next(0, 2) == 0)
 							{
@@ -4861,7 +_,7 @@
 								worldSurface += 1.0;
 							}
 						}
-						else if (num == 4)
+						else if (num == 4) // 1/5 chance -1(up) 1/2 chance down
 						{
 							while (WorldGen.genRand.Next(0, 2) == 0)
 							{
@@ -4872,21 +_,24 @@
 								worldSurface -= 1.0;
 							}
 						}
-						if (worldSurface < (double)Main.maxTilesY * 0.17)
-						{
-							worldSurface = (double)Main.maxTilesY * 0.17;
+						worldSurface = oldWorldSurface + ((worldSurface - oldWorldSurface) * Main.setting.SurfaceTerrainHeightMultiplier);
+						double a = worldSurface - Math.Truncate(worldSurface);
+						if (worldSurface < (double)Main.maxTilesY * Main.setting.SurfaceTerrainHeightMax) // 0.17 prevent surface from going to high
+						{
+							worldSurface = (double)Main.maxTilesY * Main.setting.SurfaceTerrainHeightMax;
 							num2 = 0;
 						}
-						else if (worldSurface > (double)Main.maxTilesY * 0.3)
-						{
-							worldSurface = (double)Main.maxTilesY * 0.3;
+						else if (worldSurface > (double)Main.maxTilesY * Main.setting.SurfaceTerrainHeightMin) // 0.3 prevent surface from going too deep
+						{
+							worldSurface = (double)Main.maxTilesY * Main.setting.SurfaceTerrainHeightMin;
 							num2 = 0;
 						}
-						if ((k < 275 || k > Main.maxTilesX - 275) && worldSurface > (double)Main.maxTilesY * 0.25)
-						{
-							worldSurface = (double)Main.maxTilesY * 0.25;
+						if ((k < 275 || k > Main.maxTilesX - 275) && worldSurface > (double)Main.maxTilesY * (Main.setting.SurfaceTerrainHeightMin - .05)) // .25 prevent ocean from being too deep
+						{
+							worldSurface = (double)Main.maxTilesY * (Main.setting.SurfaceTerrainHeightMin - .05);
 							num2 = 1;
 						}
+						oldWorldSurface = worldSurface + a;
 						while (WorldGen.genRand.Next(0, 3) == 0)
 						{
 							rockLayer += (double)WorldGen.genRand.Next(-2, 3);
@@ -4902,6 +_,7 @@
 						int num3 = 0;
 						while ((double)num3 < worldSurface)
 						{
+							// sky
 							Main.tile[k, num3].active(false);
 							Main.tile[k, num3].frameX = -1;
 							Main.tile[k, num3].frameY = -1;
@@ -4932,10 +_,11 @@
 					WorldGen.waterLine = (int)(Main.rockLayer + (double)Main.maxTilesY) / 2;
 					WorldGen.waterLine += WorldGen.genRand.Next(-100, 20);
 					WorldGen.lavaLine = WorldGen.waterLine + WorldGen.genRand.Next(50, 80);
+					// TODO, lava world, set lavaline to real high
 				});
 			WorldGen.AddGenerationPass("Tunnels", delegate(GenerationProgress progress)
 				{
-					for (int k = 0; k < (int)((double)Main.maxTilesX * 0.0015); k++)
+					for (int k = 0; k < (int)((double)Main.maxTilesX * 0.0015 * Main.setting.SurfaceHorizontalTunnelsMultiplier); k++)
 					{
 						int[] array = new int[10];
 						int[] array2 = new int[10];
@@ -4968,6 +_,7 @@
 					progress.Message = Lang.gen[1].Value;
 					int num = WorldGen.genRand.Next((int)((double)Main.maxTilesX * 0.0008), (int)((double)Main.maxTilesX * 0.0025));
 					num += 2;
+					num = (int)(num*Main.setting.SandMultiplier);
 					PyrX = new int[num];
 					PyrY = new int[num];
 					for (int k = 0; k < num; k++)
@@ -4980,7 +_,7 @@
 						int num3 = WorldGen.genRand.Next(35, 90);
 						if (k == 1)
 						{
-							float num4 = (float)(Main.maxTilesX / 4200);
+							float num4 = ((float)Main.maxTilesX / 4200);
 							num3 += (int)((float)WorldGen.genRand.Next(20, 40) * num4);
 						}
 						if (WorldGen.genRand.Next(3) == 0)
@@ -5048,7 +_,16 @@
 							{
 								if (Main.tile[l, num8].active())
 								{
-									if (l == (num5 + num6) / 2 && WorldGen.genRand.Next(6) == 0)
+									if (Main.setting.IsPyramid == 2 || Main.setting.IsPyramid == 0)
+									{
+										if (l == (num5 + num6) / 2 && WorldGen.genRand.Next(6) == 0)
+										{
+											PyrX[numPyr] = l;
+											PyrY[numPyr] = num8;
+											numPyr++;
+										}
+									}
+									else if (Main.setting.IsPyramid == 1 && l == (num5 + num6) / 2)
 									{
 										PyrX[numPyr] = l;
 										PyrY[numPyr] = num8;
@@ -5077,8 +_,9 @@
 							}
 						}
 					}
-					for (int n = 0; n < (int)((double)(Main.maxTilesX * Main.maxTilesY) * 8E-06); n++)
-					{
+					for (int n = 0; n < (int)((double)(Main.maxTilesX * Main.maxTilesY) * 8E-06*Main.setting.SandMultiplier); n++)
+					{
+						// TODO sand ammount  TileID.Sand
 						WorldGen.TileRunner(WorldGen.genRand.Next(0, Main.maxTilesX), WorldGen.genRand.Next((int)Main.worldSurface, (int)Main.rockLayer), (double)WorldGen.genRand.Next(15, 70), WorldGen.genRand.Next(20, 130), 53, false, 0f, 0f, false, true);
 					}
 				});
@@ -5222,29 +_,23 @@
 			WorldGen.AddGenerationPass("Clay", delegate(GenerationProgress progress)
 				{
 					progress.Message = Lang.gen[6].Value;
-					for (int k = 0; k < (int)((double)(Main.maxTilesX * Main.maxTilesY) * 2E-05); k++)
-					{
+					// TODO clay spawn
+					if  (Main.setting.ClayMult <= 0) return;
+					for (int k = 0; k < (int)((double)(Main.maxTilesX * Main.maxTilesY) * 2E-05 * Main.setting.ClayMult); k++) {
 						WorldGen.TileRunner(WorldGen.genRand.Next(0, Main.maxTilesX), WorldGen.genRand.Next(0, (int)WorldGen.worldSurfaceLow), (double)WorldGen.genRand.Next(4, 14), WorldGen.genRand.Next(10, 50), 40, false, 0f, 0f, false, true);
 					}
-					for (int l = 0; l < (int)((double)(Main.maxTilesX * Main.maxTilesY) * 5E-05); l++)
-					{
+					for (int l = 0; l < (int)((double)(Main.maxTilesX * Main.maxTilesY) * 5E-05 * Main.setting.ClayMult); l++) {
 						WorldGen.TileRunner(WorldGen.genRand.Next(0, Main.maxTilesX), WorldGen.genRand.Next((int)WorldGen.worldSurfaceLow, (int)worldSurfaceHigh + 1), (double)WorldGen.genRand.Next(8, 14), WorldGen.genRand.Next(15, 45), 40, false, 0f, 0f, false, true);
 					}
-					for (int m = 0; m < (int)((double)(Main.maxTilesX * Main.maxTilesY) * 2E-05); m++)
-					{
+					for (int m = 0; m < (int)((double)(Main.maxTilesX * Main.maxTilesY) * 2E-05 * Main.setting.ClayMult); m++) {
 						WorldGen.TileRunner(WorldGen.genRand.Next(0, Main.maxTilesX), WorldGen.genRand.Next((int)worldSurfaceHigh, (int)rockLayerHigh + 1), (double)WorldGen.genRand.Next(8, 15), WorldGen.genRand.Next(5, 50), 40, false, 0f, 0f, false, true);
 					}
-					for (int n = 5; n < Main.maxTilesX - 5; n++)
-					{
+					for (int n = 5; n < Main.maxTilesX - 5; n++) {
 						int num = 1;
-						while ((double)num < Main.worldSurface - 1.0)
-						{
-							if (Main.tile[n, num].active())
-							{
-								for (int num2 = num; num2 < num + 5; num2++)
-								{
-									if (Main.tile[n, num2].type == 40)
-									{
+						while ((double)num < Main.worldSurface - 1.0) {
+							if (Main.tile[n, num].active()) {
+								for (int num2 = num; num2 < num + 5; num2++) {
+									if (Main.tile[n, num2].type == 40) {
 										Main.tile[n, num2].type = 0;
 									}
 								}
@@ -5259,7 +_,8 @@
 				{
 					i2 = 0;
 					progress.Message = Lang.gen[7].Value;
-					for (int k = 0; k < (int)((double)(Main.maxTilesX * Main.maxTilesY) * 0.0015); k++)
+					if (Main.setting.DeepCaveMult <= 0) return;
+					for (int k = 0; k < (int)((double)(Main.maxTilesX * Main.maxTilesY) * 0.0015 * Main.setting.DeepCaveMult); k++)
 					{
 						float value = (float)((double)k / ((double)(Main.maxTilesX * Main.maxTilesY) * 0.0015));
 						progress.Set(value);
@@ -5275,7 +_,8 @@
 			WorldGen.AddGenerationPass("Dirt Layer Caves", delegate(GenerationProgress progress)
 				{
 					progress.Message = Lang.gen[8].Value;
-					for (int k = 0; k < (int)((double)(Main.maxTilesX * Main.maxTilesY) * 3E-05); k++)
+					if (Main.setting.SurfaceCaveMult <= 0) return;
+					for (int k = 0; k < (int)((double)(Main.maxTilesX * Main.maxTilesY) * 3E-05 * Main.setting.SurfaceCaveMult) ; k++)
 					{
 						float value = (float)((double)k / ((double)(Main.maxTilesX * Main.maxTilesY) * 3E-05));
 						progress.Set(value);
@@ -5293,7 +_,8 @@
 			WorldGen.AddGenerationPass("Rock Layer Caves", delegate(GenerationProgress progress)
 				{
 					progress.Message = Lang.gen[9].Value;
-					for (int k = 0; k < (int)((double)(Main.maxTilesX * Main.maxTilesY) * 0.00013); k++)
+					if (Main.setting.DeepCaveMult <= 0) return;
+					for (int k = 0; k < (int)((double)(Main.maxTilesX * Main.maxTilesY) * 0.00013 * Main.setting.DeepCaveMult); k++)
 					{
 						float value = (float)((double)k / ((double)(Main.maxTilesX * Main.maxTilesY) * 0.00013));
 						progress.Set(value);
@@ -5311,7 +_,8 @@
 			WorldGen.AddGenerationPass("Surface Caves", delegate(GenerationProgress progress)
 				{
 					progress.Message = Lang.gen[10].Value;
-					for (int k = 0; k < (int)((double)Main.maxTilesX * 0.002); k++)
+					if (Main.setting.SurfaceCaveMult <= 0) return;
+					for (int k = 0; k < (int)((double)Main.maxTilesX * 0.002 * Main.setting.SurfaceCaveMult); k++)
 					{
 						i2 = WorldGen.genRand.Next(0, Main.maxTilesX);
 						while ((float)i2 > (float)Main.maxTilesX * 0.45f && (float)i2 < (float)Main.maxTilesX * 0.55f)
@@ -5385,13 +_,16 @@
 							num4++;
 						}
 					}
-					float num5 = (float)(Main.maxTilesX / 4200);
+					float num5 = ((float)Main.maxTilesX / 4200);
 					int num6 = 0;
 					while ((float)num6 < 5f * num5)
 					{
 						try
 						{
-							WorldGen.Caverer(WorldGen.genRand.Next(100, Main.maxTilesX - 100), WorldGen.genRand.Next((int)Main.rockLayer, Main.maxTilesY - 400));
+							if (Main.maxTilesY > 1000)
+								WorldGen.Caverer(WorldGen.genRand.Next(100, Main.maxTilesX - 100), WorldGen.genRand.Next((int)Main.rockLayer, Main.maxTilesY - 400));
+							else
+								WorldGen.Caverer(WorldGen.genRand.Next(100, Main.maxTilesX - 100), WorldGen.genRand.Next((int)Main.rockLayer, Main.maxTilesY - 100));
 						}
 						catch
 						{
@@ -5401,6 +_,7 @@
 				});
 			WorldGen.AddGenerationPass("Slush Check", delegate(GenerationProgress progress)
 				{
+					if (Main.setting.NoSnow) return;
 					progress.Message = Lang.gen[56].Value;
 					snowTop = (int)Main.worldSurface;
 					int num = WorldGen.genRand.Next(Main.maxTilesX);
@@ -5419,10 +_,14 @@
 						}
 					}
 					int num2 = WorldGen.genRand.Next(50, 90);
-					float num3 = (float)(Main.maxTilesX / 4200);
+					float num3 = ((float)Main.maxTilesX / 4200);
 					num2 += (int)((float)WorldGen.genRand.Next(20, 40) * num3);
 					num2 += (int)((float)WorldGen.genRand.Next(20, 40) * num3);
-					int num4 = num - num2;
+					int num4 = (int)((num - num2) / (Main.setting.IceBiomeWidth));
+					if (num4 > (num - num2))
+					{
+						num4 = num - num2;
+					}
 					num2 = WorldGen.genRand.Next(50, 90);
 					num2 += (int)((float)WorldGen.genRand.Next(20, 40) * num3);
 					num2 += (int)((float)WorldGen.genRand.Next(20, 40) * num3);
@@ -5436,10 +_,20 @@
 						num5 = Main.maxTilesX;
 					}
 					int num6 = 10;
-					for (int k = 0; k <= WorldGen.lavaLine - 140; k++)
-					{
-						num4 += WorldGen.genRand.Next(-4, 4);
-						num5 += WorldGen.genRand.Next(-3, 5);
+					int Ybase = WorldGen.lavaLine - 140;
+					if (Main.setting.IceBiomeDepth == 2)
+					{
+						Ybase = WorldGen.lastMaxTilesY - 220;
+					}
+					if (Main.setting.IceBiomeDepth == 0) {
+						Ybase = (int)Main.worldSurface + (int)(WorldGen.lastMaxTilesY/24);
+					}
+					for (int k = 0; k <= Ybase; k++)
+					{
+						num4 += (int)(WorldGen.genRand.Next(-4, 4)*Main.setting.IceBiomeWidth);
+						num5 += (int)(WorldGen.genRand.Next(-3, 5)*Main.setting.IceBiomeWidth);
+						num4 = Utils.Clamp(num4, 0, Main.maxTilesX);
+						num5 = Utils.Clamp(num5, 0, Main.maxTilesX);
 						snowMinX[k] = num4;
 						snowMaxX[k] = num5;
 						for (int l = num4; l < num5; l++)
@@ -5533,9 +_,11 @@
 				});
 			WorldGen.AddGenerationPass("Jungle", delegate(GenerationProgress progress)
 				{
+					if (Main.setting.NoJungle) return;
 					progress.Message = Lang.gen[11].Value;
-					float num = (float)(Main.maxTilesX / 4200);
-					num *= 1.5f;
+					float num = ((float)Main.maxTilesX / 4200);
+					num *= 1.5f * Main.setting.JungleScale;
+					float yStrength = ((float)Main.maxTilesY / 4200) * 3.5f * 1.5f; // num is xStrength
 					float num2 = (float)WorldGen.genRand.Next(15, 30) * 0.01f;
 					int num3;
 					if (dungeonSide == -1)
@@ -5549,20 +_,20 @@
 					}
 					int num4 = (int)((double)Main.maxTilesY + Main.rockLayer) / 2;
 					num3 += WorldGen.genRand.Next((int)(-100f * num), (int)(101f * num));
-					num4 += WorldGen.genRand.Next((int)(-100f * num), (int)(101f * num));
+					num4 += WorldGen.genRand.Next((int)(-100f * yStrength), (int)(101f * yStrength));
 					int num5 = num3;
 					int num6 = num4;
 					WorldGen.TileRunner(num3, num4, (double)WorldGen.genRand.Next((int)(250f * num), (int)(500f * num)), WorldGen.genRand.Next(50, 150), 59, false, (float)(dungeonSide * 3), 0f, false, true);
 					int num7 = 0;
-					while ((float)num7 < 6f * num)
-					{
-						WorldGen.TileRunner(num3 + WorldGen.genRand.Next(-(int)(125f * num), (int)(125f * num)), num4 + WorldGen.genRand.Next(-(int)(125f * num), (int)(125f * num)), (double)WorldGen.genRand.Next(3, 7), WorldGen.genRand.Next(3, 8), WorldGen.genRand.Next(63, 65), false, 0f, 0f, false, true);
+					while ((float)num7 < 6f * num / Main.setting.JungleScale)
+					{
+						WorldGen.TileRunner(num3 + WorldGen.genRand.Next(-(int)(125f * num), (int)(125f * num)), num4 + WorldGen.genRand.Next(-(int)(125f * yStrength), (int)(125f * yStrength)), (double)WorldGen.genRand.Next(3, 7), WorldGen.genRand.Next(3, 8), WorldGen.genRand.Next(63, 65), false, 0f, 0f, false, true);
 						num7++;
 					}
 					WorldGen.mudWall = true;
 					progress.Set(0.15f);
 					num3 += WorldGen.genRand.Next((int)(-250f * num), (int)(251f * num));
-					num4 += WorldGen.genRand.Next((int)(-150f * num), (int)(151f * num));
+					num4 += WorldGen.genRand.Next((int)(-150f * yStrength), (int)(151f * yStrength));
 					int num8 = num3;
 					int num9 = num4;
 					int num10 = num3;
@@ -5570,23 +_,23 @@
 					WorldGen.TileRunner(num3, num4, (double)WorldGen.genRand.Next((int)(250f * num), (int)(500f * num)), WorldGen.genRand.Next(50, 150), 59, false, 0f, 0f, false, true);
 					WorldGen.mudWall = false;
 					int num12 = 0;
-					while ((float)num12 < 6f * num)
-					{
-						WorldGen.TileRunner(num3 + WorldGen.genRand.Next(-(int)(125f * num), (int)(125f * num)), num4 + WorldGen.genRand.Next(-(int)(125f * num), (int)(125f * num)), (double)WorldGen.genRand.Next(3, 7), WorldGen.genRand.Next(3, 8), WorldGen.genRand.Next(65, 67), false, 0f, 0f, false, true);
+					while ((float)num12 < 6f * num / Main.setting.JungleScale)
+					{
+						WorldGen.TileRunner(num3 + WorldGen.genRand.Next(-(int)(125f * num), (int)(125f * num)), num4 + WorldGen.genRand.Next(-(int)(125f * yStrength), (int)(125f * yStrength)), (double)WorldGen.genRand.Next(3, 7), WorldGen.genRand.Next(3, 8), WorldGen.genRand.Next(65, 67), false, 0f, 0f, false, true);
 						num12++;
 					}
 					WorldGen.mudWall = true;
 					progress.Set(0.3f);
 					num3 += WorldGen.genRand.Next((int)(-400f * num), (int)(401f * num));
-					num4 += WorldGen.genRand.Next((int)(-150f * num), (int)(151f * num));
+					num4 += WorldGen.genRand.Next((int)(-150f * yStrength), (int)(151f * yStrength));
 					int num13 = num3;
 					int num14 = num4;
 					WorldGen.TileRunner(num3, num4, (double)WorldGen.genRand.Next((int)(250f * num), (int)(500f * num)), WorldGen.genRand.Next(50, 150), 59, false, (float)(dungeonSide * -3), 0f, false, true);
 					WorldGen.mudWall = false;
 					int num15 = 0;
-					while ((float)num15 < 6f * num)
-					{
-						WorldGen.TileRunner(num3 + WorldGen.genRand.Next(-(int)(125f * num), (int)(125f * num)), num4 + WorldGen.genRand.Next(-(int)(125f * num), (int)(125f * num)), (double)WorldGen.genRand.Next(3, 7), WorldGen.genRand.Next(3, 8), WorldGen.genRand.Next(67, 69), false, 0f, 0f, false, true);
+					while ((float)num15 < 6f * num / Main.setting.JungleScale)
+					{
+						WorldGen.TileRunner(num3 + WorldGen.genRand.Next(-(int)(125f * num), (int)(125f * num)), num4 + WorldGen.genRand.Next(-(int)(125f * yStrength), (int)(125f * yStrength)), (double)WorldGen.genRand.Next(3, 7), WorldGen.genRand.Next(3, 8), WorldGen.genRand.Next(67, 69), false, 0f, 0f, false, true);
 						num15++;
 					}
 					WorldGen.mudWall = true;
@@ -5611,27 +_,27 @@
 					num3 = num10;
 					num4 = num11;
 					int num16 = 0;
-					while ((float)num16 <= 20f * num)
+					while ((float)num16 <= 20f * num / Main.setting.JungleScale)
 					{
 						progress.Set((60f + (float)num16 / num) * 0.01f);
 						num3 += WorldGen.genRand.Next((int)(-5f * num), (int)(6f * num));
-						num4 += WorldGen.genRand.Next((int)(-5f * num), (int)(6f * num));
+						num4 += WorldGen.genRand.Next((int)(-5f * yStrength), (int)(6f * yStrength));
 						WorldGen.TileRunner(num3, num4, (double)WorldGen.genRand.Next(40, 100), WorldGen.genRand.Next(300, 500), 59, false, 0f, 0f, false, true);
 						num16++;
 					}
 					int num17 = 0;
-					while ((float)num17 <= 10f * num)
-					{
-						progress.Set((80f + (float)num17 / num * 2f) * 0.01f);
+					while ((float)num17 <= 10f * num / Main.setting.JungleScale)
+					{
+						progress.Set((80f + (float)num17 / num * 2f / Main.setting.JungleScale) * 0.01f);
 						num3 = num10 + WorldGen.genRand.Next((int)(-600f * num), (int)(600f * num));
-						num4 = num11 + WorldGen.genRand.Next((int)(-200f * num), (int)(200f * num));
+						num4 = num11 + WorldGen.genRand.Next((int)(-200f * yStrength), (int)(200f * yStrength));
 						while (num3 < 1 || num3 >= Main.maxTilesX - 1 || num4 < 1 || num4 >= Main.maxTilesY - 1 || Main.tile[num3, num4].type != 59)
 						{
 							num3 = num10 + WorldGen.genRand.Next((int)(-600f * num), (int)(600f * num));
-							num4 = num11 + WorldGen.genRand.Next((int)(-200f * num), (int)(200f * num));
+							num4 = num11 + WorldGen.genRand.Next((int)(-200f * yStrength), (int)(200f * yStrength));
 						}
 						int num18 = 0;
-						while ((float)num18 < 8f * num)
+						while ((float)num18 < 8f * num / Main.setting.JungleScale)
 						{
 							num3 += WorldGen.genRand.Next(-30, 31);
 							num4 += WorldGen.genRand.Next(-30, 31);
@@ -5646,14 +_,14 @@
 						num17++;
 					}
 					int num19 = 0;
-					while ((float)num19 <= 300f * num)
+					while ((float)num19 <= 300f * num / Main.setting.JungleScale)
 					{
 						num3 = num10 + WorldGen.genRand.Next((int)(-600f * num), (int)(600f * num));
-						num4 = num11 + WorldGen.genRand.Next((int)(-200f * num), (int)(200f * num));
+						num4 = num11 + WorldGen.genRand.Next((int)(-200f * yStrength), (int)(200f * yStrength));
 						while (num3 < 1 || num3 >= Main.maxTilesX - 1 || num4 < 1 || num4 >= Main.maxTilesY - 1 || Main.tile[num3, num4].type != 59)
 						{
 							num3 = num10 + WorldGen.genRand.Next((int)(-600f * num), (int)(600f * num));
-							num4 = num11 + WorldGen.genRand.Next((int)(-200f * num), (int)(200f * num));
+							num4 = num11 + WorldGen.genRand.Next((int)(-200f * yStrength), (int)(200f * yStrength));
 						}
 						WorldGen.TileRunner(num3, num4, (double)WorldGen.genRand.Next(4, 10), WorldGen.genRand.Next(5, 30), 1, false, 0f, 0f, false, true);
 						if (WorldGen.genRand.Next(4) == 0)
@@ -5668,7 +_,7 @@
 				{
 					progress.Message = Lang.gen[80].Value;
 					float num = (float)(Main.maxTilesX * Main.maxTilesY) / 5040000f;
-					int num2 = (int)((float)WorldGen.genRand.Next(10, 15) * num);
+					int num2 = (int)((float)WorldGen.genRand.Next(10, 15) * num * Main.setting.MarbleCaveMultiplier);
 					float num3 = (float)(Main.maxTilesX - 160) / (float)num2;
 					int k = 0;
 					while (k < num2)
@@ -5686,7 +_,7 @@
 				{
 					progress.Message = Lang.gen[81].Value;
 					float num = (float)Main.maxTilesX / 4200f;
-					int num2 = (int)((float)WorldGen.genRand.Next(8, 14) * num);
+					int num2 = (int)((float)WorldGen.genRand.Next(8, 14) * num * Main.setting.GraniteCaveMultiplier);
 					float num3 = (float)(Main.maxTilesX - 200) / (float)num2;
 					int k = 0;
 					while (k < num2)
@@ -5710,7 +_,12 @@
 							if (Main.tile[k, l].active())
 							{
 								WorldGen.grassSpread = 0;
-								WorldGen.SpreadGrass(k, l, 59, 60, true, 0);
+								int GrassID = 60;
+								if (Main.setting.SwapShroomJungle)
+								{
+									GrassID = 70;
+								}
+								WorldGen.SpreadGrass(k, l, 59, GrassID, true, 0);
 							}
 							progress.Set(0.2f * ((float)(k * Main.maxTilesY + l) / (float)(Main.maxTilesX * Main.maxTilesY)));
 						}
@@ -5734,6 +_,7 @@
 				});
 			WorldGen.AddGenerationPass("Full Desert", delegate(GenerationProgress progress)
 				{
+					if (Main.setting.NoAnthill) return;
 					progress.Message = Lang.gen[78].Value;
 					int num = dungeonSide;
 					int num2 = Main.maxTilesX / 2;
@@ -5753,12 +_,13 @@
 						}
 					}
 				});
+			// TODO Floating Island
 			WorldGen.AddGenerationPass("Floating Islands", delegate(GenerationProgress progress)
 				{
 					WorldGen.numIslandHouses = 0;
 					WorldGen.houseCount = 0;
 					progress.Message = Lang.gen[12].Value;
-					for (int k = 0; k < (int)((double)Main.maxTilesX * 0.0008) + skyLakes; k++)
+					for (int k = 0; k < (int)((double)Main.maxTilesX * 0.0008 * Main.setting.SkyIslandMultiplier) + skyLakes; k++)
 					{
 						int num = 1000;
 						int num2 = WorldGen.genRand.Next((int)((double)Main.maxTilesX * 0.1), (int)((double)Main.maxTilesX * 0.9));
@@ -5796,6 +_,7 @@
 								{
 									int num5 = WorldGen.genRand.Next(90, num3 - 100);
 									num5 = Math.Min(num5, (int)WorldGen.worldSurfaceLow - 50);
+									if (num5 < 30) continue;
 									if (k < skyLakes)
 									{
 										WorldGen.skyLake[WorldGen.numIslandHouses] = true;
@@ -5803,7 +_,7 @@
 									}
 									else
 									{
-										WorldGen.CloudIsland(num2, num5);
+										try { WorldGen.CloudIsland(num2, num5); } catch { }
 									}
 									WorldGen.fihX[WorldGen.numIslandHouses] = num2;
 									WorldGen.fihY[WorldGen.numIslandHouses] = num5;
@@ -5816,7 +_,7 @@
 			WorldGen.AddGenerationPass("Mushroom Patches", delegate(GenerationProgress progress)
 				{
 					progress.Message = Lang.gen[13].Value;
-					for (int k = 0; k < Main.maxTilesX / 500; k++)
+					for (int k = 0; k < (Main.maxTilesX / 500) * Main.setting.MushroomBiomeMultiplier; k++)
 					{
 						int num = 0;
 						bool flag2 = true;
@@ -5824,6 +_,7 @@
 						{
 							int num2 = WorldGen.genRand.Next((int)((double)Main.maxTilesX * 0.3), (int)((double)Main.maxTilesX * 0.7));
 							int num3 = WorldGen.genRand.Next((int)Main.rockLayer, Main.maxTilesY - 350);
+							if (Main.maxTilesY < 1000) num3 = WorldGen.genRand.Next((int)Main.rockLayer, Main.maxTilesY - 100);
 							flag2 = false;
 							int num4 = 60;
 							for (int l = num2 - num4; l < num2 + num4; l += 3)
@@ -5860,7 +_,11 @@
 							if (Main.tile[n, num5].active())
 							{
 								WorldGen.grassSpread = 0;
-								WorldGen.SpreadGrass(n, num5, 59, 70, false, 0);
+								int GrassID = 70;
+								if (Main.setting.SwapShroomJungle) {
+									GrassID = 60;
+								}
+								WorldGen.SpreadGrass(n, num5, 59, GrassID, false, 0);
 								if (Main.tile[n, num5].type == 70 && WorldGen.genRand.Next(20) == 0)
 								{
 									int num6;
@@ -5940,11 +_,11 @@
 			WorldGen.AddGenerationPass("Silt", delegate(GenerationProgress progress)
 				{
 					progress.Message = Lang.gen[15].Value;
-					for (int k = 0; k < (int)((double)(Main.maxTilesX * Main.maxTilesY) * 0.0001); k++)
+					for (int k = 0; k < (int)((double)(Main.maxTilesX * Main.maxTilesY) * 0.0001 * Main.setting.SiltMultiplier) ; k++)
 					{
 						WorldGen.TileRunner(WorldGen.genRand.Next(0, Main.maxTilesX), WorldGen.genRand.Next((int)rockLayerHigh, Main.maxTilesY), (double)WorldGen.genRand.Next(5, 12), WorldGen.genRand.Next(15, 50), 123, false, 0f, 0f, false, true);
 					}
-					for (int l = 0; l < (int)((double)(Main.maxTilesX * Main.maxTilesY) * 0.0005); l++)
+					for (int l = 0; l < (int)((double)(Main.maxTilesX * Main.maxTilesY) * 0.0005 * Main.setting.SiltMultiplier); l++)
 					{
 						WorldGen.TileRunner(WorldGen.genRand.Next(0, Main.maxTilesX), WorldGen.genRand.Next((int)rockLayerHigh, Main.maxTilesY), (double)WorldGen.genRand.Next(2, 5), WorldGen.genRand.Next(2, 5), 123, false, 0f, 0f, false, true);
 					}
@@ -5952,59 +_,71 @@
 			WorldGen.AddGenerationPass("Shinies", delegate(GenerationProgress progress)
 				{
 					progress.Message = Lang.gen[16].Value;
-					for (int k = 0; k < (int)((double)(Main.maxTilesX * Main.maxTilesY) * 6E-05); k++)
-					{
+					for (int k = 0; k < (int)((double)(Main.maxTilesX * Main.maxTilesY) * 6E-05 * Main.setting.PercCopp); k++)
+					{
+						if (Main.setting.IsCopper == 3) copper = WorldGen.genRand.NextBool() ? 7 : 166;
 						WorldGen.TileRunner(WorldGen.genRand.Next(0, Main.maxTilesX), WorldGen.genRand.Next((int)WorldGen.worldSurfaceLow, (int)worldSurfaceHigh), (double)WorldGen.genRand.Next(3, 6), WorldGen.genRand.Next(2, 6), copper, false, 0f, 0f, false, true);
 					}
-					for (int l = 0; l < (int)((double)(Main.maxTilesX * Main.maxTilesY) * 8E-05); l++)
-					{
+					for (int l = 0; l < (int)((double)(Main.maxTilesX * Main.maxTilesY) * 8E-05 * Main.setting.PercCopp); l++)
+					{
+						if (Main.setting.IsCopper == 3) copper = WorldGen.genRand.NextBool() ? 7 : 166;
 						WorldGen.TileRunner(WorldGen.genRand.Next(0, Main.maxTilesX), WorldGen.genRand.Next((int)worldSurfaceHigh, (int)rockLayerHigh), (double)WorldGen.genRand.Next(3, 7), WorldGen.genRand.Next(3, 7), copper, false, 0f, 0f, false, true);
 					}
-					for (int m = 0; m < (int)((double)(Main.maxTilesX * Main.maxTilesY) * 0.0002); m++)
-					{
+					for (int m = 0; m < (int)((double)(Main.maxTilesX * Main.maxTilesY) * 0.0002 * Main.setting.PercCopp); m++)
+					{
+						if (Main.setting.IsCopper == 3) copper = WorldGen.genRand.NextBool() ? 7 : 166;
 						WorldGen.TileRunner(WorldGen.genRand.Next(0, Main.maxTilesX), WorldGen.genRand.Next((int)rockLayerLow, Main.maxTilesY), (double)WorldGen.genRand.Next(4, 9), WorldGen.genRand.Next(4, 8), copper, false, 0f, 0f, false, true);
 					}
-					for (int n = 0; n < (int)((double)(Main.maxTilesX * Main.maxTilesY) * 3E-05); n++)
-					{
+					for (int n = 0; n < (int)((double)(Main.maxTilesX * Main.maxTilesY) * 3E-05 * Main.setting.PercIron); n++)
+					{
+						if (Main.setting.IsIron == 3) iron = WorldGen.genRand.NextBool() ? 6 : 167;
 						WorldGen.TileRunner(WorldGen.genRand.Next(0, Main.maxTilesX), WorldGen.genRand.Next((int)WorldGen.worldSurfaceLow, (int)worldSurfaceHigh), (double)WorldGen.genRand.Next(3, 7), WorldGen.genRand.Next(2, 5), iron, false, 0f, 0f, false, true);
 					}
-					for (int num = 0; num < (int)((double)(Main.maxTilesX * Main.maxTilesY) * 8E-05); num++)
-					{
+					for (int num = 0; num < (int)((double)(Main.maxTilesX * Main.maxTilesY) * 8E-05 * Main.setting.PercIron); num++)
+					{
+						if (Main.setting.IsIron == 3) iron = WorldGen.genRand.NextBool() ? 6 : 167;
 						WorldGen.TileRunner(WorldGen.genRand.Next(0, Main.maxTilesX), WorldGen.genRand.Next((int)worldSurfaceHigh, (int)rockLayerHigh), (double)WorldGen.genRand.Next(3, 6), WorldGen.genRand.Next(3, 6), iron, false, 0f, 0f, false, true);
 					}
-					for (int num2 = 0; num2 < (int)((double)(Main.maxTilesX * Main.maxTilesY) * 0.0002); num2++)
-					{
+					for (int num2 = 0; num2 < (int)((double)(Main.maxTilesX * Main.maxTilesY) * 0.0002 * Main.setting.PercIron); num2++)
+					{
+						if (Main.setting.IsIron == 3) iron = WorldGen.genRand.NextBool() ? 6 : 167;
 						WorldGen.TileRunner(WorldGen.genRand.Next(0, Main.maxTilesX), WorldGen.genRand.Next((int)rockLayerLow, Main.maxTilesY), (double)WorldGen.genRand.Next(4, 9), WorldGen.genRand.Next(4, 8), iron, false, 0f, 0f, false, true);
 					}
-					for (int num3 = 0; num3 < (int)((double)(Main.maxTilesX * Main.maxTilesY) * 2.6E-05); num3++)
-					{
+					for (int num3 = 0; num3 < (int)((double)(Main.maxTilesX * Main.maxTilesY) * 2.6E-05 * Main.setting.PercSilv); num3++)
+					{
+						if (Main.setting.IsSilver == 3) silver = WorldGen.genRand.NextBool() ? 9 : 168;
 						WorldGen.TileRunner(WorldGen.genRand.Next(0, Main.maxTilesX), WorldGen.genRand.Next((int)worldSurfaceHigh, (int)rockLayerHigh), (double)WorldGen.genRand.Next(3, 6), WorldGen.genRand.Next(3, 6), silver, false, 0f, 0f, false, true);
 					}
-					for (int num4 = 0; num4 < (int)((double)(Main.maxTilesX * Main.maxTilesY) * 0.00015); num4++)
-					{
+					for (int num4 = 0; num4 < (int)((double)(Main.maxTilesX * Main.maxTilesY) * 0.00015 * Main.setting.PercSilv); num4++)
+					{
+						if (Main.setting.IsSilver == 3) silver = WorldGen.genRand.NextBool() ? 9 : 168;
 						WorldGen.TileRunner(WorldGen.genRand.Next(0, Main.maxTilesX), WorldGen.genRand.Next((int)rockLayerLow, Main.maxTilesY), (double)WorldGen.genRand.Next(4, 9), WorldGen.genRand.Next(4, 8), silver, false, 0f, 0f, false, true);
 					}
-					for (int num5 = 0; num5 < (int)((double)(Main.maxTilesX * Main.maxTilesY) * 0.00017); num5++)
-					{
+					for (int num5 = 0; num5 < (int)((double)(Main.maxTilesX * Main.maxTilesY) * 0.00017 * Main.setting.PercSilv); num5++)
+					{
+						if (Main.setting.IsSilver == 3) silver = WorldGen.genRand.NextBool() ? 9 : 168;
 						WorldGen.TileRunner(WorldGen.genRand.Next(0, Main.maxTilesX), WorldGen.genRand.Next(0, (int)WorldGen.worldSurfaceLow), (double)WorldGen.genRand.Next(4, 9), WorldGen.genRand.Next(4, 8), silver, false, 0f, 0f, false, true);
 					}
-					for (int num6 = 0; num6 < (int)((double)(Main.maxTilesX * Main.maxTilesY) * 0.00012); num6++)
-					{
+					for (int num6 = 0; num6 < (int)((double)(Main.maxTilesX * Main.maxTilesY) * 0.00012 * Main.setting.PercGold); num6++)
+					{
+						if (Main.setting.IsGold == 3) gold = WorldGen.genRand.NextBool() ? 8 : 169;
 						WorldGen.TileRunner(WorldGen.genRand.Next(0, Main.maxTilesX), WorldGen.genRand.Next((int)rockLayerLow, Main.maxTilesY), (double)WorldGen.genRand.Next(4, 8), WorldGen.genRand.Next(4, 8), gold, false, 0f, 0f, false, true);
 					}
-					for (int num7 = 0; num7 < (int)((double)(Main.maxTilesX * Main.maxTilesY) * 0.00012); num7++)
-					{
+					for (int num7 = 0; num7 < (int)((double)(Main.maxTilesX * Main.maxTilesY) * 0.00012 * Main.setting.PercGold); num7++)
+					{
+						if (Main.setting.IsGold == 3) gold = WorldGen.genRand.NextBool() ? 8 : 169;
 						WorldGen.TileRunner(WorldGen.genRand.Next(0, Main.maxTilesX), WorldGen.genRand.Next(0, (int)WorldGen.worldSurfaceLow - 20), (double)WorldGen.genRand.Next(4, 8), WorldGen.genRand.Next(4, 8), gold, false, 0f, 0f, false, true);
 					}
-					if (WorldGen.crimson)
-					{
-						for (int num8 = 0; num8 < (int)((double)(Main.maxTilesX * Main.maxTilesY) * 2E-05); num8++)
+					if ((WorldGen.crimson || Main.setting.IsCorruption == 3) && Main.setting.IsCorruption != 5)
+					{
+						for (int num8 = 0; num8 < (int)((double)(Main.maxTilesX * Main.maxTilesY) * 2E-05 * Main.setting.PercDemonite); num8++)
 						{
 							WorldGen.TileRunner(WorldGen.genRand.Next(0, Main.maxTilesX), WorldGen.genRand.Next((int)rockLayerLow, Main.maxTilesY), (double)WorldGen.genRand.Next(2, 4), WorldGen.genRand.Next(3, 6), 204, false, 0f, 0f, false, true);
 						}
-						return;
-					}
-					for (int num9 = 0; num9 < (int)((double)(Main.maxTilesX * Main.maxTilesY) * 2E-05); num9++)
+						//return;
+					}
+					if ((!WorldGen.crimson || Main.setting.IsCorruption == 4) && Main.setting.IsCorruption != 5)
+					for (int num9 = 0; num9 < (int)((double)(Main.maxTilesX * Main.maxTilesY) * 2E-05 * Main.setting.PercDemonite); num9++)
 					{
 						WorldGen.TileRunner(WorldGen.genRand.Next(0, Main.maxTilesX), WorldGen.genRand.Next((int)rockLayerLow, Main.maxTilesY), (double)WorldGen.genRand.Next(2, 4), WorldGen.genRand.Next(3, 6), 22, false, 0f, 0f, false, true);
 					}
@@ -6012,7 +_,8 @@
 			WorldGen.AddGenerationPass("Webs", delegate(GenerationProgress progress)
 				{
 					progress.Message = Lang.gen[17].Value;
-					for (int k = 0; k < (int)((double)(Main.maxTilesX * Main.maxTilesY) * 0.0006); k++)
+					if (Main.setting.WebMult <= 0) return;
+					for (int k = 0; k < (int)((double)(Main.maxTilesX * Main.maxTilesY) * 0.0006 * Main.setting.WebMult); k++)
 					{
 						int num = WorldGen.genRand.Next(20, Main.maxTilesX - 20);
 						int num2 = WorldGen.genRand.Next((int)worldSurfaceHigh, Main.maxTilesY - 20);
@@ -6056,6 +_,7 @@
 				});
 			WorldGen.AddGenerationPass("Underworld", delegate(GenerationProgress progress)
 				{
+					if (Main.setting.NoUnderworld) return;
 					progress.Message = Lang.gen[18].Value;
 					progress.Set(0f);
 					int num = Main.maxTilesY - WorldGen.genRand.Next(150, 190);
@@ -6172,16 +_,19 @@
 							Main.tile[num10, Main.maxTilesY - 144].lava(true);
 						}
 					}
-					for (int num11 = 0; num11 < (int)((double)(Main.maxTilesX * Main.maxTilesY) * 0.0008); num11++)
+					for (int num11 = 0; num11 < (int)((double)(Main.maxTilesX * Main.maxTilesY) * 0.0008 * Main.setting.PercHellstone); num11++)
 					{
 						WorldGen.TileRunner(WorldGen.genRand.Next(0, Main.maxTilesX), WorldGen.genRand.Next(Main.maxTilesY - 140, Main.maxTilesY), (double)WorldGen.genRand.Next(2, 7), WorldGen.genRand.Next(3, 7), 58, false, 0f, 0f, false, true);
 					}
-					WorldGen.AddHellHouses();
+					if (Main.setting.UnderworldHouseMult > 0)
+					{
+						WorldGen.AddHellHouses();
+					}
 				});
 			WorldGen.AddGenerationPass("Lakes", delegate(GenerationProgress progress)
 				{
 					progress.Message = Lang.gen[19].Value;
-					int num = WorldGen.genRand.Next(2, (int)((double)Main.maxTilesX * 0.005));
+					int num = WorldGen.genRand.Next(2, (int)((double)Main.maxTilesX * 0.005 * Main.setting.LakeMultiplier));
 					for (int k = 0; k < num; k++)
 					{
 						float value = (float)k / (float)num;
@@ -6190,6 +_,7 @@
 						while (num2 > Main.maxTilesX / 2 - 100 && num2 < Main.maxTilesX / 2 + 100)
 						{
 							num2 = WorldGen.genRand.Next(300, Main.maxTilesX - 300);
+							if (Main.maxTilesX <= 600) num2 = WorldGen.genRand.Next(0, Main.maxTilesX);
 						}
 						int num3 = (int)WorldGen.worldSurfaceLow - 20;
 						while (!Main.tile[num2, num3].active())
@@ -6201,6 +_,7 @@
 				});
 			WorldGen.AddGenerationPass("Dungeon", delegate(GenerationProgress progress)
 				{
+					progress.Message = Lang.gen[58].Value;
 					int x;
 					if (dungeonSide == -1)
 					{
@@ -6213,17 +_,32 @@
 						dungeonSide = 1;
 					}
 					int y = (int)((Main.worldSurface + Main.rockLayer) / 2.0) + WorldGen.genRand.Next(-200, 200);
-					WorldGen.MakeDungeon(x, y);
+					if (!InWorldY(y, 0)) y = (int)((Main.worldSurface + Main.rockLayer) / 2.0);
+					if (!Main.setting.NoDungeon) {
+						WorldGen.MakeDungeon(x, y, progress);
+					}
+					if (Main.setting.DoubleDungeon == true)
+					{
+						if (dungeonSide == 1) {
+							x = WorldGen.genRand.Next((int)((double)Main.maxTilesX * 0.05), (int)((double)Main.maxTilesX * 0.2));
+						}
+						else {
+							x = WorldGen.genRand.Next((int)((double)Main.maxTilesX * 0.8), (int)((double)Main.maxTilesX * 0.95));
+						}
+						y = (int)((Main.worldSurface + Main.rockLayer) / 2.0) + WorldGen.genRand.Next(-200, 200);
+						if (!InWorldY(y, 0)) y = (int)((Main.worldSurface + Main.rockLayer) / 2.0);
+						WorldGen.MakeDungeon(x, y, progress);
+					}
 				});
 			WorldGen.AddGenerationPass("Corruption", delegate(GenerationProgress progress)
 				{
-					if (WorldGen.crimson)
+					if ((WorldGen.crimson || Main.setting.IsCorruption == 3) && Main.setting.IsCorruption != 5)
 					{
 						progress.Message = Lang.gen[72].Value;
 						int num = 0;
-						while ((double)num < (double)Main.maxTilesX * 0.00045)
-						{
-							float value = (float)((double)num / ((double)Main.maxTilesX * 0.00045));
+						while ((double)num < (double)Main.maxTilesX * 0.00045 * Main.setting.CrimsonMultiplier)
+						{
+							float value = (float)((double)num / ((double)Main.maxTilesX * 0.00045 * Main.setting.CrimsonMultiplier));
 							progress.Set(value);
 							bool flag2 = false;
 							int num2 = 0;
@@ -6238,28 +_,94 @@
 								if (dungeonSide < 0)
 								{
 									num2 = WorldGen.genRand.Next(600, Main.maxTilesX - 320);
+									if (Main.maxTilesY < 1000) num2 = WorldGen.genRand.Next(100, Main.maxTilesX - 50);
 								}
 								else
 								{
 									num2 = WorldGen.genRand.Next(320, Main.maxTilesX - 600);
-								}
-								num3 = num2 - WorldGen.genRand.Next(200) - 100;
-								num4 = num2 + WorldGen.genRand.Next(200) + 100;
-								if (num3 < 285)
-								{
-									num3 = 285;
-								}
-								if (num4 > Main.maxTilesX - 285)
-								{
-									num4 = Main.maxTilesX - 285;
-								}
-								if (dungeonSide < 0 && num3 < 400)
-								{
-									num3 = 400;
-								}
-								else if (dungeonSide > 0 && num3 > Main.maxTilesX - 400)
-								{
-									num3 = Main.maxTilesX - 400;
+									if (Main.maxTilesY < 1000) num2 = WorldGen.genRand.Next(50, Main.maxTilesX - 100);
+								}
+								// I don't like this ugly diff...
+								if (Main.setting.CrimsonCorruptionAvoidJungle)
+								{
+									if (dungeonSide == -1) // dungeon on left side, so place on left side
+									{
+										if (num2 > Main.maxTilesX / 2)
+										{
+											flag2 = false;
+											continue;
+										}
+									}
+									else
+									{
+										if (num2 < Main.maxTilesX / 2)
+										{
+											flag2 = false;
+											continue;
+										}
+									}
+								}
+								if (Main.setting.CrimsonCorruptionAvoidEachOther)
+								{
+									if (crimsonSide == -1) // Crimson on left
+									{
+										if (num2 > Main.maxTilesX / 2)
+										{
+											flag2 = false;
+											continue;
+										}
+									}
+									else if (crimsonSide == 1)
+									{
+										if (num2 < Main.maxTilesX / 2)
+										{
+											flag2 = false;
+											continue;
+										}
+									}
+								}
+								if (Main.maxTilesY < 1000)
+								{
+									num3 = num2 - WorldGen.genRand.Next(50) - 50;
+									num4 = num2 + WorldGen.genRand.Next(50) + 50;
+									if (num3 < 50)
+									{
+										num3 = 50;
+									}
+									if (num4 > Main.maxTilesX - 50)
+									{
+										num4 = Main.maxTilesX - 50;
+									}
+									if (dungeonSide < 0 && num3 < 50)
+									{
+										num3 = 50;
+									}
+									else if (dungeonSide > 0 && num3 > Main.maxTilesX - 50)
+									{
+										num3 = Main.maxTilesX - 50;
+									}
+									num7 = 50;
+								}
+								else
+								{
+									num3 = num2 - WorldGen.genRand.Next(200) - 100;
+									num4 = num2 + WorldGen.genRand.Next(200) + 100;
+									if (num3 < 285)
+									{
+										num3 = 285;
+									}
+									if (num4 > Main.maxTilesX - 285)
+									{
+										num4 = Main.maxTilesX - 285;
+									}
+									if (dungeonSide < 0 && num3 < 400)
+									{
+										num3 = 400;
+									}
+									else if (dungeonSide > 0 && num3 > Main.maxTilesX - 400)
+									{
+										num3 = Main.maxTilesX - 400;
+									}
 								}
 								if (num2 > num6 - num7 && num2 < num6 + num7)
 								{
@@ -6317,7 +_,7 @@
 										int num9 = num8 + WorldGen.genRand.Next(10, 14);
 										for (int n = num8; n < num9; n++)
 										{
-											if ((Main.tile[m, n].type == 59 || Main.tile[m, n].type == 60) && m >= num3 + WorldGen.genRand.Next(5) && m < num4 - WorldGen.genRand.Next(5))
+											if ((Main.tile[m, n].type == 59 || Main.tile[m, n].type == 60 || Main.tile[m, n].type == 70) && m >= num3 + WorldGen.genRand.Next(5) && m < num4 - WorldGen.genRand.Next(5))
 											{
 												Main.tile[m, n].type = 0;
 											}
@@ -6438,13 +_,16 @@
 							}
 							num++;
 						}
-						return;
-					}
+						//return;
+					}
+					if ((!WorldGen.crimson || Main.setting.IsCorruption == 4) && Main.setting.IsCorruption != 5)
+					{
+					// Making the world evil -- corruption
 					progress.Message = Lang.gen[20].Value;
 					int num19 = 0;
-					while ((double)num19 < (double)Main.maxTilesX * 0.00045)
-					{
-						float value2 = (float)((double)num19 / ((double)Main.maxTilesX * 0.00045));
+					while ((double)num19 < (double)Main.maxTilesX * 0.00045 * Main.setting.CorruptionMultiplier)
+					{
+						float value2 = (float)((double)num19 / ((double)Main.maxTilesX * 0.00045 * Main.setting.CorruptionMultiplier));
 						progress.Set(value2);
 						bool flag5 = false;
 						int num20 = 0;
@@ -6459,6 +_,51 @@
 							num20 = WorldGen.genRand.Next(320, Main.maxTilesX - 320);
 							num21 = num20 - WorldGen.genRand.Next(200) - 100;
 							num22 = num20 + WorldGen.genRand.Next(200) + 100;
+							if (Main.maxTilesX <= 640)
+							{
+								num20 = WorldGen.genRand.Next(100, Main.maxTilesX - 100);
+								num21 = num20 - WorldGen.genRand.Next(50) - 50;
+								num22 = num20 + WorldGen.genRand.Next(50) + 50;
+								num25 = 50;
+							}
+							if (Main.setting.CrimsonCorruptionAvoidJungle)
+							{
+								if (dungeonSide == -1) // dungeon on left side, so place on left side
+								{
+									if (num20 > Main.maxTilesX / 2)
+									{
+										flag5 = false;
+										continue;
+									}
+								}
+								else
+								{
+									if (num20 < Main.maxTilesX / 2)
+									{
+										flag5 = false;
+										continue;
+									}
+								}
+							}
+							if (Main.setting.CrimsonCorruptionAvoidEachOther)
+							{
+								if (crimsonSide == -1) // Crimson on left
+								{
+									if (num20 < Main.maxTilesX / 2)
+									{
+										flag5 = false;
+										continue;
+									}
+								}
+								else if (crimsonSide == 1)
+								{
+									if (num20 > Main.maxTilesX / 2)
+									{
+										flag5 = false;
+										continue;
+									}
+								}
+							}
 							if (num21 < 285)
 							{
 								num21 = 285;
@@ -6466,6 +_,10 @@
 							if (num22 > Main.maxTilesX - 285)
 							{
 								num22 = Main.maxTilesX - 285;
+							}
+							if (Main.maxTilesX < 1000)
+							{
+								num21 = Utils.Clamp(num21, 50, Main.maxTilesX - 50);
 							}
 							if (num20 > num24 - num25 && num20 < num24 + num25)
 							{
@@ -6555,7 +_,7 @@
 									int num32 = num31 + WorldGen.genRand.Next(10, 14);
 									for (int num33 = num31; num33 < num32; num33++)
 									{
-										if ((Main.tile[num29, num33].type == 59 || Main.tile[num29, num33].type == 60) && num29 >= num21 + WorldGen.genRand.Next(5) && num29 < num22 - WorldGen.genRand.Next(5))
+										if ((Main.tile[num29, num33].type == 59 || Main.tile[num29, num33].type == 60 || Main.tile[num29, num33].type == 70) && num29 >= num21 + WorldGen.genRand.Next(5) && num29 < num22 - WorldGen.genRand.Next(5))
 										{
 											Main.tile[num29, num33].type = 0;
 										}
@@ -6630,7 +_,7 @@
 						{
 							for (int num38 = 0; num38 < Main.maxTilesY - 50; num38++)
 							{
-								if (Main.tile[num37, num38].active() && Main.tile[num37, num38].type == 31)
+								if (Main.tile[num37, num38].active() && Main.tile[num37, num38].type == 31 && Main.tile[num37, num38].frameX < 36) // Add check to prevent ebonstone around crimson hearts.
 								{
 									int num39 = num37 - 13;
 									int num40 = num37 + 13;
@@ -6663,6 +_,7 @@
 						}
 						num19++;
 					}
+					}
 				});
 			WorldGen.AddGenerationPass("Slush", delegate(GenerationProgress progress)
 				{
@@ -6683,7 +_,7 @@
 								{
 									for (int n = k - num; n <= k + num; n++)
 									{
-										if (Main.tile[m, n].type == 60 || Main.tile[m, n].type == 70 || Main.tile[m, n].type == 71 || Main.tile[m, n].type == 72)
+										if (InWorld(m, n) && (Main.tile[m, n].type == 60 || Main.tile[m, n].type == 70 || Main.tile[m, n].type == 71 || Main.tile[m, n].type == 72))
 										{
 											flag2 = false;
 											break;
@@ -6715,6 +_,7 @@
 				});
 			WorldGen.AddGenerationPass("Beaches", delegate(GenerationProgress progress)
 				{
+					if (Main.setting.NoBeach) return;
 					int num = 0;
 					int num2 = 0;
 					int num3 = 20;
@@ -6726,9 +_,11 @@
 						{
 							int num5 = 0;
 							int num6 = WorldGen.genRand.Next(125, 200) + 50;
+							num6 = (int)(num6 * Main.setting.BeachSizeMultiplier);
 							if (dungeonSide == 1)
 							{
 								num6 = 275;
+								num6 = (int)(num6 * Main.setting.BeachSizeMultiplier);
 							}
 							int num7 = 0;
 							float num8 = 1f;
@@ -6842,11 +_,11 @@
 						}
 						else
 						{
-							int num5 = Main.maxTilesX - WorldGen.genRand.Next(125, 200) - 50;
+							int num5 = Main.maxTilesX - (int)((WorldGen.genRand.Next(125, 200) - 50) * Main.setting.BeachSizeMultiplier);
 							int num6 = Main.maxTilesX;
 							if (dungeonSide == -1)
 							{
-								num5 = Main.maxTilesX - 275;
+								num5 = Main.maxTilesX - (int)(275 * Main.setting.BeachSizeMultiplier);
 							}
 							float num12 = 1f;
 							int num13 = 0;
@@ -6968,6 +_,7 @@
 				});
 			WorldGen.AddGenerationPass("Gems", delegate(GenerationProgress progress)
 				{
+					// TODO non-gemcave gems?
 					progress.Message = Lang.gen[23].Value;
 					for (int k = 63; k <= 68; k++)
 					{
@@ -6997,6 +_,7 @@
 							num = (float)Main.maxTilesX * 0.05f;
 						}
 						num *= 0.2f;
+						num *= Main.setting.GemMultiplier;
 						int num2 = 0;
 						while ((float)num2 < num)
 						{
@@ -7050,6 +_,7 @@
 			WorldGen.AddGenerationPass("Gravitating Sand", delegate(GenerationProgress progress)
 				{
 					progress.Message = Lang.gen[24].Value;
+					if (Main.setting.NoGravitate == true) return;
 					for (int k = 0; k < Main.maxTilesX; k++)
 					{
 						float value = (float)k / (float)(Main.maxTilesX - 1);
@@ -7213,7 +_,49 @@
 									if (num3 >= 250)
 									{
 										num2--;
-										WorldGen.Pyramid(num, num2);
+										if (Main.setting.IsPyramid != 0)
+										{
+											WorldGen.Pyramid(num, num2);
+										}
+									}
+								}
+							}
+						}
+					}
+					if (Main.setting.IsPyramid == 1 && WorldGen.numPyramids <= 0)
+					{
+						for (int k = 0; k < numPyr; k++)
+						{
+							int num = PyrX[k];
+							int num2 = PyrY[k];
+							if (num > 300 && num < Main.maxTilesX - 300 && (dungeonSide >= 0 || (double)num >= (double)WorldGen.dungeonX + (double)Main.maxTilesX * 0.15))
+							{
+								if (dungeonSide <= 0 || (double)num <= (double)WorldGen.dungeonX - (double)Main.maxTilesX * 0.15)
+								{
+									while (!Main.tile[num, num2].active() && (double)num2 < Main.worldSurface)
+									{
+										num2++;
+									}
+									if ((double)num2 < Main.worldSurface && Main.tile[num, num2].type == 53)
+									{
+										int num3 = Main.maxTilesX;
+										for (int l = 0; l < k; l++)
+										{
+											int num4 = Math.Abs(num - PyrX[l]);
+											if (num4 < num3)
+											{
+												num3 = num4;
+											}
+										}
+										if (num3 >= 250)
+										{
+											num2--;
+											if (Main.setting.IsPyramid != 0)
+											{
+												WorldGen.Pyramid(num, num2);
+												break;
+											}
+										}
 									}
 								}
 							}
@@ -7234,8 +_,13 @@
 				});
 			WorldGen.AddGenerationPass("Living Trees", delegate(GenerationProgress progress)
 				{
-					float num = (float)(Main.maxTilesX / 4200);
+					float num = ((float)Main.maxTilesX / 4200 * Main.setting.GiantTreeMult);
 					int num2 = WorldGen.genRand.Next(0, (int)(3f * num));
+					if (Main.setting.IsGiantTree == 1)
+					{
+						// TODO, slider for Living Trees.
+						num2 = 1 + (int)(3f * num);
+					}
 					for (int k = 0; k < num2; k++)
 					{
 						bool flag2 = false;
@@ -7275,7 +_,7 @@
 												}
 											}
 										}
-										if (flag3)
+										if (flag3 && Main.setting.IsGiantTree != 0)
 										{
 											flag2 = WorldGen.GrowLivingTree(num4, num5);
 										}
@@ -7327,10 +_,17 @@
 							int num2 = WorldGen.genRand.Next(1, Main.maxTilesX - 3);
 							int num3 = (int)(worldSurfaceHigh + 20.0);
 							int style = WorldGen.crimson ? 1 : 0;
-							WorldGen.Place3x2(num2, num3, 26, style);
-							if (Main.tile[num2, num3].type == 26)
-							{
-								break;
+							if (Main.setting.IsCorruption == 3 || Main.setting.IsCorruption == 4)
+							{
+								style = WorldGen.genRand.Next(2); // TODO Fix altars to be correct maybe?
+							}
+							if (!Main.setting.NoAltar)
+							{
+								WorldGen.Place3x2(num2, num3, 26, style);
+								if (Main.tile[num2, num3].type == 26)
+								{
+									break;
+								}
 							}
 						}
 					}
@@ -7393,11 +_,15 @@
 				});
 			WorldGen.AddGenerationPass("Jungle Temple", delegate(GenerationProgress progress)
 				{
+					if (Main.setting.NoJungle) return;
+					//if (Main.setting.) -- i will return to this idea -greenbiridmusic
+					//for (int tottemples = 0, tottemples < Main.setting., tottemples++ )
 					progress.Message = Lang.gen[70].Value;
 					bool flag2 = true;
 					while (flag2)
 					{
 						int num = WorldGen.genRand.Next((int)Main.rockLayer, Main.maxTilesY - 500);
+						if (Main.maxTilesY < 1000) num = WorldGen.genRand.Next((int)Main.rockLayer, Main.maxTilesY - 200);
 						int num2;
 						if (dungeonSide < 0)
 						{
@@ -7410,15 +_,21 @@
 						if (Main.tile[num2, num].active() && Main.tile[num2, num].type == 60)
 						{
 							flag2 = false;
-							WorldGen.makeTemple(num2, num);
+							if (!Main.setting.NoTemple)
+							{
+								WorldGen.makeTemple(num2, num);
+							}
 						}
 					}
 				});
 			WorldGen.AddGenerationPass("Hives", delegate(GenerationProgress progress)
 				{
+					if (Main.setting.NoHive || Main.setting.NoJungle) return;
+					// TODO Hives Ammount
 					progress.Message = Lang.gen[71].Value;
-					float num = (float)(Main.maxTilesX / 4200);
+					float num = ((float)Main.maxTilesX / 4200);
 					float num2 = (float)(1 + WorldGen.genRand.Next((int)(5f * num), (int)(8f * num)));
+					num2 *= Main.setting.HiveMultiplier;
 					int num3 = 10000;
 					while (num2 > 0f && num3 > 0)
 					{
@@ -7449,8 +_,10 @@
 				{
 					int num = WorldGen.genRand.Next(40, Main.maxTilesX - 40);
 					int num2 = WorldGen.genRand.Next((int)(Main.worldSurface + Main.rockLayer) / 2, Main.maxTilesY - 400);
+					if (Main.maxTilesY < 1000) num2 = WorldGen.genRand.Next((int)(Main.worldSurface + Main.rockLayer) / 2, Main.maxTilesY - 100);
 					float num3 = (float)WorldGen.genRand.Next(7, 12);
-					num3 *= (float)(Main.maxTilesX / 4200);
+					num3 *= ((float)Main.maxTilesX / 4200);
+					num3 *= Main.setting.JungleShrineMultiplier;
 					int num4 = 0;
 					while ((float)num4 < num3)
 					{
@@ -7487,6 +_,30 @@
 								int m = WorldGen.genRand.Next(2, 4);
 								int num6 = WorldGen.genRand.Next(2, 4);
 								int num7 = 0;
+								if (Main.setting.ShrineType == 6)
+								{
+									jungleHut = (ushort)WorldGen.genRand.Next(5);
+									if (jungleHut == 0)
+									{
+										jungleHut = 119;
+									}
+									else if (jungleHut == 1)
+									{
+										jungleHut = 120;
+									}
+									else if (jungleHut == 2)
+									{
+										jungleHut = 158;
+									}
+									else if (jungleHut == 3)
+									{
+										jungleHut = 175;
+									}
+									else if (jungleHut == 4)
+									{
+										jungleHut = 45;
+									}
+								}
 								if (jungleHut == 119)
 								{
 									num7 = 23;
@@ -7936,9 +_,9 @@
 			WorldGen.AddGenerationPass("Traps", delegate(GenerationProgress progress)
 				{
 					progress.Message = Lang.gen[34].Value;
-					for (int k = 0; k < (int)((double)Main.maxTilesX * 0.05); k++)
-					{
-						float value = (float)((double)k / ((double)Main.maxTilesX * 0.05));
+					for (int k = 0; k < (int)((double)Main.maxTilesX * 0.05 * Main.setting.TrapMultiplier); k++)
+					{
+						float value = (float)((double)k / ((double)Main.maxTilesX * 0.05 * Main.setting.TrapMultiplier));
 						progress.Set(value);
 						for (int l = 0; l < 1150; l++)
 						{
@@ -7950,14 +_,75 @@
 							}
 						}
 					}
+					progress.Message = "Placing more traps: Dart";
+					for (int k = 0; k < (int)((double)Main.maxTilesX * 0.05 * Main.setting.AdditionalDartTrapMultiplier); k++)
+					{
+						float value = (float)((double)k / ((double)Main.maxTilesX * 0.05 * Main.setting.AdditionalDartTrapMultiplier));
+						progress.Set(value);
+						for (int l = 0; l < 1000; l++)
+						{
+							int num = WorldGen.genRand.Next(200, Main.maxTilesX - 200);
+							int num2 = WorldGen.genRand.Next((int)Main.worldSurface, Main.maxTilesY - 300);
+							if (Main.tile[num, num2].wall == 0 && WorldGen.placeTrap(num, num2, 0))
+							{
+								break;
+							}
+						}
+					}
+					progress.Message = "Placing more traps: Boulder";
+					for (int k = 0; k < (int)((double)Main.maxTilesX * 0.05 * Main.setting.AdditionalBoulderTrapMultiplier); k++)
+					{
+						float value = (float)((double)k / ((double)Main.maxTilesX * 0.05 * Main.setting.AdditionalBoulderTrapMultiplier));
+						progress.Set(value);
+						for (int l = 0; l < 1000; l++)
+						{
+							int num = WorldGen.genRand.Next(200, Main.maxTilesX - 200);
+							int num2 = WorldGen.genRand.Next((int)Main.worldSurface, Main.maxTilesY - 300);
+							if (Main.tile[num, num2].wall == 0 && WorldGen.placeTrap(num, num2, 1))
+							{
+								break;
+							}
+						}
+					}
+					progress.Message = "Placing more traps: Explosive";
+					for (int k = 0; k < (int)((double)Main.maxTilesX * 0.05 * Main.setting.AdditionalExplosiveTrapMultiplier); k++)
+					{
+						float value = (float)((double)k / ((double)Main.maxTilesX * 0.05 * Main.setting.AdditionalExplosiveTrapMultiplier));
+						progress.Set(value);
+						for (int l = 0; l < 10000; l++)
+						{
+							int num = WorldGen.genRand.Next(200, Main.maxTilesX - 200);
+							int num2 = WorldGen.genRand.Next((int)Main.worldSurface, Main.maxTilesY - 300);
+							if (Main.tile[num, num2].wall == 0 && WorldGen.placeTrap(num, num2, 2))
+							{
+								break;
+							}
+						}
+					}
+					progress.Message = "Placing more traps: Geyser";
+					for (int k = 0; k < (int)((double)Main.maxTilesX * 0.05 * Main.setting.AdditionalGeyserTrapMultiplier); k++)
+					{
+						float value = (float)((double)k / ((double)Main.maxTilesX * 0.05 * Main.setting.AdditionalGeyserTrapMultiplier));
+						progress.Set(value);
+						for (int l = 0; l < 10000; l++)
+						{
+							int num = WorldGen.genRand.Next(200, Main.maxTilesX - 200);
+							int num2 = WorldGen.genRand.Next(WorldGen.lavaLine + 30, Main.maxTilesY - 300);
+							if (Main.tile[num, num2].wall == 0 && WorldGen.placeTrap(num, num2, 3))
+							{
+								break;
+							}
+						}
+					}
+					Tile.WireTypeOverride = -1;
 				});
 			WorldGen.AddGenerationPass("Life Crystals", delegate(GenerationProgress progress)
 				{
-					dub2 = (float)(Main.maxTilesX / 4200);
+					dub2 = ((float)Main.maxTilesX / 4200);
 					progress.Message = Lang.gen[28].Value;
-					for (int k = 0; k < (int)((double)(Main.maxTilesX * Main.maxTilesY) * 2E-05); k++)
-					{
-						float value = (float)((double)k / ((double)(Main.maxTilesX * Main.maxTilesY) * 2E-05));
+					for (int k = 0; k < (int)((double)(Main.maxTilesX * Main.maxTilesY) * 2E-05 * Main.setting.CrystalHeartMultiplier); k++)
+					{
+						float value = (float)((double)k / ((double)(Main.maxTilesX * Main.maxTilesY) * 2E-05 * Main.setting.CrystalHeartMultiplier));
 						progress.Set(value);
 						bool flag2 = false;
 						int num = 0;
@@ -7983,7 +_,7 @@
 				{
 					progress.Message = Lang.gen[29].Value;
 					int num = 0;
-					int num2 = (int)((float)(WorldGen.statueList.Length * 2) * dub2);
+					int num2 = (int)((float)(WorldGen.statueList.Length * 2) * dub2 * Main.setting.StatueMultiplier);
 					for (int k = 0; k < num2; k++)
 					{
 						if (num >= WorldGen.statueList.Length)
@@ -8032,15 +_,16 @@
 					Main.tileSolid[226] = true;
 					Main.tileSolid[162] = true;
 					Main.tileSolid[225] = true;
-					for (int k = 0; k < (int)((double)(Main.maxTilesX * Main.maxTilesY) * 1.6E-05); k++)
-					{
-						float value = (float)((double)k / ((double)(Main.maxTilesX * Main.maxTilesY) * 1.6E-05));
+					// Remove shadow chests from here
+					for (int k = 0; k < (int)((double)(Main.maxTilesX * Main.maxTilesY) * 1.6E-05 * Main.setting.UndergroundCabinMultiplier); k++)
+					{
+						float value = (float)((double)k / ((double)(Main.maxTilesX * Main.maxTilesY) * 1.6E-05 * Main.setting.UndergroundCabinMultiplier));
 						progress.Set(value);
 						bool flag2 = false;
 						int num = 0;
 						while (!flag2)
 						{
-							float num2 = (float)WorldGen.genRand.Next((int)(5f * dub2), (int)(8f * dub2 + 1f));
+							float num2 = (float)WorldGen.genRand.Next((int)(5f * dub2), (int)(8f * dub2 + 1f)); // number of shadow chests
 							int num3 = WorldGen.genRand.Next(20, Main.maxTilesX - 20);
 							int num4 = WorldGen.genRand.Next((int)(worldSurfaceHigh + 20.0), Main.maxTilesY - 230);
 							if ((float)k <= num2)
@@ -8071,7 +_,7 @@
 									}
 								}
 							}
-							else if (WorldGen.AddBuriedChest(num3, num4, 0, false, -1))
+							else /*if (WorldGen.AddBuriedChest(num3, num4, 0, false, -1))*/
 							{
 								flag2 = true;
 							}
@@ -8082,7 +_,33 @@
 							}
 						}
 					}
-					int num6 = (int)(2f * (float)(Main.maxTilesX * Main.maxTilesY) / 5040000f);
+					// Shadow only
+					float numberShadowChests = (float)WorldGen.genRand.Next((int)(5f * dub2 * Main.setting.ShadowChestMultiplier), (int)(8f * dub2 * Main.setting.ShadowChestMultiplier + 1f)); // number of shadow chests
+					for (int k = 0; k < numberShadowChests; k++)
+					{
+						bool flag2 = false;
+						int num = 0;
+						while (!flag2)
+						{
+							int num3 = WorldGen.genRand.Next(20, Main.maxTilesX - 20);
+							int num4 = WorldGen.genRand.Next(Main.maxTilesY - 200, Main.maxTilesY - 50);
+							while (Main.wallDungeon[(int)Main.tile[num3, num4].wall])
+							{
+								num3 = WorldGen.genRand.Next(1, Main.maxTilesX);
+								num4 = WorldGen.genRand.Next(Main.maxTilesY - 200, Main.maxTilesY - 50);
+							}
+							if (WorldGen.AddBuriedChest(num3, num4, 0, false, -1))
+							{
+								flag2 = true;
+							}
+							num++;
+							if (num >= 1000)
+							{
+								flag2 = true;
+							}
+						}
+					}
+					int num6 = (int)(Main.setting.UndergroundCabinMultiplier * 2f * (float)(Main.maxTilesX * Main.maxTilesY) / 5040000f);
 					int num7 = 1000;
 					while (num7 >= 0 && num6 >= 0)
 					{
@@ -8099,9 +_,9 @@
 			WorldGen.AddGenerationPass("Surface Chests", delegate(GenerationProgress progress)
 				{
 					progress.Message = Lang.gen[31].Value;
-					for (int k = 0; k < (int)((double)Main.maxTilesX * 0.005); k++)
-					{
-						float value = (float)((double)k / ((double)Main.maxTilesX * 0.005));
+					for (int k = 0; k < (int)((double)Main.maxTilesX * 0.005 * Main.setting.SurfaceChestMultiplier); k++)
+					{
+						float value = (float)((double)k / ((double)Main.maxTilesX * 0.005 * Main.setting.SurfaceChestMultiplier));
 						progress.Set(value);
 						bool flag2 = false;
 						int num = 0;
@@ -8163,12 +_,13 @@
 				});
 			WorldGen.AddGenerationPass("Water Chests", delegate(GenerationProgress progress)
 				{
+					if (Main.setting.NoChest) return;
 					progress.Message = Lang.gen[33].Value;
 					int num = 0;
 					int num2 = 0;
-					while ((float)num2 < 9f * dub2)
-					{
-						float value = (float)num2 / (9f * dub2);
+					while ((float)num2 < 9f * dub2 * Main.setting.WaterChestMultiplier)
+					{
+						float value = (float)num2 / (9f * dub2 * Main.setting.WaterChestMultiplier);
 						progress.Set(value);
 						num++;
 						int contain;
@@ -8218,11 +_,12 @@
 				});
 			WorldGen.AddGenerationPass("Spider Caves", delegate(GenerationProgress progress)
 				{
+					if (Main.setting.NoSpiderCave) return;
 					progress.Message = Lang.gen[64].Value;
 					WorldGen.maxTileCount = 3500;
-					for (int k = 0; k < (int)((double)Main.maxTilesX * 0.005); k++)
-					{
-						float value = (float)((double)k / ((double)Main.maxTilesX * 0.005));
+					for (int k = 0; k < (int)((double)Main.maxTilesX * 0.005 * Main.setting.SpiderCaveMultiplier); k++)
+					{
+						float value = (float)((double)k / ((double)Main.maxTilesX * 0.005 * Main.setting.SpiderCaveMultiplier));
 						progress.Set(value);
 						int num = 0;
 						int x = WorldGen.genRand.Next(200, Main.maxTilesX - 200);
@@ -8245,16 +_,18 @@
 			WorldGen.AddGenerationPass("Gem Caves", delegate(GenerationProgress progress)
 				{
 					progress.Message = Lang.gen[64].Value;
-					WorldGen.maxTileCount = 300;
-					for (int k = 0; k < (int)((double)Main.maxTilesX * 0.003); k++)
-					{
-						float value = (float)((double)k / ((double)Main.maxTilesX * 0.003));
+					WorldGen.maxTileCount = (int)(300 * Main.setting.GemCaveSizeMultiplier);
+					WorldGen.countX = new int[WorldGen.maxTileCount];
+					WorldGen.countY = new int[WorldGen.maxTileCount];
+					for (int k = 0; k < (int)((double)Main.maxTilesX * 0.003 * Main.setting.GemCaveMultiplier); k++)
+					{
+						float value = (float)((double)k / ((double)Main.maxTilesX * 0.003 * Main.setting.GemCaveMultiplier));
 						progress.Set(value);
 						int num = 0;
 						int x = WorldGen.genRand.Next(200, Main.maxTilesX - 200);
 						int y = WorldGen.genRand.Next((int)Main.rockLayer + 30, Main.maxTilesY - 230);
 						int num2 = WorldGen.countTiles(x, y, false, false);
-						while ((num2 >= 300 || num2 < 50 || WorldGen.lavaCount > 0 || WorldGen.iceCount > 0 || WorldGen.rockCount == 0) && num < 1000)
+						while ((num2 >= (int)(300 * Main.setting.GemCaveSizeMultiplier) || num2 < 50 || WorldGen.lavaCount > 0 || WorldGen.iceCount > 0 || WorldGen.rockCount == 0) && num < 1000)
 						{
 							num++;
 							x = WorldGen.genRand.Next(200, Main.maxTilesX - 200);
@@ -8266,6 +_,8 @@
 							WorldGen.gemCave(x, y);
 						}
 					}
+					WorldGen.countX = new int[3500];
+					WorldGen.countY = new int[3500];
 				});
 			WorldGen.AddGenerationPass("Moss", delegate(GenerationProgress progress)
 				{
@@ -8495,7 +_,7 @@
 					{
 						for (int l = (int)Main.worldSurface - 1; l < Main.maxTilesY - 350; l++)
 						{
-							if (WorldGen.genRand.Next(10) == 0)
+							if (WorldGen.genRand.Next(10) == 0 && !Main.setting.NoTree) // The trees in underground jungle
 							{
 								WorldGen.GrowUndergroundTree(k, l);
 							}
@@ -8553,9 +_,9 @@
 					Main.tileSolid[137] = true;
 					Main.tileSolid[130] = true;
 					progress.Message = Lang.gen[35].Value;
-					for (int k = 0; k < (int)((double)(Main.maxTilesX * Main.maxTilesY) * 0.0008); k++)
-					{
-						float num = (float)((double)k / ((double)(Main.maxTilesX * Main.maxTilesY) * 0.0008));
+					for (int k = 0; k < (int)((double)(Main.maxTilesX * Main.maxTilesY) * 0.0008 * Main.setting.PotsMultiplier); k++)
+					{
+						float num = (float)((double)k / ((double)(Main.maxTilesX * Main.maxTilesY) * 0.0008 * Main.setting.PotsMultiplier));
 						progress.Set(num);
 						bool flag2 = false;
 						int num2 = 0;
@@ -8643,6 +_,7 @@
 				});
 			WorldGen.AddGenerationPass("Hellforge", delegate(GenerationProgress progress)
 				{
+					if (Main.setting.NoUnderworld) return;
 					progress.Message = Lang.gen[36].Value;
 					for (int k = 0; k < Main.maxTilesX / 200; k++)
 					{
@@ -9315,6 +_,7 @@
 						}
 					}
 				});
+			// TODO Spawn Choices?
 			WorldGen.AddGenerationPass("Spawn Point", delegate(GenerationProgress progress)
 				{
 					int num = 5;
@@ -9504,7 +_,7 @@
 						for (int k = num2 - num3; k < num2 + num3; k++)
 						{
 							int num4 = 20;
-							while ((double)num4 < Main.worldSurface)
+							while ((double)num4 < Main.worldSurface && !Main.setting.NoTree)
 							{
 								WorldGen.GrowEpicTree(k, num4);
 								num4++;
@@ -9512,7 +_,10 @@
 						}
 						num++;
 					}
-					WorldGen.AddTrees();
+					if (!Main.setting.NoTree)
+					{
+						WorldGen.AddTrees();
+					}
 				});
 			WorldGen.AddGenerationPass("Herbs", delegate(GenerationProgress progress)
 				{
@@ -9942,6 +_,7 @@
 								{
 									if (!Main.tile[k, l].active())
 									{
+										// TODO Exposed Gems in ice.
 										WorldGen.PlaceTile(k, l, 178, true, false, -1, style);
 									}
 								}
@@ -9984,6 +_,7 @@
 							{
 								style = 5;
 							}
+							// TODO Exposed Gems.
 							WorldGen.PlaceTile(num, num2, 178, true, false, -1, style);
 						}
 					}
@@ -10252,7 +_,6 @@
 								int num7 = 0;
 								int num8 = k;
 								num7 += num6 / 2;
-								num7 = (WorldGen.crimson ? 1 : 0);
 								num6 %= 2;
 								num8 -= num6;
 								int num9 = (int)(Main.tile[k, l].frameY / 18);
@@ -10511,26 +_,33 @@
 						Main.tile[k, num2 + 2].type = 226;
 					}
 				});
+			// TODO micro biomes worldgen
 			WorldGen.AddGenerationPass("Micro Biomes", delegate(GenerationProgress progress)
 				{
 					progress.Message = Lang.gen[76].Value + "..Thin Ice";
 					float num = (float)(Main.maxTilesX * Main.maxTilesY) / 5040000f;
 					float num2 = (float)Main.maxTilesX / 4200f;
-					int num3 = (int)((float)WorldGen.genRand.Next(3, 6) * num);
+					int num3 = (int)((float)WorldGen.genRand.Next(3, 6) * num * Main.setting.ThinIceBiomeMultiplier);
 					int k = 0;
+					// todo Thinice
+					if (!Main.setting.NoSnow)
+					{
 					while (k < num3)
 					{
 						if (Biomes<ThinIceBiome>.Place(WorldGen.RandomWorldPoint((int)Main.worldSurface + 20, 50, 200, 50), structures))
 						{
 							k++;
 						}
+					}
 					}
 					progress.Set(0.1f);
 					progress.Message = Lang.gen[76] + "..Enchanted Swords";
-					int num4 = (int)Math.Ceiling((double)num);
+					int num4 = (int)Math.Ceiling((double)num * Main.setting.EnchantedSwordBiomeMultiplier);
 					int l = 0;
-					while (l < num4)
-					{
+					int attempts = 0;
+					while (l < num4 && attempts < 10000/*and number of attempts is low...*/)
+					{
+						attempts++;
 						Point origin;
 						origin.Y = (int)worldSurface + WorldGen.genRand.Next(50, 100);
 						if (WorldGen.genRand.Next(2) == 0)
@@ -10547,8 +_,9 @@
 						}
 					}
 					progress.Set(0.2f);
+					// TODO campsites
 					progress.Message = Lang.gen[76] + "..Campsites";
-					int num5 = (int)((float)WorldGen.genRand.Next(6, 12) * num);
+					int num5 = (int)((float)WorldGen.genRand.Next(6, 12) * num * Main.setting.CampsiteBiomeMultiplier);
 					int m = 0;
 					while (m < num5)
 					{
@@ -10559,7 +_,7 @@
 					}
 					progress.Message = Lang.gen[76] + "..Mining Explosives";
 					progress.Set(0.25f);
-					int num6 = (int)((float)WorldGen.genRand.Next(14, 30) * num);
+					int num6 = (int)((float)WorldGen.genRand.Next(14, 30) * num * Main.setting.MiningExplosiveMultiplier);
 					int n = 0;
 					while (n < num6)
 					{
@@ -10570,10 +_,10 @@
 					}
 					progress.Message = Lang.gen[76] + "..Mahogany Trees";
 					progress.Set(0.3f);
-					int num7 = (int)((float)WorldGen.genRand.Next(6, 12) * num2);
+					int num7 = (int)((float)WorldGen.genRand.Next(6, 12) * num2 * Main.setting.MahoganyTreeMultiplier);
 					int num8 = 0;
 					int num9 = 0;
-					while (num8 < num7 && num9 < 20000)
+					while (num8 < num7 && num9 < 20000 * Main.setting.MahoganyTreeMultiplier)
 					{
 						if (Biomes<MahoganyTreeBiome>.Place(WorldGen.RandomWorldPoint((int)Main.worldSurface + 50, 50, 500, 50), structures))
 						{
@@ -10581,15 +_,17 @@
 						}
 						num9++;
 					}
+					// The tiny pits that are added to already formed corruption biomes
 					progress.Message = Lang.gen[76] + "..Corruption Pits";
 					progress.Set(0.4f);
-					if (!WorldGen.crimson)
+					// Additional check to make sure Corruption pits were desired.
+					if ((!WorldGen.crimson || Main.setting.IsCorruption == 4) && Main.setting.IsCorruption != 5 && ((int)Math.Ceiling(Main.maxTilesX * 0.00045 * Main.setting.CorruptionMultiplier) > 0))
 					{
 						int num10 = (int)((float)WorldGen.genRand.Next(1, 3) * num);
 						int num11 = 0;
 						while (num11 < num10)
 						{
-							if (Biomes<CorruptionPitBiome>.Place(WorldGen.RandomWorldPoint((int)Main.worldSurface, 50, 500, 50), structures))
+							if (Biomes<CorruptionPitBiome>.Place(WorldGen.RandomWorldPoint((int)Main.worldSurface, Main.setting.CrimsonCorruptionAvoidJungle && dungeonSide == -1 ? Main.maxTilesX / 2 : 50, 500, Main.setting.CrimsonCorruptionAvoidJungle && dungeonSide == 1 ? Main.maxTilesX / 2 : 50), structures))
 							{
 								num11++;
 							}
@@ -10597,7 +_,8 @@
 					}
 					progress.Message = Lang.gen[76] + "..Minecart Tracks";
 					progress.Set(0.5f);
-					TrackGenerator.Run((int)(10f * num), (int)(num * 25f) + 250);
+					int minTrackLength = Math.Min((int)(num * 25f) + 250, 350);
+					TrackGenerator.Run(progress, (int)(10f * num * Main.setting.MineCartMultiplier), minTrackLength);
 					progress.Set(1f);
 				});
 			WorldGen.AddGenerationPass("Final Cleanup", delegate(GenerationProgress progress)
@@ -10644,6 +_,24 @@
 							}
 						}
 					}
+					progress.Message = "Meteor Shower...";
+					for (int predropMeteors = 0; predropMeteors < Main.setting.PreDropMeteor; predropMeteors++)
+					{
+						WorldGen.dropMeteor();
+					}
+					if (Main.hardMode && Main.setting.HardmodeStripes)
+					{
+						progress.Message = "Generating hardmode stripes...";
+						smCallBack(null);
+					}
+					progress.Message = "Generating hardmode ores...";
+					int num731 = 0;
+					while ((float)num731 < Main.setting.PreSmashAltar * 50f)
+					{
+						WorldGen.SmashAltar();
+						num731++;
+					}
+					WorldGen.altarCount = 0;
 					WorldGen.noTileActions = false;
 					WorldGen.gen = false;
 					Main.AnglerQuestSwap();
@@ -10762,6 +_,10 @@
 					bool flag = false;
 					bool flag2 = false;
 					int num3 = WorldGen.genRand.Next(20, 30);
+					if (Main.setting.TreeLowerBound != 5)
+					{
+						num3 = WorldGen.genRand.Next(Main.setting.TreeLowerBound, Main.setting.TreeUpperBound + 1);
+					}
 					int num4;
 					for (int j = num - num3; j < num; j++)
 					{
@@ -11206,11 +_,12 @@
 
 		public static bool Pyramid(int i, int j)
 		{
+			WorldGen.numPyramids++;
 			ushort num = 151;
 			int num2 = j - WorldGen.genRand.Next(0, 7);
 			int num3 = WorldGen.genRand.Next(9, 13);
 			int num4 = 1;
-			int num5 = j + WorldGen.genRand.Next(75, 125);
+			int num5 = j + WorldGen.genRand.Next(75, 125);// * Main.setting.PyramidSizeMultiplier;
 			for (int k = num2; k < num5; k++)
 			{
 				for (int l = i - num4; l < i + num4 - 1; l++)
@@ -12353,8 +_,9 @@
 			}
 			if (Main.tile[i, num].nactive() && !Main.tile[i, num].halfBrick() && Main.tile[i, num].slope() == 0 && (Main.tile[i, num].type == 2 || Main.tile[i, num].type == 23 || Main.tile[i, num].type == 60 || Main.tile[i, num].type == 109 || Main.tile[i, num].type == 147 || Main.tile[i, num].type == 199 || Main.tile[i, num].type == 70 || TileLoader.CanGrowModTree(Main.tile[i, num].type)) && (Main.tile[i, num - 1].wall == 0 || Main.tile[i, num - 1].wall == 106 || Main.tile[i, num - 1].wall == 107 || (Main.tile[i, num - 1].wall >= 138 && Main.tile[i, num - 1].wall <= 141) || Main.tile[i, num - 1].wall == 145 || Main.tile[i, num - 1].wall == 150 || Main.tile[i, num - 1].wall == 152) && ((Main.tile[i - 1, num].active() && (Main.tile[i - 1, num].type == 2 || Main.tile[i - 1, num].type == 23 || Main.tile[i - 1, num].type == 60 || Main.tile[i - 1, num].type == 109 || Main.tile[i - 1, num].type == 147 || Main.tile[i - 1, num].type == 199 || Main.tile[i - 1, num].type == 70 || TileLoader.CanGrowModTree(Main.tile[i - 1, num].type))) || (Main.tile[i + 1, num].active() && (Main.tile[i + 1, num].type == 2 || Main.tile[i + 1, num].type == 23 || Main.tile[i + 1, num].type == 60 || Main.tile[i + 1, num].type == 109 || Main.tile[i + 1, num].type == 147 || Main.tile[i + 1, num].type == 199 || Main.tile[i + 1, num].type == 70 || TileLoader.CanGrowModTree(Main.tile[i + 1, num].type)))))
 			{
+				// desert? near spawn? near ocean, near dungeon
 				int num2 = 2;
-				int num3 = 16;
+				int num3 = Main.setting.TreeUpperBound; // 16;
 				if (Main.tile[i, num].type == 60)
 				{
 					num3 += 5;
@@ -12363,7 +_,7 @@
 				{
 					bool flag = false;
 					bool flag2 = false;
-					int num4 = WorldGen.genRand.Next(5, num3 + 1);
+					int num4 = WorldGen.genRand.Next(Main.setting.TreeLowerBound, num3 + 1); // 5
 					int num5;
 					for (int j = num - num4; j < num; j++)
 					{
@@ -13615,7 +_,7 @@
 			{
 				NetMessage.BroadcastChatMessage(NetworkText.FromKey(Lang.misc[15].Key, new object[0]), new Color(50, 255, 130), -1);
 			}
-			AchievementsHelper.NotifyProgressionEvent(9);
+			//AchievementsHelper.NotifyProgressionEvent(9);
 			}));
 			WorldHooks.ModifyHardmodeTasks(hardmodetasks);
 			foreach (GenPass task in hardmodetasks)
@@ -13834,7 +_,7 @@
 			return false;
 		}
 
-		public static void AddShadowOrb(int x, int y)
+		public static void AddShadowOrb(int x, int y, bool shadowOrb)
 		{
 			if (x < 10 || x > Main.maxTilesX - 10)
 			{
@@ -13855,7 +_,7 @@
 				}
 			}
 			short num = 0;
-			if (WorldGen.crimson)
+			if (!shadowOrb) // if (WorldGen.crimson)
 			{
 				num += 36;
 			}
@@ -13900,14 +_,14 @@
 						wallType = 14;
 					}
 					WorldGen.HellFort(i, num2, num3, wallType);
-					i += WorldGen.genRand.Next(30, 130);
+					i += (int)(WorldGen.genRand.Next(30, 130) / Main.setting.UnderworldHouseMult);
 					if (WorldGen.genRand.Next(10) == 0)
 					{
-						i += WorldGen.genRand.Next(0, 200);
-					}
-				}
-			}
-			float num4 = (float)(Main.maxTilesX / 4200);
+						i += (int)(WorldGen.genRand.Next(0, 200) / Main.setting.UnderworldHouseMult);
+					}
+				}
+			}
+			float num4 = ((float)Main.maxTilesX / 4200);
 			int num5 = 0;
 			while ((float)num5 < 200f * num4)
 			{
@@ -15090,8 +_,10 @@
 
 		public static void makeTemple(int x, int y)
 		{
-			Rectangle[] array = new Rectangle[40];
-			float num = (float)(Main.maxTilesX / 4200);
+			// TODO Temple size
+			Rectangle[] array = new Rectangle[400]; // 40 to 400
+			float num = ((float)Main.maxTilesX / 4200);
+			num *= Main.setting.TempleSizeMultiplier;
 			int num2 = WorldGen.genRand.Next((int)(num * 10f), (int)(num * 16f));
 			int num3 = 1;
 			if (WorldGen.genRand.Next(2) == 0)
@@ -15861,6 +_,7 @@
 			int num2 = WorldGen.tRooms;
 			float num3 = (float)num2 * 1.9f;
 			num3 *= 1f + (float)WorldGen.genRand.Next(-15, 16) * 0.01f;
+			num3 *= Main.setting.TempleTrapMultiplier;
 			int num4 = 0;
 			while (num3 > 0f)
 			{
@@ -15889,7 +_,7 @@
 				}
 			}
 			Main.tileSolid[232] = false;
-			float num7 = (float)num2 * 0.35f;
+			float num7 = (float)num2 * 0.35f * Main.setting.TempleChestMultiplier;
 			num7 *= 1f + (float)WorldGen.genRand.Next(-15, 16) * 0.01f;
 			int contain = 1293;
 			num4 = 0;
@@ -16043,13 +_,18 @@
 			return false;
 		}
 
-		public static void MakeDungeon(int x, int y)
+		public static void MakeDungeon(int x, int y) { } // Empty method for IL compatibility
+		public static void MakeDungeon(int x, int y, GenerationProgress progress)
 		{
-			int num = WorldGen.genRand.Next(3);
+			Main.setting.DungeonStyle = Main.setting.SelectDungeon;
+			if (Main.setting.DungeonStyle == 3)
+			{
+				Main.setting.DungeonStyle = WorldGen.genRand.Next(3);
+			}
 			WorldGen.genRand.Next(3);
 			ushort num2;
 			int num3;
-			switch (num)
+			switch (Main.setting.DungeonStyle)
 			{
 				case 0:
 					num2 = 41;
@@ -16076,7 +_,7 @@
 			WorldGen.dyStrength1 = (double)WorldGen.genRand.Next(20, 25);
 			WorldGen.dxStrength2 = (double)WorldGen.genRand.Next(35, 50);
 			WorldGen.dyStrength2 = (double)WorldGen.genRand.Next(10, 15);
-			float num4 = (float)(Main.maxTilesX / 60);
+			float num4 = (float)(Main.setting.DungeonSizeMultiplier * Main.maxTilesX / 60);
 			num4 += (float)WorldGen.genRand.Next(0, (int)(num4 / 3f));
 			float num5 = num4;
 			int num6 = 5;
@@ -16103,6 +_,7 @@
 						(int)((num5 - num4) / num5 * 60f),
 						"%"
 					});
+				progress.Message = Main.statusText;
 				if (num6 > 0)
 				{
 					num6--;
@@ -16521,7 +_,7 @@
 								float num57 = (float)Math.Abs(num53 - num55);
 								float num58 = (float)Math.Abs(num54 - num56);
 								double num59 = Math.Sqrt((double)(num57 * num57 + num58 * num58));
-								if (num59 < (double)num52 * 0.4 && Main.wallDungeon[(int)Main.tile[num55, num56].wall])
+								if (num59 < (double)num52 * 0.4 && num55 < Main.maxTilesX && Main.wallDungeon[(int)Main.tile[num55, num56].wall])
 								{
 									WorldGen.Spread.WallDungeon(num55, num56, array[num51]);
 								}
@@ -16645,7 +_,12 @@
 					}
 				}
 			}
-			for (int num78 = 0; num78 < 4; num78++)
+			int numChests = 4;
+			if (Main.setting.IsCorruption == 3 || Main.setting.IsCorruption == 4)
+				numChests++;
+			for (int round = 0; round < Main.setting.BiomeChestSets; round++)
+			{
+			for (int num78 = 0; num78 < numChests; num78++)
 			{
 				bool flag5 = false;
 				while (!flag5)
@@ -16684,9 +_,23 @@
 							style2 = 27;
 							contain = 1572;
 						}
+						else if (num78 == 4)
+						{
+							if (WorldGen.crimson)
+							{
+								style2 = 24;
+								contain = 1571;
+							}
+							else
+							{
+								style2 = 25;
+								contain = 1569;
+							}
+						}
 						flag5 = WorldGen.AddBuriedChest(num79, num80, contain, false, style2);
 					}
 				}
+			}
 			}
 			int[] array2 = new int[3];
 			array2[0] = WorldGen.genRand.Next(9, 13);
@@ -16951,6 +_,7 @@
 					failCount = 0;
 				}
 			}
+			Tile.WireTypeOverride = -1;
 		}
 
 		private static void MakeDungeon_Lights(ushort tileType, ref int failCount, int failMax, ref int numAdd, int[] roomWall)
@@ -18378,7 +_,7 @@
 					flag9 = false;
 					for (int num4 = i; num4 < i + num3; num4++)
 					{
-						if ((int)Main.tile[num4, j].wall == wallType)
+						if (InWorld(num4, j) && (int)Main.tile[num4, j].wall == wallType)
 						{
 							if (flag9)
 							{
@@ -19689,10 +_,12 @@
 									int stack = WorldGen.genRand.Next(8) + 3;
 									if (num7 == 0)
 									{
+										if (Main.setting.IsCopper == 3) WorldGen.copperBar = WorldGen.genRand.NextBool() ? 20 : 703;
 										Main.chest[num4].item[num5].SetDefaults(WorldGen.copperBar, false);
 									}
 									if (num7 == 1)
 									{
+										if (Main.setting.IsIron == 3) WorldGen.ironBar = WorldGen.genRand.NextBool() ? 22 : 704;
 										Main.chest[num4].item[num5].SetDefaults(WorldGen.ironBar, false);
 									}
 									Main.chest[num4].item[num5].stack = stack;
@@ -20080,10 +_,12 @@
 									int stack14 = WorldGen.genRand.Next(8) + 3;
 									if (num18 == 0)
 									{
+										if (Main.setting.IsGold == 3) WorldGen.goldBar = WorldGen.genRand.NextBool() ? 19 : 706;
 										Main.chest[num4].item[num5].SetDefaults(WorldGen.goldBar, false);
 									}
 									if (num18 == 1)
 									{
+										if (Main.setting.IsSilver == 3) WorldGen.silverBar = WorldGen.genRand.NextBool() ? 21 : 705;
 										Main.chest[num4].item[num5].SetDefaults(WorldGen.silverBar, false);
 									}
 									Main.chest[num4].item[num5].stack = stack14;
@@ -20265,6 +_,7 @@
 									}
 									if (num25 == 1)
 									{
+										if (Main.setting.IsGold == 3) WorldGen.goldBar = WorldGen.genRand.NextBool() ? 19 : 706;
 										Main.chest[num4].item[num5].SetDefaults(WorldGen.goldBar, false);
 									}
 									Main.chest[num4].item[num5].stack = stack21;
@@ -26732,8 +_,9 @@
 			}
 		}
 
-		public static void SmashAltar(int i, int j)
+		public static void SmashAltar(/*int i, int j*/)
 		{
+			/*
 			if (Main.netMode == 1)
 			{
 				return;
@@ -26750,9 +_,10 @@
 			{
 				return;
 			}
+			*/
 			int num = WorldGen.altarCount % 3;
 			int num2 = WorldGen.altarCount / 3 + 1;
-			float num3 = (float)(Main.maxTilesX / 4200);
+			float num3 = ((float)Main.maxTilesX / 4200);
 			int num4 = 1 - num;
 			num3 = num3 * 310f - (float)(85 * num);
 			num3 *= 0.85f;
@@ -26782,6 +_,12 @@
 					NetMessage.BroadcastChatMessage(NetworkText.FromKey(Lang.misc[num5].Key, new object[0]), new Color(50, 255, 130), -1);
 				}
 				num = WorldGen.oreTier1;
+				if (Main.setting.PreSmashAltarOreGenerateOpposite)
+					num = num == 107 ? 221 : 107; // For presmash, flip it.
+				if (Main.setting.PreSmashAltarOreAlternates && WorldGen.genRand.Next(2) == 0)
+				{
+					num = num == 107 ? 221 : 107; // if both, flip again maybe
+				}
 				num3 *= 1.05f;
 			}
 			else if (num == 1)
@@ -26809,6 +_,12 @@
 					NetMessage.BroadcastChatMessage(NetworkText.FromKey(Lang.misc[num6].Key, new object[0]), new Color(50, 255, 130), -1);
 				}
 				num = WorldGen.oreTier2;
+				if (Main.setting.PreSmashAltarOreGenerateOpposite)
+					num = num == 108 ? 222 : 108;
+				if (Main.setting.PreSmashAltarOreAlternates && WorldGen.genRand.Next(2) == 0)
+				{
+					num = num == 108 ? 222 : 108;
+				}
 			}
 			else
 			{
@@ -26835,6 +_,12 @@
 					NetMessage.BroadcastChatMessage(NetworkText.FromKey(Lang.misc[num7].Key, new object[0]), new Color(50, 255, 130), -1);
 				}
 				num = WorldGen.oreTier3;
+				if (Main.setting.PreSmashAltarOreGenerateOpposite)
+					num = num == 111 ? 223 : 111;
+				if (Main.setting.PreSmashAltarOreAlternates && WorldGen.genRand.Next(2) == 0)
+				{
+					num = num == 111 ? 223 : 111;
+				}
 			}
 			int num8 = 0;
 			while ((float)num8 < num3)
@@ -26855,7 +_,10 @@
 			}
 			int num10 = WorldGen.genRand.Next(3);
 			int num11 = 0;
-			while (num10 != 2 && num11++ < 1000)
+			// TODO option to not spread crimson on presmashaltar
+			if (!Main.setting.PreSmashAltarPreventPatches)
+			{
+			while (num10 != 2 && num11++ < 1000)  // 1/3 nothing, 1/3 crim/corruption 1/3 Hallo
 			{
 				int num12 = WorldGen.genRand.Next(100, Main.maxTilesX - 100);
 				int num13 = WorldGen.genRand.Next((int)Main.rockLayer + 50, Main.maxTilesY - 300);
@@ -26884,16 +_,17 @@
 					break;
 				}
 			}
+			}
 			if (Main.netMode != 1)
 			{
 				int num14 = Main.rand.Next(2) + 1;
 				for (int k = 0; k < num14; k++)
 				{
-					NPC.SpawnOnPlayer((int)Player.FindClosest(new Vector2((float)(i * 16), (float)(j * 16)), 16, 16), 82);
+					//NPC.SpawnOnPlayer((int)Player.FindClosest(new Vector2((float)(i * 16), (float)(j * 16)), 16, 16), 82);
 				}
 			}
 			WorldGen.altarCount++;
-			AchievementsHelper.NotifyProgressionEvent(6);
+			//AchievementsHelper.NotifyProgressionEvent(6);
 		}
 
 		public static void Check3x1(int i, int j, int type)
@@ -27180,7 +_,7 @@
 				{
 					if (!WorldGen.noTileActions && !WorldGen.IsGeneratingHardMode)
 					{
-						WorldGen.SmashAltar(i, j);
+						WorldGen.SmashAltar();
 					}
 				}
 				else if (type == 298)
@@ -31168,6 +_,7 @@
 
 		public static bool PlacePot(int x, int y, ushort type = 28, int style = 0)
 		{
+			if (Main.setting.NoPot) return true; // return true or false?
 			bool flag = true;
 			for (int i = x; i < x + 2; i++)
 			{
@@ -34195,6 +_,7 @@
 					}
 					else if (type == 14 || type == 26 || type == 86 || type == 87 || TileLoader.IsDresser(type) || type == 89 || type == 114 || type == 186 || type == 187 || type == 215 || type == 217 || type == 218 || type == 377)
 					{
+						// old version commented out 26?
 						WorldGen.Place3x2(i, j, (ushort)type, style);
 						WorldGen.SquareTileFrame(i, j, true);
 					}
@@ -44105,7 +_,7 @@
 		{
 			int crimDir = 1;
 			WorldGen.heartCount = 0;
-			WorldGen.crimson = true;
+			// WorldGen.crimson = true;
 			int num = j;
 			if ((double)num > Main.worldSurface)
 			{
@@ -44333,7 +_,7 @@
 			}
 			for (int num35 = 0; num35 < WorldGen.heartCount; num35++)
 			{
-				WorldGen.AddShadowOrb((int)WorldGen.heartPos[num35].X, (int)WorldGen.heartPos[num35].Y);
+				WorldGen.AddShadowOrb((int)WorldGen.heartPos[num35].X, (int)WorldGen.heartPos[num35].Y, false);
 			}
 			int num36 = Main.maxTilesX;
 			int num37 = 0;
@@ -44631,10 +_,10 @@
 				}
 				if (num <= 0f)
 				{
-					if (!flag2)
+					if (!flag2 && !Main.setting.NoOrbHeart)
 					{
 						flag2 = true;
-						WorldGen.AddShadowOrb((int)value.X, (int)value.Y);
+						WorldGen.AddShadowOrb((int)value.X, (int)value.Y, true);
 					}
 					else if (!flag3)
 					{
@@ -44663,7 +_,14 @@
 							}
 							if ((double)num10 > Main.worldSurface)
 							{
-								WorldGen.Place3x2(num9, num10, 26, 0);
+								if (Main.setting.NoAltar)
+								{
+									flag4 = true;
+								}
+								else
+								{
+									WorldGen.Place3x2(num9, num10, 26, 0);
+								}
 								if (Main.tile[num9, num10].type == 26)
 								{
 									flag4 = true;
@@ -44859,7 +_,7 @@
 		public static void GERunner(int i, int j, float speedX = 0f, float speedY = 0f, bool good = true)
 		{
 			int num = WorldGen.genRand.Next(200, 250);
-			float num2 = (float)(Main.maxTilesX / 4200);
+			float num2 = ((float)Main.maxTilesX / 4200);
 			num = (int)((float)num * num2);
 			double num3 = (double)num;
 			Vector2 value;
@@ -46876,9 +_,9 @@
 
 		public static void Lakinater(int i, int j)
 		{
-			double num = (double)WorldGen.genRand.Next(25, 50);
+			double num = (double)WorldGen.genRand.Next(25, 50) * Main.setting.LakeScale;
 			double num2 = num;
-			float num3 = (float)WorldGen.genRand.Next(30, 80);
+			float num3 = (float)WorldGen.genRand.Next(30, 80) * Main.setting.LakeScale;
 			if (WorldGen.genRand.Next(5) == 0)
 			{
 				num *= 1.5;
@@ -47068,10 +_,10 @@
 					}
 					int num13 = WorldGen.genRand.Next(7, 10);
 					int num14 = WorldGen.genRand.Next(7, 10);
-					WorldGen.TileRunner(num11, num12, (double)num13, num14, 59, false, 0f, 2f, true, true);
+					WorldGen.TileRunner(num11, num12, (double)num13*(Main.setting.MushroomScale), num14 + (int)(Main.setting.MushroomScale - 1) / 2, 59, false, 0f, 2f, true, true);
 					if (WorldGen.genRand.Next(3) == 0)
 					{
-						WorldGen.TileRunner(num11, num12, (double)(num13 - 3), num14 - 3, -1, false, 0f, 2f, true, true);
+						WorldGen.TileRunner(num11, num12, (double)(num13 - 4 + Main.setting.MushroomScale), num14 - 3 + (int)(Main.setting.MushroomScale - 1)/2, -1, false, 0f, 2f, true, true);
 					}
 				}
 			}
