--- src/tModLoader\Terraria\WorldGen.cs
+++ src/TerraCustom\Terraria\WorldGen.cs
@@ -562,7 +_,7 @@
 		public static int tTop;
 		public static int tBottom;
 		public static int tRooms;
-		public static int[] mossType = new int[3];
+		public static int[] mossType = new int[] { 5, 5, 5 };
 		public static int c = 0;
 		public static int m = 0;
 		public static int a = 0;
@@ -570,6 +_,8 @@
 		public static int ir = 0;
 		public static int si = 0;
 		public static int go = 0;
+		public static int worldSize = 0;
+		private static int numPyramids = 0;
 		public static int copperBar = 20;
 		public static int ironBar = 22;
 		public static int silverBar = 21;
@@ -675,7 +_,8 @@
 		public static int dungeonX;
 		public static int dungeonY;
 		public static Vector2 lastDungeonHall = Vector2.Zero;
-		public static int maxDRooms = 100;
+		public static int maxDRooms = 1000;
+		// TODO? prob?
 		public static int numDRooms = 0;
 		public static int[] dRoomX = new int[WorldGen.maxDRooms];
 		public static int[] dRoomY = new int[WorldGen.maxDRooms];
@@ -686,12 +_,12 @@
 		private static int[] dRoomT = new int[WorldGen.maxDRooms];
 		private static int[] dRoomB = new int[WorldGen.maxDRooms];
 		private static int numDDoors;
-		private static int[] DDoorX = new int[300];
-		private static int[] DDoorY = new int[300];
-		private static int[] DDoorPos = new int[300];
+		private static int[] DDoorX = new int[3000];
+		private static int[] DDoorY = new int[3000];
+		private static int[] DDoorPos = new int[3000];
 		private static int numDPlats;
-		private static int[] DPlatX = new int[300];
-		private static int[] DPlatY = new int[300];
+		private static int[] DPlatX = new int[3000];
+		private static int[] DPlatY = new int[3000];
 		private static int JungleItemCount = 0;
 		private static int[] JChestX = new int[100];
 		private static int[] JChestY = new int[100];
@@ -1908,7 +_,7 @@
 
 		public static void dropMeteor()
 		{
-			bool flag = true;
+			bool flag = false;
 			if (Main.netMode == 1)
 			{
 				return;
@@ -1917,12 +_,12 @@
 			{
 				if (Main.player[i].active)
 				{
-					flag = false;
+					//				flag = false;
 					break;
 				}
 			}
 			int num = 0;
-			float num2 = (float)(Main.maxTilesX / 4200);
+			float num2 = ((float)Main.maxTilesX / 4200);
 			int num3 = (int)(400f * num2);
 			for (int j = 5; j < Main.maxTilesX - 5; j++)
 			{
@@ -1931,7 +_,7 @@
 				{
 					if (Main.tile[j, num4].active() && Main.tile[j, num4].type == 37)
 					{
-						num++;
+						//num++;
 						if (num > num3)
 						{
 							return;
@@ -1991,10 +_,10 @@
 						k++;
 					}
 				}
-				if (num5 < 100f)
-				{
-					return;
-				}
+				//if (num5 < 100f)
+				//{
+				//	return;
+				//}
 			}
 		}
 
@@ -2198,11 +_,12 @@
 			WorldGen.clearWorld();
 			WorldGen.generateWorld(Main.ActiveWorldFileData.Seed, threadContext as GenerationProgress);
 			WorldFile.saveWorld(Main.ActiveWorldFileData.IsCloudSave, true);
-			if (Main.menuMode == 10 || Main.menuMode == 888)
-			{
-				Main.menuMode = 6;
-			}
+			//	if (Main.menuMode == 10 || Main.menuMode == 888)
+			//	{
+			//		Main.menuMode = 6;
+			//	}
 			Main.PlaySound(10, -1, -1, 1, 1f, 0f);
+			Main.menuMode = (int)TerraCustom.MenuModes.Settings;
 		}
 
 		public static void CreateNewWorld(GenerationProgress progress = null)
@@ -2479,6 +_,7 @@
 
 		public static void clearWorld()
 		{
+			WorldGen.numPyramids = 0;
 			WorldGen.Hooks.ClearWorld();
 			TileEntity.Clear();
 			Main.checkXMas();
@@ -2490,7 +_,7 @@
 					float arg_28_0 = (float)i / (float)WorldGen.lastMaxTilesX;
 					Main.statusText = Lang.gen[65];
 				}
-				Main.Map.Clear();
+				//	Main.Map.Clear();
 			}
 			NPC.MoonLordCountdown = 0;
 			Main.pumpkinMoon = false;
@@ -2529,42 +_,42 @@
 			WorldGen.spawnNPC = 0;
 			WorldGen.shadowOrbCount = 0;
 			WorldGen.altarCount = 0;
-			WorldGen.oreTier1 = -1;
-			WorldGen.oreTier2 = -1;
-			WorldGen.oreTier3 = -1;
+			//WorldGen.oreTier1 = -1;
+			//WorldGen.oreTier2 = -1;
+			//WorldGen.oreTier3 = -1;
 			Main.cloudBGActive = 0f;
 			Main.raining = false;
-			Main.hardMode = false;
+			//Main.hardMode = false;
 			Main.helpText = 0;
 			Main.BartenderHelpTextIndex = 0;
 			Main.dungeonX = 0;
 			Main.dungeonY = 0;
-			NPC.downedBoss1 = false;
-			NPC.downedBoss2 = false;
-			NPC.downedBoss3 = false;
-			NPC.downedQueenBee = false;
-			NPC.downedSlimeKing = false;
-			NPC.downedMechBossAny = false;
-			NPC.downedMechBoss1 = false;
-			NPC.downedMechBoss2 = false;
-			NPC.downedMechBoss3 = false;
-			NPC.downedFishron = false;
-			NPC.downedAncientCultist = false;
-			NPC.downedMoonlord = false;
+			NPC.downedBoss1 = Main.setting.downedEyeOfCthulu; //false;
+			NPC.downedBoss2 = Main.setting.downedEaterBrain;//false;
+			NPC.downedBoss3 = Main.setting.downedSkeletron;//false;
+			NPC.downedQueenBee = Main.setting.downedQueenBee;//false;
+			NPC.downedSlimeKing = Main.setting.downedSlimeKing;//false;
+			NPC.downedMechBossAny = Main.setting.downedTwins | Main.setting.downedDestroyer | Main.setting.downedSkeletronPrime;//false;
+			NPC.downedMechBoss1 = Main.setting.downedTwins;//false;
+			NPC.downedMechBoss2 = Main.setting.downedDestroyer;//false;
+			NPC.downedMechBoss3 = Main.setting.downedSkeletronPrime;//false;
+			NPC.downedFishron = Main.setting.downedFishron;//false;
+			NPC.downedAncientCultist = Main.setting.downedAncientCultist; //false;
+			NPC.downedMoonlord = Main.setting.downedMoonlord;// false;
 			NPC.downedHalloweenKing = false;
 			NPC.downedHalloweenTree = false;
 			NPC.downedChristmasIceQueen = false;
 			NPC.downedChristmasSantank = false;
 			NPC.downedChristmasTree = false;
-			NPC.downedPlantBoss = false;
-			NPC.downedGolemBoss = false;
-			NPC.savedStylist = false;
-			NPC.savedGoblin = false;
-			NPC.savedWizard = false;
-			NPC.savedMech = false;
-			NPC.savedTaxCollector = false;
-			NPC.savedAngler = false;
-			NPC.savedBartender = false;
+			NPC.downedPlantBoss = Main.setting.downedPlantera; //false;
+			NPC.downedGolemBoss = Main.setting.downedGolem; // false;
+			NPC.savedStylist = Main.setting.savedStylist; //false;
+			NPC.savedGoblin = Main.setting.savedGoblin; //false;
+			NPC.savedWizard = Main.setting.savedWizard; //false;
+			NPC.savedMech = Main.setting.savedMechanic; //false;
+			NPC.savedTaxCollector = Main.setting.savedTaxCollector; //false;
+			NPC.savedAngler = Main.setting.savedAngler; //false;
+			NPC.savedBartender = Main.setting.savedBartender;
 			NPC.downedGoblins = false;
 			NPC.downedClown = false;
 			NPC.downedFrost = false;
@@ -2586,13 +_,23 @@
 			Main.treeX[0] = Main.maxTilesX;
 			Main.treeX[1] = Main.maxTilesX;
 			Main.treeX[2] = Main.maxTilesX;
-			Main.treeStyle[0] = 0;
-			Main.treeStyle[1] = 0;
-			Main.treeStyle[2] = 0;
-			Main.treeStyle[3] = 0;
+			//Main.treeStyle[0] = 0;
+			//Main.treeStyle[1] = 0;
+			//Main.treeStyle[2] = 0;
+			//Main.treeStyle[3] = 0;
 			WorldGen.noLiquidCheck = false;
 			Liquid.numLiquid = 0;
 			LiquidBuffer.numLiquidBuffer = 0;
+			//		Main.leftWorld = 0f;
+			//		Main.rightWorld = Main.maxTilesX * 16; //134400f; // TODO changes here? *2   == 8400 * 16
+			//		Main.topWorld = 0f;
+			//		Main.bottomWorld = Main.maxTilesY * 16; //38400f;
+			//	Main.maxTilesX = (int)Main.rightWorld / 16 + 1;
+			//	Main.maxTilesY = (int)Main.bottomWorld / 16 + 1; // the extra one needed?
+			//		Main.maxSectionsX = Main.maxTilesX / 200; // Math might be wrong
+			//		Main.maxSectionsY = Main.maxTilesY / 150;
+			Main.tile = new Tile[Main.maxTilesX + 1, Main.maxTilesY + 1]; // should be +1?
+			/*
 			if (Main.netMode == 1 || WorldGen.lastMaxTilesX > Main.maxTilesX || WorldGen.lastMaxTilesY > Main.maxTilesY)
 			{
 				for (int j = 0; j < WorldGen.lastMaxTilesX; j++)
@@ -2611,6 +_,7 @@
 					}
 				}
 			}
+			*/
 			WorldGen.lastMaxTilesX = Main.maxTilesX;
 			WorldGen.lastMaxTilesY = Main.maxTilesY;
 			if (Main.netMode != 2)
@@ -3025,12 +_,176 @@
 
 		public static void RandomizeMoonState()
 		{
-			Main.moonType = WorldGen.genRand.Next(Main.maxMoons);
+			//Main.moonType = WorldGen.genRand.Next(Main.maxMoons);
+			if (Main.setting.MoonStyle == 3)
+			{
+				Main.moonType = WorldGen.genRand.Next(Main.maxMoons);
+			}
 		}
-
+		// aka, randomBackgrounds
 		public static void RandomizeBackgrounds()
 		{
-			WorldGen.treeBG = WorldGen.genRand.Next(9);
+			if (Main.setting.ForestStyle == 14)
+			{
+				WorldGen.treeBG = WorldGen.genRand.Next(9);
+				if ((WorldGen.treeBG == 1 || WorldGen.treeBG == 2) && WorldGen.genRand.Next(2) == 0)
+				{
+					WorldGen.treeBG = WorldGen.genRand.Next(7);
+				}
+				if (WorldGen.treeBG == 0)
+				{
+					WorldGen.treeBG = WorldGen.genRand.Next(7);
+				}
+				if (WorldGen.treeBG == 3 && WorldGen.genRand.Next(3) == 0)
+				{
+					WorldGen.treeBG = 31;
+				}
+				if (WorldGen.treeBG == 5 && WorldGen.genRand.Next(2) == 0)
+				{
+					WorldGen.treeBG = 51;
+				}
+				if (WorldGen.treeBG == 7 && WorldGen.genRand.Next(4) == 0)
+				{
+					WorldGen.treeBG = WorldGen.genRand.Next(71, 74);
+				}
+				WorldGen.setBG(0, WorldGen.treeBG);
+			}
+			else
+			{
+				switch (Main.setting.ForestStyle)
+				{
+					case 9:
+						WorldGen.setBG(0, 31);
+						break;
+					case 10:
+						WorldGen.setBG(0, 51);
+						break;
+					case 11:
+						WorldGen.setBG(0, 71);
+						break;
+					case 12:
+						WorldGen.setBG(0, 72);
+						break;
+					case 13:
+						WorldGen.setBG(0, 73);
+						break;
+					default:
+						WorldGen.setBG(0, Main.setting.ForestStyle);
+						break;
+				}
+			}
+			if (Main.setting.CorruptStyle == 2)
+			{
+				WorldGen.setBG(1, WorldGen.genRand.Next(2));
+			}
+			else
+			{
+				WorldGen.setBG(1, Main.setting.CorruptStyle);
+			}
+			if (Main.setting.JungleStyle == 2)
+			{
+				WorldGen.setBG(2, WorldGen.genRand.Next(2));
+			}
+			else
+			{
+				WorldGen.setBG(2, Main.setting.JungleStyle);
+			}
+			if (Main.setting.SnowStyle == 11)
+			{
+				WorldGen.snowBG = WorldGen.genRand.Next(6);
+				if (WorldGen.snowBG == 2 && WorldGen.genRand.Next(2) == 0)
+				{
+					if (WorldGen.genRand.Next(2) == 0)
+					{
+						WorldGen.snowBG = 21;
+					}
+					else
+					{
+						WorldGen.snowBG = 22;
+					}
+				}
+				if (WorldGen.snowBG == 3 && WorldGen.genRand.Next(2) == 0)
+				{
+					if (WorldGen.genRand.Next(2) == 0)
+					{
+						WorldGen.snowBG = 31;
+					}
+					else
+					{
+						WorldGen.snowBG = 32;
+					}
+				}
+				if (WorldGen.snowBG == 4 && WorldGen.genRand.Next(2) == 0)
+				{
+					if (WorldGen.genRand.Next(2) == 0)
+					{
+						WorldGen.snowBG = 41;
+					}
+					else
+					{
+						WorldGen.snowBG = 42;
+					}
+				}
+				WorldGen.setBG(3, WorldGen.snowBG);
+			}
+			else
+			{
+				switch (Main.setting.SnowStyle)
+				{
+					case 5:
+						WorldGen.setBG(3, 21);
+						break;
+					case 6:
+						WorldGen.setBG(3, 22);
+						break;
+					case 7:
+						WorldGen.setBG(3, 31);
+						break;
+					case 8:
+						WorldGen.setBG(3, 32);
+						break;
+					case 9:
+						WorldGen.setBG(3, 41);
+						break;
+					case 10:
+						WorldGen.setBG(3, 42);
+						break;
+					default:
+						WorldGen.setBG(3, Main.setting.SnowStyle);
+						break;
+				}
+			}
+			if (Main.setting.HallowStyle == 2)
+			{
+				WorldGen.setBG(4, WorldGen.genRand.Next(2));
+			}
+			else
+			{
+				WorldGen.setBG(4, Main.setting.HallowStyle);
+			}
+			if (Main.setting.CrimsonStyle == 3)
+			{
+				WorldGen.setBG(5, WorldGen.genRand.Next(3));
+			}
+			else
+			{
+				WorldGen.setBG(5, Main.setting.CrimsonStyle);
+			}
+			if (Main.setting.DesertStyle == 2)
+			{
+				WorldGen.setBG(6, WorldGen.genRand.Next(2));
+			}
+			else
+			{
+				WorldGen.setBG(6, Main.setting.DesertStyle);
+			}
+			if (Main.setting.OceanStyle == 3)
+			{
+				WorldGen.setBG(7, WorldGen.genRand.Next(3));
+				return;
+			}
+			WorldGen.setBG(7, Main.setting.OceanStyle);
+			/*	WorldGen.treeBG = WorldGen.genRand.Next(9);
 			if ((WorldGen.treeBG == 1 || WorldGen.treeBG == 2) && WorldGen.genRand.Next(2) == 0)
 			{
 				WorldGen.treeBG = WorldGen.genRand.Next(7);
@@ -3092,17 +_,29 @@
 			WorldGen.setBG(4, WorldGen.genRand.Next(2));
 			WorldGen.setBG(5, WorldGen.genRand.Next(3));
 			WorldGen.setBG(6, WorldGen.genRand.Next(2));
-			WorldGen.setBG(7, WorldGen.genRand.Next(3));
+			WorldGen.setBG(7, WorldGen.genRand.Next(3));*/
 		}
 
 		public static void RandomizeTreeStyle()
 		{
+			Main.setting.SelectTreeStyle.CopyTo(Main.treeStyle, 0);
 			if (Main.maxTilesX == 4200)
 			{
 				Main.treeX[0] = WorldGen.genRand.Next((int)((double)Main.maxTilesX * 0.5 - (double)((float)Main.maxTilesX * 0.25f)), (int)((double)Main.maxTilesX * 0.5 + (double)((float)Main.maxTilesX * 0.25f)));
-				Main.treeStyle[0] = WorldGen.genRand.Next(6);
-				Main.treeStyle[1] = WorldGen.genRand.Next(6);
-				while (Main.treeStyle[1] == Main.treeStyle[0])
+				if (Main.treeStyle[0] == 6 && Main.treeStyle[1] == 6)
+				{
+					Main.treeStyle[0] = WorldGen.genRand.Next(6);
+					Main.treeStyle[1] = WorldGen.genRand.Next(6);
+					while (Main.treeStyle[1] == Main.treeStyle[0])
+					{
+						Main.treeStyle[1] = WorldGen.genRand.Next(6);
+					}
+				}
+				else if (Main.treeStyle[0] == 6)
+				{
+					Main.treeStyle[0] = WorldGen.genRand.Next(6);
+				}
+				else if (Main.treeStyle[1] == 6)
 				{
 					Main.treeStyle[1] = WorldGen.genRand.Next(6);
 				}
@@ -3114,9 +_,44 @@
 			{
 				Main.treeX[0] = WorldGen.genRand.Next((int)((double)Main.maxTilesX * 0.334 - (double)((float)Main.maxTilesX * 0.2f)), (int)((double)Main.maxTilesX * 0.334 + (double)((float)Main.maxTilesX * 0.2f)));
 				Main.treeX[1] = WorldGen.genRand.Next((int)((double)Main.maxTilesX * 0.667 - (double)((float)Main.maxTilesX * 0.2f)), (int)((double)Main.maxTilesX * 0.667 + (double)((float)Main.maxTilesX * 0.2f)));
+				if (Main.treeStyle[0] == 6 && Main.treeStyle[1] == 6 && Main.treeStyle[2] == 6)
+				{
+					Main.treeStyle[0] = WorldGen.genRand.Next(6);
+					Main.treeStyle[1] = WorldGen.genRand.Next(6);
+					Main.treeStyle[2] = WorldGen.genRand.Next(6);
+					while (Main.treeStyle[1] == Main.treeStyle[0])
+					{
+						Main.treeStyle[1] = WorldGen.genRand.Next(6);
+					}
+					while (Main.treeStyle[2] == Main.treeStyle[0] || Main.treeStyle[2] == Main.treeStyle[1])
+					{
+						Main.treeStyle[2] = WorldGen.genRand.Next(6);
+					}
+				}
+				else if (Main.treeStyle[0] == 6)
+				{
+					Main.treeStyle[0] = WorldGen.genRand.Next(6);
+				}
+				else if (Main.treeStyle[1] == 6)
+				{
+					Main.treeStyle[1] = WorldGen.genRand.Next(6);
+				}
+				else if (Main.treeStyle[2] == 6)
+				{
+					Main.treeStyle[2] = WorldGen.genRand.Next(6);
+				}
+				Main.treeX[2] = Main.maxTilesX;
+				return;
+			}
+			Main.treeX[0] = WorldGen.genRand.Next((int)((double)Main.maxTilesX * 0.25 - (double)((float)Main.maxTilesX * 0.15f)), (int)((double)Main.maxTilesX * 0.25 + (double)((float)Main.maxTilesX * 0.15f)));
+			Main.treeX[1] = WorldGen.genRand.Next((int)((double)Main.maxTilesX * 0.5 - (double)((float)Main.maxTilesX * 0.15f)), (int)((double)Main.maxTilesX * 0.5 + (double)((float)Main.maxTilesX * 0.15f)));
+			Main.treeX[2] = WorldGen.genRand.Next((int)((double)Main.maxTilesX * 0.75 - (double)((float)Main.maxTilesX * 0.15f)), (int)((double)Main.maxTilesX * 0.75 + (double)((float)Main.maxTilesX * 0.15f)));
+			if (Main.treeStyle[0] == 6 && Main.treeStyle[1] == 6 && Main.treeStyle[2] == 6 && Main.treeStyle[3] == 6)
+			{
 				Main.treeStyle[0] = WorldGen.genRand.Next(6);
 				Main.treeStyle[1] = WorldGen.genRand.Next(6);
 				Main.treeStyle[2] = WorldGen.genRand.Next(6);
+				Main.treeStyle[3] = WorldGen.genRand.Next(6);
 				while (Main.treeStyle[1] == Main.treeStyle[0])
 				{
 					Main.treeStyle[1] = WorldGen.genRand.Next(6);
@@ -3125,25 +_,24 @@
 				{
 					Main.treeStyle[2] = WorldGen.genRand.Next(6);
 				}
-				Main.treeX[2] = Main.maxTilesX;
-				return;
-			}
-			Main.treeX[0] = WorldGen.genRand.Next((int)((double)Main.maxTilesX * 0.25 - (double)((float)Main.maxTilesX * 0.15f)), (int)((double)Main.maxTilesX * 0.25 + (double)((float)Main.maxTilesX * 0.15f)));
-			Main.treeX[1] = WorldGen.genRand.Next((int)((double)Main.maxTilesX * 0.5 - (double)((float)Main.maxTilesX * 0.15f)), (int)((double)Main.maxTilesX * 0.5 + (double)((float)Main.maxTilesX * 0.15f)));
-			Main.treeX[2] = WorldGen.genRand.Next((int)((double)Main.maxTilesX * 0.75 - (double)((float)Main.maxTilesX * 0.15f)), (int)((double)Main.maxTilesX * 0.75 + (double)((float)Main.maxTilesX * 0.15f)));
-			Main.treeStyle[0] = WorldGen.genRand.Next(6);
-			Main.treeStyle[1] = WorldGen.genRand.Next(6);
-			Main.treeStyle[2] = WorldGen.genRand.Next(6);
-			Main.treeStyle[3] = WorldGen.genRand.Next(6);
-			while (Main.treeStyle[1] == Main.treeStyle[0])
+				while (Main.treeStyle[3] == Main.treeStyle[0] || Main.treeStyle[3] == Main.treeStyle[1] || Main.treeStyle[3] == Main.treeStyle[2])
+				{
+					Main.treeStyle[3] = WorldGen.genRand.Next(6);
+				}
+			}
+			else if (Main.treeStyle[0] == 6)
+			{
+				Main.treeStyle[0] = WorldGen.genRand.Next(6);
+			}
+			else if (Main.treeStyle[1] == 6)
 			{
 				Main.treeStyle[1] = WorldGen.genRand.Next(6);
 			}
-			while (Main.treeStyle[2] == Main.treeStyle[0] || Main.treeStyle[2] == Main.treeStyle[1])
+			else if (Main.treeStyle[2] == 6)
 			{
 				Main.treeStyle[2] = WorldGen.genRand.Next(6);
 			}
-			while (Main.treeStyle[3] == Main.treeStyle[0] || Main.treeStyle[3] == Main.treeStyle[1] || Main.treeStyle[3] == Main.treeStyle[2])
+			else if (Main.treeStyle[3] == 6)
 			{
 				Main.treeStyle[3] = WorldGen.genRand.Next(6);
 			}
@@ -3206,6 +_,13 @@
 			Main.iceBackStyle = WorldGen.genRand.Next(4);
 			Main.hellBackStyle = WorldGen.genRand.Next(3);
 			Main.jungleBackStyle = WorldGen.genRand.Next(2);
+			Main.iceBackStyle = Main.setting.IceBackStyle == 0 ? Main.iceBackStyle : Main.setting.IceBackStyle - 1;
+			Main.hellBackStyle = Main.setting.HellBackStyle == 0 ? Main.hellBackStyle : Main.setting.HellBackStyle - 1;
+			Main.jungleBackStyle = Main.setting.JungleBackStyle == 0 ? Main.jungleBackStyle : Main.setting.JungleBackStyle - 1;
+			Main.caveBackStyle[0] = Main.setting.CaveBackStyle1 == 0 ? Main.caveBackStyle[0] : Main.setting.CaveBackStyle1 - 1;
+			Main.caveBackStyle[1] = Main.setting.CaveBackStyle2 == 0 ? Main.caveBackStyle[1] : Main.setting.CaveBackStyle2 - 1;
+			Main.caveBackStyle[2] = Main.setting.CaveBackStyle3 == 0 ? Main.caveBackStyle[2] : Main.setting.CaveBackStyle3 - 1;
+			Main.caveBackStyle[3] = Main.setting.CaveBackStyle4 == 0 ? Main.caveBackStyle[3] : Main.setting.CaveBackStyle4 - 1;
 		}
 
 		private static void ResetGenerator()
@@ -3621,9 +_,15 @@
 				return true;
 			}
 		}
-
+		// type: -1: random
+		// 0: 19/40, Dart
+		// 1: 19/40, Boulder // If snow/ice, change to dart
+		// 2: 1/20 Explosives
+		// 3: Below Lava: 5/6 Geyser
 		public static bool placeTrap(int x2, int y2, int type = -1)
 		{
+			int inType = type;
+			int wireType = WorldGen.genRand.Next(3);
 			int num = y2;
 			bool flag = false;
 			bool flag2 = false;
@@ -3688,7 +_,7 @@
 					{
 						if (Main.tile[i, j].type == 147 || Main.tile[i, j].type == 161)
 						{
-							type = 0;
+							type = 0; // change 1 to 0 if snow or ice block around
 						}
 					}
 				}
@@ -3787,25 +_,91 @@
 				int num10 = num;
 				while (num9 != num2 || num10 != num3)
 				{
-					Main.tile[num9, num10].wire(true);
-					if (num9 > num2)
-					{
-						num9--;
-					}
-					if (num9 < num2)
-					{
-						num9++;
-					}
-					Main.tile[num9, num10].wire(true);
-					if (num10 > num3)
-					{
-						num10--;
-					}
-					if (num10 < num3)
-					{
-						num10++;
-					}
-					Main.tile[num9, num10].wire(true);
+					if (wireType == 0)
+					{
+						Main.tile[num9, num10].wire(true);
+						if (num9 > num2)
+						{
+							num9--;
+						}
+						if (num9 < num2)
+						{
+							num9++;
+						}
+						Main.tile[num9, num10].wire(true);
+						if (num10 > num3)
+						{
+							num10--;
+						}
+						if (num10 < num3)
+						{
+							num10++;
+						}
+						Main.tile[num9, num10].wire(true);
+					}
+					else if (wireType == 1)
+					{
+						Main.tile[num9, num10].wire2(true);
+						if (num9 > num2)
+						{
+							num9--;
+						}
+						if (num9 < num2)
+						{
+							num9++;
+						}
+						Main.tile[num9, num10].wire2(true);
+						if (num10 > num3)
+						{
+							num10--;
+						}
+						if (num10 < num3)
+						{
+							num10++;
+						}
+						Main.tile[num9, num10].wire2(true);
+					}
+					else
+					{
+						Main.tile[num9, num10].wire3(true);
+						if (num9 > num2)
+						{
+							num9--;
+						}
+						if (num9 < num2)
+						{
+							num9++;
+						}
+						Main.tile[num9, num10].wire3(true);
+						if (num10 > num3)
+						{
+							num10--;
+						}
+						if (num10 < num3)
+						{
+							num10++;
+						}
+						Main.tile[num9, num10].wire3(true);
+					}
+					//Main.tile[num9, num10].wire(true);
+					//if (num9 > num2)
+					//{
+					//	num9--;
+					//}
+					//if (num9 < num2)
+					//{
+					//	num9++;
+					//}
+					//Main.tile[num9, num10].wire(true);
+					//if (num10 > num3)
+					//{
+					//	num10--;
+					//}
+					//if (num10 < num3)
+					//{
+					//	num10++;
+					//}
+					//Main.tile[num9, num10].wire(true);
 				}
 				WorldGen.trapDiag[type, 1]++;
 				return true;
@@ -3848,25 +_,95 @@
 						int num15 = num;
 						while (num14 != num12 || num15 != num13)
 						{
-							Main.tile[num14, num15].wire(true);
-							if (num14 > num12)
-							{
-								num14--;
-							}
-							if (num14 < num12)
-							{
-								num14++;
-							}
-							Main.tile[num14, num15].wire(true);
-							if (num15 > num13)
-							{
-								num15--;
-							}
-							if (num15 < num13)
-							{
-								num15++;
-							}
-							Main.tile[num14, num15].wire(true);
+							if (wireType == 0)
+							{
+								Main.tile[num14, num15].wire(true);
+								if (num14 > num12)
+								{
+									num14--;
+								}
+								if (num14 < num12)
+								{
+									num14++;
+								}
+								Main.tile[num14, num15].wire(true);
+								if (num15 > num13)
+								{
+									num15--;
+								}
+								if (num15 < num13)
+								{
+									num15++;
+								}
+								Main.tile[num14, num15].wire(true);
+							}
+							else if (wireType == 1)
+							{
+								Main.tile[num14, num15].wire2(true);
+								if (num14 > num12)
+								{
+									num14--;
+								}
+								if (num14 < num12)
+								{
+									num14++;
+								}
+								Main.tile[num14, num15].wire2(true);
+								if (num15 > num13)
+								{
+									num15--;
+								}
+								if (num15 < num13)
+								{
+									num15++;
+								}
+								Main.tile[num14, num15].wire2(true);
+							}
+							else
+							{
+								Main.tile[num14, num15].wire3(true);
+								if (num14 > num12)
+								{
+									num14--;
+								}
+								if (num14 < num12)
+								{
+									num14++;
+								}
+								Main.tile[num14, num15].wire3(true);
+								if (num15 > num13)
+								{
+									num15--;
+								}
+								if (num15 < num13)
+								{
+									num15++;
+								}
+								Main.tile[num14, num15].wire3(true);
+							}
+							//Main.tile[num14, num15].wire(true);
+							//if (num14 > num12)
+							//{
+							//	num14--;
+							//}
+							//if (num14 < num12)
+							//{
+							//	num14++;
+							//}
+							//Main.tile[num14, num15].wire(true);
+							//if (num15 > num13)
+							//{
+							//	num15--;
+							//}
+							//if (num15 < num13)
+							//{
+							//	num15++;
+							//}
+							//Main.tile[num14, num15].wire(true);
+						}
+						if (inType == 2)
+						{
+							return true;
 						}
 						WorldGen.trapDiag[type, 1]++;
 					}
@@ -3964,25 +_,91 @@
 											int num31 = num;
 											while (num30 != num19 || num31 != num18)
 											{
-												Main.tile[num30, num31].wire(true);
-												if (num30 > num19)
+												if (wireType == 0)
 												{
-													num30--;
+													Main.tile[num30, num31].wire(true);
+													if (num30 > num19)
+													{
+														num30--;
+													}
+													if (num30 < num19)
+													{
+														num30++;
+													}
+													Main.tile[num30, num31].wire(true);
+													if (num31 > num18)
+													{
+														num31--;
+													}
+													if (num31 < num18)
+													{
+														num31++;
+													}
+													Main.tile[num30, num31].wire(true);
 												}
-												if (num30 < num19)
+												else if (wireType == 1)
 												{
-													num30++;
+													Main.tile[num30, num31].wire2(true);
+													if (num30 > num19)
+													{
+														num30--;
+													}
+													if (num30 < num19)
+													{
+														num30++;
+													}
+													Main.tile[num30, num31].wire2(true);
+													if (num31 > num18)
+													{
+														num31--;
+													}
+													if (num31 < num18)
+													{
+														num31++;
+													}
+													Main.tile[num30, num31].wire2(true);
 												}
-												Main.tile[num30, num31].wire(true);
-												if (num31 > num18)
+												else
 												{
-													num31--;
+													Main.tile[num30, num31].wire3(true);
+													if (num30 > num19)
+													{
+														num30--;
+													}
+													if (num30 < num19)
+													{
+														num30++;
+													}
+													Main.tile[num30, num31].wire3(true);
+													if (num31 > num18)
+													{
+														num31--;
+													}
+													if (num31 < num18)
+													{
+														num31++;
+													}
+													Main.tile[num30, num31].wire3(true);
 												}
-												if (num31 < num18)
-												{
-													num31++;
-												}
-												Main.tile[num30, num31].wire(true);
+												//Main.tile[num30, num31].wire(true);
+												//if (num30 > num19)
+												//{
+												//	num30--;
+												//}
+												//if (num30 < num19)
+												//{
+												//	num30++;
+												//}
+												//Main.tile[num30, num31].wire(true);
+												//if (num31 > num18)
+												//{
+												//	num31--;
+												//}
+												//if (num31 < num18)
+												//{
+												//	num31++;
+												//}
+												//Main.tile[num30, num31].wire(true);
 											}
 											num17++;
 											WorldGen.trapDiag[type, 1]++;
@@ -4056,22 +_,22 @@
 				WorldGen.PlaceTile(num33 + 1, num32 + 2, 130, true, false, -1, 0);
 				WorldGen.PlaceTile(num33 + 1, num32 + 1, 138, true, false, -1, 0);
 				num32 += 2;
-				Main.tile[num33, num32].wire(true);
-				Main.tile[num33 + 1, num32].wire(true);
+				Main.tile[num33, num32].wire(true, wireType);
+				Main.tile[num33 + 1, num32].wire(true, wireType);
 				num32++;
 				WorldGen.PlaceTile(num33, num32, 130, true, false, -1, 0);
 				WorldGen.PlaceTile(num33 + 1, num32, 130, true, false, -1, 0);
-				Main.tile[num33, num32].wire(true);
-				Main.tile[num33 + 1, num32].wire(true);
+				Main.tile[num33, num32].wire(true, wireType);
+				Main.tile[num33 + 1, num32].wire(true, wireType);
 				WorldGen.PlaceTile(num33, num32 + 1, 130, true, false, -1, 0);
 				WorldGen.PlaceTile(num33 + 1, num32 + 1, 130, true, false, -1, 0);
-				Main.tile[num33, num32 + 1].wire(true);
-				Main.tile[num33 + 1, num32 + 1].wire(true);
+				Main.tile[num33, num32 + 1].wire(true, wireType);
+				Main.tile[num33 + 1, num32 + 1].wire(true, wireType);
 				int num41 = x2;
 				int num42 = num;
 				while (num41 != num33 || num42 != num32)
 				{
-					Main.tile[num41, num42].wire(true);
+					Main.tile[num41, num42].wire(true, wireType);
 					if (num41 > num33)
 					{
 						num41--;
@@ -4080,7 +_,7 @@
 					{
 						num41++;
 					}
-					Main.tile[num41, num42].wire(true);
+					Main.tile[num41, num42].wire(true, wireType);
 					if (num42 > num32)
 					{
 						num42--;
@@ -4089,7 +_,7 @@
 					{
 						num42++;
 					}
-					Main.tile[num41, num42].wire(true);
+					Main.tile[num41, num42].wire(true, wireType);
 				}
 				WorldGen.trapDiag[type, 1]++;
 				return true;
@@ -4226,6 +_,11 @@
 			return x >= fluff && x < Main.maxTilesX - fluff && y >= fluff && y < Main.maxTilesY - fluff;
 		}
 
+		public static bool InWorldY(int y, int fluff = 0)
+		{
+			return y >= fluff && y < Main.maxTilesY - fluff;
+		}
+
 		public static void gemCave(int x, int y)
 		{
 			WorldGen.countTiles(x, y, false, false);
@@ -4286,14 +_,31 @@
 
 		public static void randMoss()
 		{
-			WorldGen.mossType[0] = WorldGen.genRand.Next(5);
-			WorldGen.mossType[1] = WorldGen.genRand.Next(5);
-			while (WorldGen.mossType[1] == WorldGen.mossType[0])
-			{
+			Main.setting.SelectMossType.CopyTo(WorldGen.mossType, 0);
+			if (WorldGen.mossType[0] == 5 && WorldGen.mossType[1] == 5 && WorldGen.mossType[2] == 5)
+			{
+				WorldGen.mossType[0] = WorldGen.genRand.Next(5);
 				WorldGen.mossType[1] = WorldGen.genRand.Next(5);
-			}
-			WorldGen.mossType[2] = WorldGen.genRand.Next(5);
-			while (WorldGen.mossType[2] == WorldGen.mossType[0] || WorldGen.mossType[2] == WorldGen.mossType[1])
+				while (WorldGen.mossType[1] == WorldGen.mossType[0])
+				{
+					WorldGen.mossType[1] = WorldGen.genRand.Next(5);
+				}
+				WorldGen.mossType[2] = WorldGen.genRand.Next(5);
+				while (WorldGen.mossType[2] == WorldGen.mossType[0] || WorldGen.mossType[2] == WorldGen.mossType[1])
+				{
+					WorldGen.mossType[2] = WorldGen.genRand.Next(5);
+				}
+				return;
+			}
+			if (WorldGen.mossType[0] == 5)
+			{
+				WorldGen.mossType[0] = WorldGen.genRand.Next(5);
+			}
+			if (WorldGen.mossType[1] == 5)
+			{
+				WorldGen.mossType[1] = WorldGen.genRand.Next(5);
+			}
+			if (WorldGen.mossType[2] == 5)
 			{
 				WorldGen.mossType[2] = WorldGen.genRand.Next(5);
 			}
@@ -4494,6 +_,7 @@
 			int silver = 9;
 			int gold = 8;
 			int dungeonSide = 0;
+			int crimsonSide = 0;
 			ushort jungleHut = (ushort)WorldGen.genRand.Next(5);
 			int howFar = 0;
 			int[] PyrX = null;
@@ -4558,30 +_,70 @@
 					WorldGen.ironBar = 22;
 					WorldGen.silverBar = 21;
 					WorldGen.goldBar = 19;
-					if (WorldGen.genRand.Next(2) == 0)
+					//if (WorldGen.genRand.Next(2) == 0)
+					if (Main.setting.IsCopper == 0 || (Main.setting.IsCopper == 2 && WorldGen.genRand.Next(2) == 0))
 					{
 						copper = 166;
 						WorldGen.copperBar = 703;
 						WorldGen.CopperTierOre = 166;
 					}
-					if (WorldGen.genRand.Next(2) == 0)
+					//if (WorldGen.genRand.Next(2) == 0)
+					if (Main.setting.IsIron == 0 || (Main.setting.IsIron == 2 && WorldGen.genRand.Next(2) == 0))
 					{
 						iron = 167;
 						WorldGen.ironBar = 704;
 						WorldGen.IronTierOre = 167;
 					}
-					if (WorldGen.genRand.Next(2) == 0)
+					//if (WorldGen.genRand.Next(2) == 0)
+					if (Main.setting.IsSilver == 0 || (Main.setting.IsSilver == 2 && WorldGen.genRand.Next(2) == 0))
 					{
 						silver = 168;
 						WorldGen.silverBar = 705;
 						WorldGen.SilverTierOre = 168;
 					}
-					if (WorldGen.genRand.Next(2) == 0)
+					//if (WorldGen.genRand.Next(2) == 0)
+					if (Main.setting.IsGold == 0 || (Main.setting.IsGold == 2 && WorldGen.genRand.Next(2) == 0))
 					{
 						gold = 169;
 						WorldGen.goldBar = 706;
 						WorldGen.GoldTierOre = 169;
 					}
+					if (Main.setting.IsCobalt == 0)
+					{
+						oreTier1 = 221;
+					}
+					else if (Main.setting.IsCobalt == 1)
+					{
+						oreTier1 = 107;//Terraria.ID.TileID.Cobalt
+					}
+					else
+					{
+						oreTier1 = -1;
+					}
+					if (Main.setting.IsMythril == 0)
+					{
+						oreTier2 = 222;
+					}
+					else if (Main.setting.IsMythril == 1)
+					{
+						oreTier2 = 108;
+					}
+					else
+					{
+						oreTier2 = -1;
+					}
+					if (Main.setting.IsAdaman == 0)
+					{
+						oreTier3 = 223;
+					}
+					else if (Main.setting.IsAdaman == 1)
+					{
+						oreTier3 = 111;
+					}
+					else
+					{
+						oreTier3 = -1;
+					}
 					WorldGen.crimson = (WorldGen.genRand.Next(2) == 0);
 					if (WorldGen.WorldGenParam_Evil == 0)
 					{
@@ -4591,7 +_,16 @@
 					{
 						WorldGen.crimson = true;
 					}
+					jungleHut = (ushort)Main.setting.ShrineType;
 					if (jungleHut == 0)
+ 					{
+						jungleHut = (ushort)WorldGen.genRand.Next(5);
+					}
+					else
+					{
+						jungleHut--;
+					}
+					if (jungleHut == 0)
 					{
 						jungleHut = 119;
 					}
@@ -4611,19 +_,49 @@
 					{
 						jungleHut = 45;
 					}
+					else
+					{
+						jungleHut = 45;
+					}
+					switch (Main.setting.IsCorruption)
+					{
+						case 2:
+						case 4:
+							WorldGen.crimson = true;
+							goto IL_203;
+						case 1:
+						case 3:
+							WorldGen.crimson = false;
+							goto IL_203;
+					}
+					WorldGen.crimson = (WorldGen.genRand.Next(2) == 0);
+					IL_203:
 					Main.worldID = WorldGen.genRand.Next(2147483647);
 					WorldGen.RandomizeTreeStyle();
 					WorldGen.RandomizeCaveBackgrounds();
 					WorldGen.RandomizeBackgrounds();
 					WorldGen.RandomizeMoonState();
 					dungeonSide = ((WorldGen.genRand.Next(2) == 0) ? -1 : 1);
+					switch (Main.setting.DungeonSide)
+					{
+						case 1:
+							dungeonSide = -1;
+							break;
+						case 2:
+							dungeonSide = 1;
+							break;
+					}
+					if (Main.setting.CrimsonCorruptionAvoidEachOther && (Main.setting.IsCorruption == 3 || Main.setting.IsCorruption == 4) && !Main.setting.CrimsonCorruptionAvoidJungle)
+					{
+						crimsonSide = ((WorldGen.genRand.Next(2) == 0) ? -1 : 1);
+					}
 				});
 			WorldGen.AddGenerationPass("Terrain", delegate(GenerationProgress progress)
 				{
 					progress.Message = Lang.gen[0];
 					int num = 0;
 					int num2 = 0;
-					worldSurface = (double)Main.maxTilesY * 0.3;
+					worldSurface = (double)Main.maxTilesY * Main.setting.SurfaceTerrainHeightMin/*0.3*/;
 					worldSurface *= (double)WorldGen.genRand.Next(90, 110) * 0.005;
 					rockLayer = worldSurface + (double)Main.maxTilesY * 0.2;
 					rockLayer *= (double)WorldGen.genRand.Next(90, 110) * 0.01;
@@ -4631,6 +_,7 @@
 					worldSurfaceHigh = worldSurface;
 					rockLayerLow = rockLayer;
 					rockLayerHigh = rockLayer;
+					double oldWorldSurface = worldSurface;
 					for (int k = 0; k < Main.maxTilesX; k++)
 					{
 						float value = (float)k / (float)Main.maxTilesX;
@@ -4660,23 +_,25 @@
 								num2 *= (int)((double)WorldGen.genRand.Next(5, 30) * 0.2);
 							}
 						}
-						num2--;
-						if ((double)k > (double)Main.maxTilesX * 0.43 && (double)k < (double)Main.maxTilesX * 0.57 && num >= 3)
-						{
-							num = WorldGen.genRand.Next(3);
-						}
-						if ((double)k > (double)Main.maxTilesX * 0.47 && (double)k < (double)Main.maxTilesX * 0.53)
-						{
-							num = 0;
-						}
-						if (num == 0)
+						num2--; // randomness??
+						if ((double)k > (double)Main.maxTilesX * 0.43 && (double)k < (double)Main.maxTilesX * 0.57 && num >= 3) // flatish near bigger middle
+						{
+							if(!Main.setting.BypassSpawnAreaFlatness)
+								num = WorldGen.genRand.Next(3);
+						}
+						if ((double)k > (double)Main.maxTilesX * 0.47 && (double)k < (double)Main.maxTilesX * 0.53) // flat near middle
+						{
+							if(!Main.setting.BypassSpawnAreaFlatness)
+								num = 0;
+						}
+						if (num == 0)  // +/- 1: 1/7th chance
 						{
 							while (WorldGen.genRand.Next(0, 7) == 0)
 							{
 								worldSurface += (double)WorldGen.genRand.Next(-1, 2);
 							}
 						}
-						else if (num == 1)
+						else if (num == 1) // 1/4 chance -1(up) 1/10 chance down
 						{
 							while (WorldGen.genRand.Next(0, 4) == 0)
 							{
@@ -4687,7 +_,7 @@
 								worldSurface += 1.0;
 							}
 						}
-						else if (num == 2)
+						else if (num == 2)  // 1/10 chance -1(up) 1/4 chance down
 						{
 							while (WorldGen.genRand.Next(0, 4) == 0)
 							{
@@ -4698,7 +_,7 @@
 								worldSurface -= 1.0;
 							}
 						}
-						else if (num == 3)
+						else if (num == 3)   // 1/2 chance -1(up) 1/6 chance down
 						{
 							while (WorldGen.genRand.Next(0, 2) == 0)
 							{
@@ -4709,7 +_,7 @@
 								worldSurface += 1.0;
 							}
 						}
-						else if (num == 4)
+						else if (num == 4)  // 1/5 chance -1(up) 1/2 chance down
 						{
 							while (WorldGen.genRand.Next(0, 2) == 0)
 							{
@@ -4720,21 +_,24 @@
 								worldSurface -= 1.0;
 							}
 						}
-						if (worldSurface < (double)Main.maxTilesY * 0.17)
-						{
-							worldSurface = (double)Main.maxTilesY * 0.17;
+						worldSurface = oldWorldSurface + ((worldSurface - oldWorldSurface) * Main.setting.SurfaceTerrainHeightMultiplier);
+						double a = worldSurface - Math.Truncate(worldSurface);
+						if (worldSurface < (double)Main.maxTilesY * Main.setting.SurfaceTerrainHeightMax/*0.17*/) // prevent surface from going to high
+						{
+							worldSurface = (double)Main.maxTilesY * Main.setting.SurfaceTerrainHeightMax;
 							num2 = 0;
 						}
-						else if (worldSurface > (double)Main.maxTilesY * 0.3)
-						{
-							worldSurface = (double)Main.maxTilesY * 0.3;
+						else if (worldSurface > (double)Main.maxTilesY * Main.setting.SurfaceTerrainHeightMin/*0.3*/) // prevent surface from going too deep
+						{
+							worldSurface = (double)Main.maxTilesY * Main.setting.SurfaceTerrainHeightMin/*0.3*/;
 							num2 = 0;
 						}
-						if ((k < 275 || k > Main.maxTilesX - 275) && worldSurface > (double)Main.maxTilesY * 0.25)
-						{
-							worldSurface = (double)Main.maxTilesY * 0.25;
+						if ((k < 275 || k > Main.maxTilesX - 275) && worldSurface > (double)Main.maxTilesY * (Main.setting.SurfaceTerrainHeightMin - .05)/*0.25*/) // prevent ocean from being too deep
+						{
+							worldSurface = (double)Main.maxTilesY * (Main.setting.SurfaceTerrainHeightMin - .05)/*0.25*/;
 							num2 = 1;
 						}
+						oldWorldSurface = worldSurface + a;
 						while (WorldGen.genRand.Next(0, 3) == 0)
 						{
 							rockLayer += (double)WorldGen.genRand.Next(-2, 3);
@@ -4750,7 +_,7 @@
 						int num3 = 0;
 						while ((double)num3 < worldSurface)
 						{
-							Main.tile[k, num3].active(false);
+							Main.tile[k, num3].active(false); // sky
 							Main.tile[k, num3].frameX = -1;
 							Main.tile[k, num3].frameY = -1;
 							num3++;
@@ -4760,14 +_,14 @@
 							if ((double)l < rockLayer)
 							{
 								Main.tile[k, l].active(true);
-								Main.tile[k, l].type = 0;
+								Main.tile[k, l].type = 0;// TileID.Dirt
 								Main.tile[k, l].frameX = -1;
 								Main.tile[k, l].frameY = -1;
 							}
 							else
 							{
 								Main.tile[k, l].active(true);
-								Main.tile[k, l].type = 1;
+								Main.tile[k, l].type = 1;// TileID.Stone
 								Main.tile[k, l].frameX = -1;
 								Main.tile[k, l].frameY = -1;
 							}
@@ -4780,10 +_,11 @@
 					WorldGen.waterLine = (int)(Main.rockLayer + (double)Main.maxTilesY) / 2;
 					WorldGen.waterLine += WorldGen.genRand.Next(-100, 20);
 					WorldGen.lavaLine = WorldGen.waterLine + WorldGen.genRand.Next(50, 80);
+					// TODO, lava world, set lavaline to real high
 				});
 			WorldGen.AddGenerationPass("Tunnels", delegate(GenerationProgress progress)
 				{
-					for (int k = 0; k < (int)((double)Main.maxTilesX * 0.0015); k++)
+					for (int k = 0; k < (int)((double)Main.maxTilesX * 0.0015 * Main.setting.SurfaceHorizontalTunnelsMultiplier); k++)
 					{
 						int[] array = new int[10];
 						int[] array2 = new int[10];
@@ -4828,7 +_,7 @@
 						int num3 = WorldGen.genRand.Next(35, 90);
 						if (k == 1)
 						{
-							float num4 = (float)(Main.maxTilesX / 4200);
+							float num4 = ((float)Main.maxTilesX / 4200);
 							num3 += (int)((float)WorldGen.genRand.Next(20, 40) * num4);
 						}
 						if (WorldGen.genRand.Next(3) == 0)
@@ -4896,7 +_,16 @@
 							{
 								if (Main.tile[l, num8].active())
 								{
-									if (l == (num5 + num6) / 2 && WorldGen.genRand.Next(6) == 0)
+									if (Main.setting.IsPyramid == 2 || Main.setting.IsPyramid == 0)
+									{
+										if (l == (num5 + num6) / 2 && WorldGen.genRand.Next(6) == 0)
+										{
+											PyrX[numPyr] = l;
+											PyrY[numPyr] = num8;
+											numPyr++;
+										}
+									}
+									else if (Main.setting.IsPyramid == 1 && l == (num5 + num6) / 2)
 									{
 										PyrX[numPyr] = l;
 										PyrY[numPyr] = num8;
@@ -4927,6 +_,7 @@
 					}
 					for (int n = 0; n < (int)((double)(Main.maxTilesX * Main.maxTilesY) * 8E-06); n++)
 					{
+						// TODO sand ammount  TileID.Sand
 						WorldGen.TileRunner(WorldGen.genRand.Next(0, Main.maxTilesX), WorldGen.genRand.Next((int)Main.worldSurface, (int)Main.rockLayer), (double)WorldGen.genRand.Next(15, 70), WorldGen.genRand.Next(20, 130), 53, false, 0f, 0f, false, true);
 					}
 				});
@@ -5070,6 +_,7 @@
 			WorldGen.AddGenerationPass("Clay", delegate(GenerationProgress progress)
 				{
 					progress.Message = Lang.gen[6];
+					// TODO clay spawn
 					for (int k = 0; k < (int)((double)(Main.maxTilesX * Main.maxTilesY) * 2E-05); k++)
 					{
 						WorldGen.TileRunner(WorldGen.genRand.Next(0, Main.maxTilesX), WorldGen.genRand.Next(0, (int)WorldGen.worldSurfaceLow), (double)WorldGen.genRand.Next(4, 14), WorldGen.genRand.Next(10, 50), 40, false, 0f, 0f, false, true);
@@ -5233,13 +_,20 @@
 							num4++;
 						}
 					}
-					float num5 = (float)(Main.maxTilesX / 4200);
+					float num5 = ((float)Main.maxTilesX / 4200);
 					int num6 = 0;
 					while ((float)num6 < 5f * num5)
 					{
 						try
 						{
-							WorldGen.Caverer(WorldGen.genRand.Next(100, Main.maxTilesX - 100), WorldGen.genRand.Next((int)Main.rockLayer, Main.maxTilesY - 400));
+							if (Main.maxTilesY > 1000)
+							{
+								WorldGen.Caverer(WorldGen.genRand.Next(100, Main.maxTilesX - 100), WorldGen.genRand.Next((int)Main.rockLayer, Main.maxTilesY - 400));
+							}
+							else
+							{
+								WorldGen.Caverer(WorldGen.genRand.Next(100, Main.maxTilesX - 100), WorldGen.genRand.Next((int)Main.rockLayer, Main.maxTilesY - 100));
+							}
 						}
 						catch
 						{
@@ -5249,48 +_,57 @@
 				});
 			WorldGen.AddGenerationPass("Slush Check", delegate(GenerationProgress progress)
 				{
+					if (Main.setting.NoSnow) return;
 					progress.Message = Lang.gen[56];
 					snowTop = (int)Main.worldSurface;
-					int num = WorldGen.genRand.Next(Main.maxTilesX);
+					int snowCenterX = WorldGen.genRand.Next(Main.maxTilesX);
 					if (dungeonSide == 1)
 					{
-						while ((float)num < (float)Main.maxTilesX * 0.55f || (float)num > (float)Main.maxTilesX * 0.7f)
-						{
-							num = WorldGen.genRand.Next(Main.maxTilesX);
+						while ((float)snowCenterX < (float)Main.maxTilesX * 0.55f || (float)snowCenterX > (float)Main.maxTilesX * 0.7f)
+						{
+							snowCenterX = WorldGen.genRand.Next(Main.maxTilesX);
 						}
 					}
 					else
 					{
-						while ((float)num < (float)Main.maxTilesX * 0.3f || (float)num > (float)Main.maxTilesX * 0.45f)
-						{
-							num = WorldGen.genRand.Next(Main.maxTilesX);
+						while ((float)snowCenterX < (float)Main.maxTilesX * 0.3f || (float)snowCenterX > (float)Main.maxTilesX * 0.45f)
+						{
+							snowCenterX = WorldGen.genRand.Next(Main.maxTilesX);
 						}
 					}
 					int num2 = WorldGen.genRand.Next(50, 90);
-					float num3 = (float)(Main.maxTilesX / 4200);
+					float num3 = ((float)Main.maxTilesX / 4200); // int division fix
 					num2 += (int)((float)WorldGen.genRand.Next(20, 40) * num3);
 					num2 += (int)((float)WorldGen.genRand.Next(20, 40) * num3);
-					int num4 = num - num2;
+					int snowLeftX = snowCenterX - num2;
 					num2 = WorldGen.genRand.Next(50, 90);
 					num2 += (int)((float)WorldGen.genRand.Next(20, 40) * num3);
 					num2 += (int)((float)WorldGen.genRand.Next(20, 40) * num3);
-					int num5 = num + num2;
-					if (num4 < 0)
-					{
-						num4 = 0;
-					}
-					if (num5 > Main.maxTilesX)
-					{
-						num5 = Main.maxTilesX;
+					int snowRightX = snowCenterX + num2;
+					if (snowLeftX < 0)
+					{
+						snowLeftX = 0;
+					}
+					if (snowRightX > Main.maxTilesX)
+					{
+						snowRightX = Main.maxTilesX;
 					}
 					int num6 = 10;
 					for (int k = 0; k <= WorldGen.lavaLine - 140; k++)
 					{
-						num4 += WorldGen.genRand.Next(-4, 4);
-						num5 += WorldGen.genRand.Next(-3, 5);
-						snowMinX[k] = num4;
-						snowMaxX[k] = num5;
-						for (int l = num4; l < num5; l++)
+						snowLeftX += WorldGen.genRand.Next(-4, 4);
+						snowRightX += WorldGen.genRand.Next(-3, 5);
+						if (snowLeftX < 0)
+						{
+							snowLeftX = 0;
+						}
+						if (snowRightX > Main.maxTilesX)
+						{
+							snowRightX = Main.maxTilesX;
+						}
+						snowMinX[k] = snowLeftX;
+						snowMaxX[k] = snowRightX;
+						for (int l = snowLeftX; l < snowRightX; l++)
 						{
 							if (k < WorldGen.lavaLine - 140)
 							{
@@ -5381,9 +_,11 @@
 				});
 			WorldGen.AddGenerationPass("Jungle", delegate(GenerationProgress progress)
 				{
+					if (Main.setting.NoJungle) return;
 					progress.Message = Lang.gen[11];
-					float num = (float)(Main.maxTilesX / 4200);
-					num *= 1.5f;
+					float xStrength = ((float)Main.maxTilesX / 4200); // Int division fix
+					xStrength *= 1.5f;
+					float yStrength = ((float)Main.maxTilesY / 4200) * 3.5f * 1.5f;
 					float num2 = (float)WorldGen.genRand.Next(15, 30) * 0.01f;
 					int num3;
 					if (dungeonSide == -1)
@@ -5396,52 +_,52 @@
 						num3 = (int)((float)Main.maxTilesX * num2);
 					}
 					int num4 = (int)((double)Main.maxTilesY + Main.rockLayer) / 2;
-					num3 += WorldGen.genRand.Next((int)(-100f * num), (int)(101f * num));
-					num4 += WorldGen.genRand.Next((int)(-100f * num), (int)(101f * num));
+					num3 += WorldGen.genRand.Next((int)(-100f * xStrength), (int)(101f * xStrength));
+					num4 += WorldGen.genRand.Next((int)(-100f * yStrength), (int)(101f * yStrength));
 					int num5 = num3;
 					int num6 = num4;
-					WorldGen.TileRunner(num3, num4, (double)WorldGen.genRand.Next((int)(250f * num), (int)(500f * num)), WorldGen.genRand.Next(50, 150), 59, false, (float)(dungeonSide * 3), 0f, false, true);
+					WorldGen.TileRunner(num3, num4, (double)WorldGen.genRand.Next((int)(250f * xStrength), (int)(500f * xStrength)), WorldGen.genRand.Next(50, 150), 59, false, (float)(dungeonSide * 3), 0f, false, true);
 					int num7 = 0;
-					while ((float)num7 < 6f * num)
-					{
-						WorldGen.TileRunner(num3 + WorldGen.genRand.Next(-(int)(125f * num), (int)(125f * num)), num4 + WorldGen.genRand.Next(-(int)(125f * num), (int)(125f * num)), (double)WorldGen.genRand.Next(3, 7), WorldGen.genRand.Next(3, 8), WorldGen.genRand.Next(63, 65), false, 0f, 0f, false, true);
+					while ((float)num7 < 6f * xStrength)
+					{
+						WorldGen.TileRunner(num3 + WorldGen.genRand.Next(-(int)(125f * xStrength), (int)(125f * xStrength)), num4 + WorldGen.genRand.Next(-(int)(125f * yStrength), (int)(125f * yStrength)), (double)WorldGen.genRand.Next(3, 7), WorldGen.genRand.Next(3, 8), WorldGen.genRand.Next(63, 65), false, 0f, 0f, false, true);
 						num7++;
 					}
 					WorldGen.mudWall = true;
 					progress.Set(0.15f);
-					num3 += WorldGen.genRand.Next((int)(-250f * num), (int)(251f * num));
-					num4 += WorldGen.genRand.Next((int)(-150f * num), (int)(151f * num));
+					num3 += WorldGen.genRand.Next((int)(-250f * xStrength), (int)(251f * xStrength));
+					num4 += WorldGen.genRand.Next((int)(-150f * yStrength), (int)(151f * yStrength));
 					int num8 = num3;
 					int num9 = num4;
 					int num10 = num3;
 					int num11 = num4;
-					WorldGen.TileRunner(num3, num4, (double)WorldGen.genRand.Next((int)(250f * num), (int)(500f * num)), WorldGen.genRand.Next(50, 150), 59, false, 0f, 0f, false, true);
+					WorldGen.TileRunner(num3, num4, (double)WorldGen.genRand.Next((int)(250f * xStrength), (int)(500f * xStrength)), WorldGen.genRand.Next(50, 150), 59, false, 0f, 0f, false, true);
 					WorldGen.mudWall = false;
 					int num12 = 0;
-					while ((float)num12 < 6f * num)
-					{
-						WorldGen.TileRunner(num3 + WorldGen.genRand.Next(-(int)(125f * num), (int)(125f * num)), num4 + WorldGen.genRand.Next(-(int)(125f * num), (int)(125f * num)), (double)WorldGen.genRand.Next(3, 7), WorldGen.genRand.Next(3, 8), WorldGen.genRand.Next(65, 67), false, 0f, 0f, false, true);
+					while ((float)num12 < 6f * xStrength)
+					{
+						WorldGen.TileRunner(num3 + WorldGen.genRand.Next(-(int)(125f * xStrength), (int)(125f * xStrength)), num4 + WorldGen.genRand.Next(-(int)(125f * yStrength), (int)(125f * yStrength)), (double)WorldGen.genRand.Next(3, 7), WorldGen.genRand.Next(3, 8), WorldGen.genRand.Next(65, 67), false, 0f, 0f, false, true);
 						num12++;
 					}
 					WorldGen.mudWall = true;
 					progress.Set(0.3f);
-					num3 += WorldGen.genRand.Next((int)(-400f * num), (int)(401f * num));
-					num4 += WorldGen.genRand.Next((int)(-150f * num), (int)(151f * num));
+					num3 += WorldGen.genRand.Next((int)(-400f * xStrength), (int)(401f * xStrength));
+					num4 += WorldGen.genRand.Next((int)(-150f * yStrength), (int)(151f * yStrength));
 					int num13 = num3;
 					int num14 = num4;
-					WorldGen.TileRunner(num3, num4, (double)WorldGen.genRand.Next((int)(250f * num), (int)(500f * num)), WorldGen.genRand.Next(50, 150), 59, false, (float)(dungeonSide * -3), 0f, false, true);
+					WorldGen.TileRunner(num3, num4, (double)WorldGen.genRand.Next((int)(250f * xStrength), (int)(500f * xStrength)), WorldGen.genRand.Next(50, 150), 59, false, (float)(dungeonSide * -3), 0f, false, true);
 					WorldGen.mudWall = false;
 					int num15 = 0;
-					while ((float)num15 < 6f * num)
-					{
-						WorldGen.TileRunner(num3 + WorldGen.genRand.Next(-(int)(125f * num), (int)(125f * num)), num4 + WorldGen.genRand.Next(-(int)(125f * num), (int)(125f * num)), (double)WorldGen.genRand.Next(3, 7), WorldGen.genRand.Next(3, 8), WorldGen.genRand.Next(67, 69), false, 0f, 0f, false, true);
+					while ((float)num15 < 6f * xStrength)
+					{
+						WorldGen.TileRunner(num3 + WorldGen.genRand.Next(-(int)(125f * xStrength), (int)(125f * xStrength)), num4 + WorldGen.genRand.Next(-(int)(125f * yStrength), (int)(125f * yStrength)), (double)WorldGen.genRand.Next(3, 7), WorldGen.genRand.Next(3, 8), WorldGen.genRand.Next(67, 69), false, 0f, 0f, false, true);
 						num15++;
 					}
 					WorldGen.mudWall = true;
 					progress.Set(0.45f);
 					num3 = (num5 + num8 + num13) / 3;
 					num4 = (num6 + num9 + num14) / 3;
-					WorldGen.TileRunner(num3, num4, (double)WorldGen.genRand.Next((int)(400f * num), (int)(600f * num)), 10000, 59, false, 0f, -20f, true, true);
+					WorldGen.TileRunner(num3, num4, (double)WorldGen.genRand.Next((int)(400f * xStrength), (int)(600f * xStrength)), 10000, 59, false, 0f, -20f, true, true);
 					WorldGen.JungleRunner(num3, num4);
 					progress.Set(0.6f);
 					WorldGen.mudWall = false;
@@ -5459,27 +_,27 @@
 					num3 = num10;
 					num4 = num11;
 					int num16 = 0;
-					while ((float)num16 <= 20f * num)
-					{
-						progress.Set((60f + (float)num16 / num) * 0.01f);
-						num3 += WorldGen.genRand.Next((int)(-5f * num), (int)(6f * num));
-						num4 += WorldGen.genRand.Next((int)(-5f * num), (int)(6f * num));
+					while ((float)num16 <= 20f * xStrength)
+					{
+						progress.Set((60f + (float)num16 / xStrength) * 0.01f);
+						num3 += WorldGen.genRand.Next((int)(-5f * xStrength), (int)(6f * xStrength));
+						num4 += WorldGen.genRand.Next((int)(-5f * yStrength), (int)(6f * yStrength));
 						WorldGen.TileRunner(num3, num4, (double)WorldGen.genRand.Next(40, 100), WorldGen.genRand.Next(300, 500), 59, false, 0f, 0f, false, true);
 						num16++;
 					}
 					int num17 = 0;
-					while ((float)num17 <= 10f * num)
-					{
-						progress.Set((80f + (float)num17 / num * 2f) * 0.01f);
-						num3 = num10 + WorldGen.genRand.Next((int)(-600f * num), (int)(600f * num));
-						num4 = num11 + WorldGen.genRand.Next((int)(-200f * num), (int)(200f * num));
+					while ((float)num17 <= 10f * xStrength)
+					{
+						progress.Set((80f + (float)num17 / xStrength * 2f) * 0.01f);
+						num3 = num10 + WorldGen.genRand.Next((int)(-600f * xStrength), (int)(600f * xStrength));
+						num4 = num11 + WorldGen.genRand.Next((int)(-200f * yStrength), (int)(200f * yStrength));
 						while (num3 < 1 || num3 >= Main.maxTilesX - 1 || num4 < 1 || num4 >= Main.maxTilesY - 1 || Main.tile[num3, num4].type != 59)
 						{
-							num3 = num10 + WorldGen.genRand.Next((int)(-600f * num), (int)(600f * num));
-							num4 = num11 + WorldGen.genRand.Next((int)(-200f * num), (int)(200f * num));
+							num3 = num10 + WorldGen.genRand.Next((int)(-600f * xStrength), (int)(600f * xStrength));
+							num4 = num11 + WorldGen.genRand.Next((int)(-200f * yStrength), (int)(200f * yStrength));
 						}
 						int num18 = 0;
-						while ((float)num18 < 8f * num)
+						while ((float)num18 < 8f * xStrength)
 						{
 							num3 += WorldGen.genRand.Next(-30, 31);
 							num4 += WorldGen.genRand.Next(-30, 31);
@@ -5494,14 +_,14 @@
 						num17++;
 					}
 					int num19 = 0;
-					while ((float)num19 <= 300f * num)
-					{
-						num3 = num10 + WorldGen.genRand.Next((int)(-600f * num), (int)(600f * num));
-						num4 = num11 + WorldGen.genRand.Next((int)(-200f * num), (int)(200f * num));
+					while ((float)num19 <= 300f * xStrength)
+					{
+						num3 = num10 + WorldGen.genRand.Next((int)(-600f * xStrength), (int)(600f * xStrength));
+						num4 = num11 + WorldGen.genRand.Next((int)(-200f * yStrength), (int)(200f * yStrength));
 						while (num3 < 1 || num3 >= Main.maxTilesX - 1 || num4 < 1 || num4 >= Main.maxTilesY - 1 || Main.tile[num3, num4].type != 59)
 						{
-							num3 = num10 + WorldGen.genRand.Next((int)(-600f * num), (int)(600f * num));
-							num4 = num11 + WorldGen.genRand.Next((int)(-200f * num), (int)(200f * num));
+							num3 = num10 + WorldGen.genRand.Next((int)(-600f * xStrength), (int)(600f * xStrength));
+							num4 = num11 + WorldGen.genRand.Next((int)(-200f * yStrength), (int)(200f * yStrength));
 						}
 						WorldGen.TileRunner(num3, num4, (double)WorldGen.genRand.Next(4, 10), WorldGen.genRand.Next(5, 30), 1, false, 0f, 0f, false, true);
 						if (WorldGen.genRand.Next(4) == 0)
@@ -5516,7 +_,7 @@
 				{
 					progress.Message = Lang.gen[80];
 					float num = (float)(Main.maxTilesX * Main.maxTilesY) / 5040000f;
-					int num2 = (int)((float)WorldGen.genRand.Next(10, 15) * num);
+					int num2 = (int)((float)WorldGen.genRand.Next(10, 15) * num * Main.setting.MarbleCaveMultiplier);
 					float num3 = (float)(Main.maxTilesX - 160) / (float)num2;
 					int k = 0;
 					while (k < num2)
@@ -5534,7 +_,7 @@
 				{
 					progress.Message = Lang.gen[81];
 					float num = (float)Main.maxTilesX / 4200f;
-					int num2 = (int)((float)WorldGen.genRand.Next(8, 14) * num);
+					int num2 = (int)((float)WorldGen.genRand.Next(8, 14) * num * Main.setting.GraniteCaveMultiplier);
 					float num3 = (float)(Main.maxTilesX - 200) / (float)num2;
 					int k = 0;
 					while (k < num2)
@@ -5582,6 +_,7 @@
 				});
 			WorldGen.AddGenerationPass("Full Desert", delegate(GenerationProgress progress)
 				{
+					if (Main.setting.NoAnthill) return;
 					progress.Message = Lang.gen[78];
 					int num = dungeonSide;
 					int num2 = Main.maxTilesX / 2;
@@ -5601,25 +_,26 @@
 						}
 					}
 				});
+			// TODO Floating Island
 			WorldGen.AddGenerationPass("Floating Islands", delegate(GenerationProgress progress)
 				{
 					WorldGen.numIslandHouses = 0;
 					WorldGen.houseCount = 0;
 					progress.Message = Lang.gen[12];
-					for (int k = 0; k < (int)((double)Main.maxTilesX * 0.0008) + skyLakes; k++)
+					for (int k = 0; k < (int)((double)Main.maxTilesX * 0.0008 * Main.setting.SkyIslandMultiplier) + skyLakes; k++)
 					{
 						int num = 1000;
-						int num2 = WorldGen.genRand.Next((int)((double)Main.maxTilesX * 0.1), (int)((double)Main.maxTilesX * 0.9));
+						int cloudX = WorldGen.genRand.Next((int)((double)Main.maxTilesX * 0.1), (int)((double)Main.maxTilesX * 0.9));
 						while (--num > 0)
 						{
 							bool flag2 = true;
-							while (num2 > Main.maxTilesX / 2 - 80 && num2 < Main.maxTilesX / 2 + 80)
-							{
-								num2 = WorldGen.genRand.Next((int)((double)Main.maxTilesX * 0.1), (int)((double)Main.maxTilesX * 0.9));
+							while (cloudX > Main.maxTilesX / 2 - 80 && cloudX < Main.maxTilesX / 2 + 80)
+							{
+								cloudX = WorldGen.genRand.Next((int)((double)Main.maxTilesX * 0.1), (int)((double)Main.maxTilesX * 0.9));
 							}
 							for (int l = 0; l < WorldGen.numIslandHouses; l++)
 							{
-								if (num2 > WorldGen.fihX[l] - 180 && num2 < WorldGen.fihX[l] + 180)
+								if (cloudX > WorldGen.fihX[l] - 180 && cloudX < WorldGen.fihX[l] + 180)
 								{
 									flag2 = false;
 									break;
@@ -5632,7 +_,7 @@
 								int num4 = 200;
 								while ((double)num4 < Main.worldSurface)
 								{
-									if (Main.tile[num2, num4].active())
+									if (Main.tile[cloudX, num4].active())
 									{
 										num3 = num4;
 										flag2 = true;
@@ -5642,19 +_,29 @@
 								}
 								if (flag2)
 								{
-									int num5 = WorldGen.genRand.Next(90, num3 - 100);
-									num5 = Math.Min(num5, (int)WorldGen.worldSurfaceLow - 50);
+									int cloudY = WorldGen.genRand.Next(90, num3 - 100);
+									cloudY = Math.Min(cloudY, (int)WorldGen.worldSurfaceLow - 50);
+									if (cloudY < 30)
+									{
+										continue;
+									}
 									if (k < skyLakes)
 									{
 										WorldGen.skyLake[WorldGen.numIslandHouses] = true;
-										WorldGen.CloudLake(num2, num5);
+										WorldGen.CloudLake(cloudX, cloudY);
 									}
 									else
 									{
-										WorldGen.CloudIsland(num2, num5);
-									}
-									WorldGen.fihX[WorldGen.numIslandHouses] = num2;
-									WorldGen.fihY[WorldGen.numIslandHouses] = num5;
+										try
+										{
+											WorldGen.CloudIsland(cloudX, cloudY);
+										}
+										catch
+										{
+										}
+									}
+									WorldGen.fihX[WorldGen.numIslandHouses] = cloudX;
+									WorldGen.fihY[WorldGen.numIslandHouses] = cloudY;
 									WorldGen.numIslandHouses++;
 								}
 							}
@@ -5664,14 +_,22 @@
 			WorldGen.AddGenerationPass("Mushroom Patches", delegate(GenerationProgress progress)
 				{
 					progress.Message = Lang.gen[13];
-					for (int k = 0; k < Main.maxTilesX / 500; k++)
+					for (int k = 0; k < (Main.maxTilesX / 500) * Main.setting.MushroomBiomeMultiplier; k++)
 					{
 						int num = 0;
 						bool flag2 = true;
 						while (flag2)
 						{
 							int num2 = WorldGen.genRand.Next((int)((double)Main.maxTilesX * 0.3), (int)((double)Main.maxTilesX * 0.7));
-							int num3 = WorldGen.genRand.Next((int)Main.rockLayer, Main.maxTilesY - 350);
+							int num3;
+							if (Main.maxTilesY < 1000)
+							{
+								num3 = WorldGen.genRand.Next((int)Main.rockLayer, Main.maxTilesY - 100);
+							}
+							else
+							{
+								num3 = WorldGen.genRand.Next((int)Main.rockLayer, Main.maxTilesY - 350);
+							}
 							flag2 = false;
 							int num4 = 60;
 							for (int l = num2 - num4; l < num2 + num4; l += 3)
@@ -5800,61 +_,185 @@
 			WorldGen.AddGenerationPass("Shinies", delegate(GenerationProgress progress)
 				{
 					progress.Message = Lang.gen[16];
-					for (int k = 0; k < (int)((double)(Main.maxTilesX * Main.maxTilesY) * 6E-05); k++)
-					{
+					for (int k = 0; k < (int)((double)(Main.maxTilesX * Main.maxTilesY) * 6E-05 * Main.setting.PercCopp); k++)
+					{
+						if (Main.setting.IsCopper == 3)
+						{
+							if (WorldGen.genRand.Next(2) == 0)
+							{
+								copper = 7;
+							}
+							else
+							{
+								copper = 166;
+							}
+						}
 						WorldGen.TileRunner(WorldGen.genRand.Next(0, Main.maxTilesX), WorldGen.genRand.Next((int)WorldGen.worldSurfaceLow, (int)worldSurfaceHigh), (double)WorldGen.genRand.Next(3, 6), WorldGen.genRand.Next(2, 6), copper, false, 0f, 0f, false, true);
 					}
-					for (int l = 0; l < (int)((double)(Main.maxTilesX * Main.maxTilesY) * 8E-05); l++)
-					{
+					for (int l = 0; l < (int)((double)(Main.maxTilesX * Main.maxTilesY) * 8E-05 * Main.setting.PercCopp); l++)
+					{
+						if (Main.setting.IsCopper == 3)
+						{
+							if (WorldGen.genRand.Next(2) == 0)
+							{
+								copper = 7;
+							}
+							else
+							{
+								copper = 166;
+							}
+						}
 						WorldGen.TileRunner(WorldGen.genRand.Next(0, Main.maxTilesX), WorldGen.genRand.Next((int)worldSurfaceHigh, (int)rockLayerHigh), (double)WorldGen.genRand.Next(3, 7), WorldGen.genRand.Next(3, 7), copper, false, 0f, 0f, false, true);
 					}
-					for (int m = 0; m < (int)((double)(Main.maxTilesX * Main.maxTilesY) * 0.0002); m++)
-					{
+					for (int m = 0; m < (int)((double)(Main.maxTilesX * Main.maxTilesY) * 0.0002 * Main.setting.PercCopp); m++)
+					{
+						if (Main.setting.IsCopper == 3)
+						{
+							if (WorldGen.genRand.Next(2) == 0)
+							{
+								copper = 7;
+							}
+							else
+							{
+								copper = 166;
+							}
+						}
 						WorldGen.TileRunner(WorldGen.genRand.Next(0, Main.maxTilesX), WorldGen.genRand.Next((int)rockLayerLow, Main.maxTilesY), (double)WorldGen.genRand.Next(4, 9), WorldGen.genRand.Next(4, 8), copper, false, 0f, 0f, false, true);
 					}
-					for (int n = 0; n < (int)((double)(Main.maxTilesX * Main.maxTilesY) * 3E-05); n++)
-					{
+					for (int n = 0; n < (int)((double)(Main.maxTilesX * Main.maxTilesY) * 3E-05 * Main.setting.PercIron); n++)
+					{
+						if (Main.setting.IsIron == 3)
+						{
+							if (WorldGen.genRand.Next(2) == 0)
+							{
+								iron = 6;
+							}
+							else
+							{
+								iron = 167;
+							}
+						}
 						WorldGen.TileRunner(WorldGen.genRand.Next(0, Main.maxTilesX), WorldGen.genRand.Next((int)WorldGen.worldSurfaceLow, (int)worldSurfaceHigh), (double)WorldGen.genRand.Next(3, 7), WorldGen.genRand.Next(2, 5), iron, false, 0f, 0f, false, true);
 					}
-					for (int num = 0; num < (int)((double)(Main.maxTilesX * Main.maxTilesY) * 8E-05); num++)
-					{
+					for (int num = 0; num < (int)((double)(Main.maxTilesX * Main.maxTilesY) * 8E-05 * Main.setting.PercIron); num++)
+					{
+						if (Main.setting.IsIron == 3)
+						{
+							if (WorldGen.genRand.Next(2) == 0)
+							{
+								iron = 6;
+							}
+							else
+							{
+								iron = 167;
+							}
+						}
 						WorldGen.TileRunner(WorldGen.genRand.Next(0, Main.maxTilesX), WorldGen.genRand.Next((int)worldSurfaceHigh, (int)rockLayerHigh), (double)WorldGen.genRand.Next(3, 6), WorldGen.genRand.Next(3, 6), iron, false, 0f, 0f, false, true);
 					}
-					for (int num2 = 0; num2 < (int)((double)(Main.maxTilesX * Main.maxTilesY) * 0.0002); num2++)
-					{
+					for (int num2 = 0; num2 < (int)((double)(Main.maxTilesX * Main.maxTilesY) * 0.0002 * Main.setting.PercIron); num2++)
+					{
+						if (Main.setting.IsIron == 3)
+						{
+							if (WorldGen.genRand.Next(2) == 0)
+							{
+								iron = 6;
+							}
+							else
+							{
+								iron = 167;
+							}
+						}
 						WorldGen.TileRunner(WorldGen.genRand.Next(0, Main.maxTilesX), WorldGen.genRand.Next((int)rockLayerLow, Main.maxTilesY), (double)WorldGen.genRand.Next(4, 9), WorldGen.genRand.Next(4, 8), iron, false, 0f, 0f, false, true);
 					}
-					for (int num3 = 0; num3 < (int)((double)(Main.maxTilesX * Main.maxTilesY) * 2.6E-05); num3++)
-					{
+					for (int num3 = 0; num3 < (int)((double)(Main.maxTilesX * Main.maxTilesY) * 2.6E-05 * Main.setting.PercSilv); num3++)
+					{
+						if (Main.setting.IsSilver == 3)
+						{
+							if (WorldGen.genRand.Next(2) == 0)
+							{
+								silver = 9;
+							}
+							else
+							{
+								silver = 168;
+							}
+						}
 						WorldGen.TileRunner(WorldGen.genRand.Next(0, Main.maxTilesX), WorldGen.genRand.Next((int)worldSurfaceHigh, (int)rockLayerHigh), (double)WorldGen.genRand.Next(3, 6), WorldGen.genRand.Next(3, 6), silver, false, 0f, 0f, false, true);
 					}
-					for (int num4 = 0; num4 < (int)((double)(Main.maxTilesX * Main.maxTilesY) * 0.00015); num4++)
-					{
+					for (int num4 = 0; num4 < (int)((double)(Main.maxTilesX * Main.maxTilesY) * 0.00015 * Main.setting.PercSilv); num4++)
+					{
+						if (Main.setting.IsSilver == 3)
+						{
+							if (WorldGen.genRand.Next(2) == 0)
+							{
+								silver = 9;
+							}
+							else
+							{
+								silver = 168;
+							}
+						}
 						WorldGen.TileRunner(WorldGen.genRand.Next(0, Main.maxTilesX), WorldGen.genRand.Next((int)rockLayerLow, Main.maxTilesY), (double)WorldGen.genRand.Next(4, 9), WorldGen.genRand.Next(4, 8), silver, false, 0f, 0f, false, true);
 					}
-					for (int num5 = 0; num5 < (int)((double)(Main.maxTilesX * Main.maxTilesY) * 0.00017); num5++)
-					{
+					for (int num5 = 0; num5 < (int)((double)(Main.maxTilesX * Main.maxTilesY) * 0.00017 * Main.setting.PercSilv); num5++)
+					{
+						if (Main.setting.IsSilver == 3)
+						{
+							if (WorldGen.genRand.Next(2) == 0)
+							{
+								silver = 9;
+							}
+							else
+							{
+								silver = 168;
+							}
+						}
 						WorldGen.TileRunner(WorldGen.genRand.Next(0, Main.maxTilesX), WorldGen.genRand.Next(0, (int)WorldGen.worldSurfaceLow), (double)WorldGen.genRand.Next(4, 9), WorldGen.genRand.Next(4, 8), silver, false, 0f, 0f, false, true);
 					}
-					for (int num6 = 0; num6 < (int)((double)(Main.maxTilesX * Main.maxTilesY) * 0.00012); num6++)
-					{
+					for (int num6 = 0; num6 < (int)((double)(Main.maxTilesX * Main.maxTilesY) * 0.00012 * Main.setting.PercGold); num6++)
+					{
+						if (Main.setting.IsGold == 3)
+						{
+							if (WorldGen.genRand.Next(2) == 0)
+							{
+								gold = 8;
+							}
+							else
+							{
+								gold = 169;
+							}
+						}
 						WorldGen.TileRunner(WorldGen.genRand.Next(0, Main.maxTilesX), WorldGen.genRand.Next((int)rockLayerLow, Main.maxTilesY), (double)WorldGen.genRand.Next(4, 8), WorldGen.genRand.Next(4, 8), gold, false, 0f, 0f, false, true);
 					}
-					for (int num7 = 0; num7 < (int)((double)(Main.maxTilesX * Main.maxTilesY) * 0.00012); num7++)
-					{
+					for (int num7 = 0; num7 < (int)((double)(Main.maxTilesX * Main.maxTilesY) * 0.00012 * Main.setting.PercGold); num7++)
+					{
+						if (Main.setting.IsGold == 3)
+						{
+							if (WorldGen.genRand.Next(2) == 0)
+							{
+								gold = 8;
+							}
+							else
+							{
+								gold = 169;
+							}
+						}
 						WorldGen.TileRunner(WorldGen.genRand.Next(0, Main.maxTilesX), WorldGen.genRand.Next(0, (int)WorldGen.worldSurfaceLow - 20), (double)WorldGen.genRand.Next(4, 8), WorldGen.genRand.Next(4, 8), gold, false, 0f, 0f, false, true);
 					}
-					if (WorldGen.crimson)
-					{
-						for (int num8 = 0; num8 < (int)((double)(Main.maxTilesX * Main.maxTilesY) * 2E-05); num8++)
-						{
-							WorldGen.TileRunner(WorldGen.genRand.Next(0, Main.maxTilesX), WorldGen.genRand.Next((int)rockLayerLow, Main.maxTilesY), (double)WorldGen.genRand.Next(2, 4), WorldGen.genRand.Next(3, 6), 204, false, 0f, 0f, false, true);
-						}
-						return;
-					}
-					for (int num9 = 0; num9 < (int)((double)(Main.maxTilesX * Main.maxTilesY) * 2E-05); num9++)
-					{
-						WorldGen.TileRunner(WorldGen.genRand.Next(0, Main.maxTilesX), WorldGen.genRand.Next((int)rockLayerLow, Main.maxTilesY), (double)WorldGen.genRand.Next(2, 4), WorldGen.genRand.Next(3, 6), 22, false, 0f, 0f, false, true);
+					if ((WorldGen.crimson || Main.setting.IsCorruption == 3) && Main.setting.IsCorruption != 5)
+					{
+						for (int num8 = 0; num8 < (int)((double)(Main.maxTilesX * Main.maxTilesY) * 2E-05 * Main.setting.PercDemonite); num8++)
+						{
+							WorldGen.TileRunner(WorldGen.genRand.Next(0, Main.maxTilesX), WorldGen.genRand.Next((int)rockLayerLow, Main.maxTilesY), (double)WorldGen.genRand.Next(2, 4), WorldGen.genRand.Next(3, 6), TileID.Crimtane /*204*/, false, 0f, 0f, false, true);
+						}
+						//	return;
+					}
+					if ((!WorldGen.crimson || Main.setting.IsCorruption == 4) && Main.setting.IsCorruption != 5)
+					{
+						for (int num9 = 0; num9 < (int)((double)(Main.maxTilesX * Main.maxTilesY) * 2E-05 * Main.setting.PercDemonite); num9++)
+						{
+							WorldGen.TileRunner(WorldGen.genRand.Next(0, Main.maxTilesX), WorldGen.genRand.Next((int)rockLayerLow, Main.maxTilesY), (double)WorldGen.genRand.Next(2, 4), WorldGen.genRand.Next(3, 6), TileID.Demonite /*22*/, false, 0f, 0f, false, true);
+						}
 					}
 				});
 			WorldGen.AddGenerationPass("Webs", delegate(GenerationProgress progress)
@@ -5904,6 +_,7 @@
 				});
 			WorldGen.AddGenerationPass("Underworld", delegate(GenerationProgress progress)
 				{
+					if (Main.setting.NoUnderworld) return;
 					progress.Message = Lang.gen[18];
 					progress.Set(0f);
 					int num = Main.maxTilesY - WorldGen.genRand.Next(150, 190);
@@ -5962,6 +_,7 @@
 							{
 								num4--;
 							}
+							//TileID.Ash
 							WorldGen.TileRunner(WorldGen.genRand.Next(0, Main.maxTilesX), num4 + WorldGen.genRand.Next(20, 50), (double)WorldGen.genRand.Next(15, 20), 1000, 57, true, 0f, (float)WorldGen.genRand.Next(1, 3), true, true);
 						}
 					}
@@ -6020,7 +_,7 @@
 							Main.tile[num10, Main.maxTilesY - 144].lava(true);
 						}
 					}
-					for (int num11 = 0; num11 < (int)((double)(Main.maxTilesX * Main.maxTilesY) * 0.0008); num11++)
+					for (int num11 = 0; num11 < (int)((double)(Main.maxTilesX * Main.maxTilesY) * 0.0008 * Main.setting.PercHellstone); num11++)
 					{
 						WorldGen.TileRunner(WorldGen.genRand.Next(0, Main.maxTilesX), WorldGen.genRand.Next(Main.maxTilesY - 140, Main.maxTilesY), (double)WorldGen.genRand.Next(2, 7), WorldGen.genRand.Next(3, 7), 58, false, 0f, 0f, false, true);
 					}
@@ -6029,7 +_,7 @@
 			WorldGen.AddGenerationPass("Lakes", delegate(GenerationProgress progress)
 				{
 					progress.Message = Lang.gen[19];
-					int num = WorldGen.genRand.Next(2, (int)((double)Main.maxTilesX * 0.005));
+					int num = WorldGen.genRand.Next(2, (int)((double)Main.maxTilesX * 0.005 * Main.setting.LakeMultiplier));
 					for (int k = 0; k < num; k++)
 					{
 						float value = (float)k / (float)num;
@@ -6038,6 +_,10 @@
 						while (num2 > Main.maxTilesX / 2 - 100 && num2 < Main.maxTilesX / 2 + 100)
 						{
 							num2 = WorldGen.genRand.Next(300, Main.maxTilesX - 300);
+							if (Main.maxTilesX <= 600)
+							{
+								num2 = WorldGen.genRand.Next(0, Main.maxTilesX);
+							}
 						}
 						int num3 = (int)WorldGen.worldSurfaceLow - 20;
 						while (!Main.tile[num2, num3].active())
@@ -6049,6 +_,7 @@
 				});
 			WorldGen.AddGenerationPass("Dungeon", delegate(GenerationProgress progress)
 				{
+					progress.Message = Lang.gen[58];
 					int x;
 					if (dungeonSide == -1)
 					{
@@ -6061,17 +_,25 @@
 						dungeonSide = 1;
 					}
 					int y = (int)((Main.worldSurface + Main.rockLayer) / 2.0) + WorldGen.genRand.Next(-200, 200);
-					WorldGen.MakeDungeon(x, y);
+					if (!InWorldY(y, 0))
+					{
+						y = (int)((Main.worldSurface + Main.rockLayer) / 2.0);
+					}
+					if (!Main.setting.NoDungeon)
+					{
+						//WorldGen.MakeDungeon(100, y, progress);
+						WorldGen.MakeDungeon(x, y, progress);
+					}
 				});
 			WorldGen.AddGenerationPass("Corruption", delegate(GenerationProgress progress)
 				{
-					if (WorldGen.crimson)
+					if ((WorldGen.crimson || Main.setting.IsCorruption == 3) && Main.setting.IsCorruption != 5)
 					{
 						progress.Message = Lang.gen[72];
 						int num = 0;
-						while ((double)num < (double)Main.maxTilesX * 0.00045)
-						{
-							float value = (float)((double)num / ((double)Main.maxTilesX * 0.00045));
+						while ((double)num < (double)Main.maxTilesX * 0.00045 * Main.setting.CrimsonMultiplier)
+						{
+							float value = (float)((double)num / ((double)Main.maxTilesX * 0.00045 * Main.setting.CrimsonMultiplier));
 							progress.Set(value);
 							bool flag2 = false;
 							int num2 = 0;
@@ -6085,29 +_,106 @@
 								int num7 = 200;
 								if (dungeonSide < 0)
 								{
-									num2 = WorldGen.genRand.Next(600, Main.maxTilesX - 320);
+									if (Main.maxTilesY < 1000)
+									{
+										num2 = WorldGen.genRand.Next(100, Main.maxTilesX - 50);
+									}
+									else
+									{
+										num2 = WorldGen.genRand.Next(600, Main.maxTilesX - 320);
+									}
 								}
 								else
 								{
-									num2 = WorldGen.genRand.Next(320, Main.maxTilesX - 600);
-								}
-								num3 = num2 - WorldGen.genRand.Next(200) - 100;
-								num4 = num2 + WorldGen.genRand.Next(200) + 100;
-								if (num3 < 285)
-								{
-									num3 = 285;
-								}
-								if (num4 > Main.maxTilesX - 285)
-								{
-									num4 = Main.maxTilesX - 285;
-								}
-								if (dungeonSide < 0 && num3 < 400)
-								{
-									num3 = 400;
-								}
-								else if (dungeonSide > 0 && num3 > Main.maxTilesX - 400)
-								{
-									num3 = Main.maxTilesX - 400;
+									if (Main.maxTilesY < 1000)
+									{
+										num2 = WorldGen.genRand.Next(50, Main.maxTilesX - 100);
+									}
+									else
+									{
+										num2 = WorldGen.genRand.Next(320, Main.maxTilesX - 600);
+									}
+								}
+								if (Main.setting.CrimsonCorruptionAvoidJungle)
+								{
+									if (dungeonSide == -1) // dungeon on left side, so place on left side
+									{
+										if (num2 > Main.maxTilesX / 2)
+										{
+											flag2 = false;
+											continue;
+										}
+									}
+									else
+									{
+										if (num2 < Main.maxTilesX / 2)
+										{
+											flag2 = false;
+											continue;
+										}
+									}
+								}
+								if (Main.setting.CrimsonCorruptionAvoidEachOther)
+								{
+									if (crimsonSide == -1) // Crimson on left
+									{
+										if (num2 > Main.maxTilesX / 2)
+										{
+											flag2 = false;
+											continue;
+										}
+									}
+									else if (crimsonSide == 1)
+									{
+										if (num2 < Main.maxTilesX / 2)
+										{
+											flag2 = false;
+											continue;
+										}
+									}
+								}
+								if (Main.maxTilesY < 1000)
+								{
+									num3 = num2 - WorldGen.genRand.Next(50) - 50;
+									num4 = num2 + WorldGen.genRand.Next(50) + 50;
+									if (num3 < 50)
+									{
+										num3 = 50;
+									}
+									if (num4 > Main.maxTilesX - 50)
+									{
+										num4 = Main.maxTilesX - 50;
+									}
+									if (dungeonSide < 0 && num3 < 50)
+									{
+										num3 = 50;
+									}
+									else if (dungeonSide > 0 && num3 > Main.maxTilesX - 50)
+									{
+										num3 = Main.maxTilesX - 50;
+									}
+									num7 = 50;
+								}
+								else
+								{
+									num3 = num2 - WorldGen.genRand.Next(200) - 100;
+									num4 = num2 + WorldGen.genRand.Next(200) + 100;
+									if (num3 < 285)
+									{
+										num3 = 285;
+									}
+									if (num4 > Main.maxTilesX - 285)
+									{
+										num4 = Main.maxTilesX - 285;
+									}
+									if (dungeonSide < 0 && num3 < 400)
+									{
+										num3 = 400;
+									}
+									else if (dungeonSide > 0 && num3 > Main.maxTilesX - 400)
+									{
+										num3 = Main.maxTilesX - 400;
+									}
 								}
 								if (num2 > num6 - num7 && num2 < num6 + num7)
 								{
@@ -6286,13 +_,16 @@
 							}
 							num++;
 						}
-						return;
-					}
+						//return;
+					}
+					if ((!WorldGen.crimson || Main.setting.IsCorruption == 4) && Main.setting.IsCorruption != 5)
+					{
+					// Making the world evil -- corruption
 					progress.Message = Lang.gen[20];
 					int num19 = 0;
-					while ((double)num19 < (double)Main.maxTilesX * 0.00045)
-					{
-						float value2 = (float)((double)num19 / ((double)Main.maxTilesX * 0.00045));
+					while ((double)num19 < (double)Main.maxTilesX * 0.00045 * Main.setting.CorruptionMultiplier)
+					{
+						float value2 = (float)((double)num19 / ((double)Main.maxTilesX * 0.00045 * Main.setting.CorruptionMultiplier));
 						progress.Set(value2);
 						bool flag5 = false;
 						int num20 = 0;
@@ -6304,16 +_,78 @@
 							flag5 = true;
 							int num24 = Main.maxTilesX / 2;
 							int num25 = 200;
-							num20 = WorldGen.genRand.Next(320, Main.maxTilesX - 320);
-							num21 = num20 - WorldGen.genRand.Next(200) - 100;
-							num22 = num20 + WorldGen.genRand.Next(200) + 100;
-							if (num21 < 285)
-							{
-								num21 = 285;
-							}
-							if (num22 > Main.maxTilesX - 285)
-							{
-								num22 = Main.maxTilesX - 285;
+							if (Main.maxTilesX <= 640)
+							{
+								num20 = WorldGen.genRand.Next(100, Main.maxTilesX - 100);
+								num21 = num20 - WorldGen.genRand.Next(50) - 50;
+								num22 = num20 + WorldGen.genRand.Next(50) + 50;
+								num25 = 50;
+							}
+							else
+							{
+								num20 = WorldGen.genRand.Next(320, Main.maxTilesX - 320);
+								num21 = num20 - WorldGen.genRand.Next(200) - 100;
+								num22 = num20 + WorldGen.genRand.Next(200) + 100;
+							}
+							if (Main.setting.CrimsonCorruptionAvoidJungle)
+							{
+								if (dungeonSide == -1) // dungeon on left side, so place on left side
+								{
+									if (num20 > Main.maxTilesX / 2)
+									{
+										flag5 = false;
+										continue;
+									}
+								}
+								else
+								{
+									if (num20 < Main.maxTilesX / 2)
+									{
+										flag5 = false;
+										continue;
+									}
+								}
+							}
+							if (Main.setting.CrimsonCorruptionAvoidEachOther)
+							{
+								if (crimsonSide == -1) // Crimson on left
+								{
+									if (num20 < Main.maxTilesX / 2)
+									{
+										flag5 = false;
+										continue;
+									}
+								}
+								else if (crimsonSide == 1)
+								{
+									if (num20 > Main.maxTilesX / 2)
+									{
+										flag5 = false;
+										continue;
+									}
+								}
+							}
+							if (Main.maxTilesX > 1000)
+							{
+								if (num21 < 285)
+								{
+									num21 = 285;
+								}
+								if (num22 > Main.maxTilesX - 285)
+								{
+									num22 = Main.maxTilesX - 285;
+								}
+							}
+							else
+							{
+								if (num21 < 50)
+								{
+									num21 = 50;
+								}
+								if (num22 > Main.maxTilesX - 50)
+								{
+									num22 = Main.maxTilesX - 50;
+								}
 							}
 							if (num20 > num24 - num25 && num20 < num24 + num25)
 							{
@@ -6511,6 +_,7 @@
 						}
 						num19++;
 					}
+					}
 				});
 			WorldGen.AddGenerationPass("Slush", delegate(GenerationProgress progress)
 				{
@@ -6531,7 +_,7 @@
 								{
 									for (int n = k - num; n <= k + num; n++)
 									{
-										if (Main.tile[m, n].type == 60 || Main.tile[m, n].type == 70 || Main.tile[m, n].type == 71 || Main.tile[m, n].type == 72)
+										if (InWorld(m, n) && (Main.tile[m, n].type == 60 || Main.tile[m, n].type == 70 || Main.tile[m, n].type == 71 || Main.tile[m, n].type == 72))
 										{
 											flag2 = false;
 											break;
@@ -6561,8 +_,10 @@
 						WorldGen.Cavinator(i2, j2, WorldGen.genRand.Next(40, 50));
 					}
 				});
+			
 			WorldGen.AddGenerationPass("Beaches", delegate(GenerationProgress progress)
 				{
+					if (Main.setting.NoBeach) return;
 					int num = 0;
 					int num2 = 0;
 					int num3 = 20;
@@ -6573,10 +_,10 @@
 						if (k == 0)
 						{
 							int num5 = 0;
-							int num6 = WorldGen.genRand.Next(125, 200) + 50;
+							int num6 = (int)((WorldGen.genRand.Next(125, 200) + 50) * Main.setting.BeachSizeMultiplier);
 							if (dungeonSide == 1)
 							{
-								num6 = 275;
+								num6 = (int)(275 * Main.setting.BeachSizeMultiplier);
 							}
 							int num7 = 0;
 							float num8 = 1f;
@@ -6690,11 +_,11 @@
 						}
 						else
 						{
-							int num5 = Main.maxTilesX - WorldGen.genRand.Next(125, 200) - 50;
+							int num5 = Main.maxTilesX - (int)((WorldGen.genRand.Next(125, 200) - 50) * Main.setting.BeachSizeMultiplier);
 							int num6 = Main.maxTilesX;
 							if (dungeonSide == -1)
 							{
-								num5 = Main.maxTilesX - 275;
+								num5 = Main.maxTilesX - (int)(275 * Main.setting.BeachSizeMultiplier);
 							}
 							float num12 = 1f;
 							int num13 = 0;
@@ -6816,6 +_,7 @@
 				});
 			WorldGen.AddGenerationPass("Gems", delegate(GenerationProgress progress)
 				{
+					// TODO non-gemcave gems?
 					progress.Message = Lang.gen[23];
 					for (int k = 63; k <= 68; k++)
 					{
@@ -6845,6 +_,7 @@
 							num = (float)Main.maxTilesX * 0.05f;
 						}
 						num *= 0.2f;
+						num *= Main.setting.GemMultiplier;
 						int num2 = 0;
 						while ((float)num2 < num)
 						{
@@ -7061,7 +_,49 @@
 									if (num3 >= 250)
 									{
 										num2--;
-										WorldGen.Pyramid(num, num2);
+										if (Main.setting.IsPyramid != 0)
+										{
+											WorldGen.Pyramid(num, num2);
+										}
+									}
+								}
+							}
+						}
+					}
+					if (Main.setting.IsPyramid == 1 && WorldGen.numPyramids <= 0)
+					{
+						for (int k = 0; k < numPyr; k++)
+						{
+							int num = PyrX[k];
+							int num2 = PyrY[k];
+							if (num > 300 && num < Main.maxTilesX - 300 && (dungeonSide >= 0 || (double)num >= (double)WorldGen.dungeonX + (double)Main.maxTilesX * 0.15))
+							{
+								if (dungeonSide <= 0 || (double)num <= (double)WorldGen.dungeonX - (double)Main.maxTilesX * 0.15)
+								{
+									while (!Main.tile[num, num2].active() && (double)num2 < Main.worldSurface)
+									{
+										num2++;
+									}
+									if ((double)num2 < Main.worldSurface && Main.tile[num, num2].type == 53)
+									{
+										int num3 = Main.maxTilesX;
+										for (int l = 0; l < k; l++)
+										{
+											int num4 = Math.Abs(num - PyrX[l]);
+											if (num4 < num3)
+											{
+												num3 = num4;
+											}
+										}
+										if (num3 >= 250)
+										{
+											num2--;
+											if (Main.setting.IsPyramid != 0)
+											{
+												WorldGen.Pyramid(num, num2);
+												break;
+											}
+										}
 									}
 								}
 							}
@@ -7082,8 +_,13 @@
 				});
 			WorldGen.AddGenerationPass("Living Trees", delegate(GenerationProgress progress)
 				{
-					float num = (float)(Main.maxTilesX / 4200);
+					float num = ((float)Main.maxTilesX / 4200);
 					int num2 = WorldGen.genRand.Next(0, (int)(3f * num));
+					if (Main.setting.IsGiantTree == 1)
+					{
+						// TODO, slider for Living Trees.
+						num2 = 1 + (int)(3f * num);
+					}
 					for (int k = 0; k < num2; k++)
 					{
 						bool flag2 = false;
@@ -7123,7 +_,7 @@
 												}
 											}
 										}
-										if (flag3)
+										if (flag3 && Main.setting.IsGiantTree != 0)
 										{
 											flag2 = WorldGen.GrowLivingTree(num4, num5);
 										}
@@ -7166,9 +_,9 @@
 			WorldGen.AddGenerationPass("Alters", delegate(GenerationProgress progress)
 				{
 					progress.Message = Lang.gen[26];
-					for (int k = 0; k < (int)((double)(Main.maxTilesX * Main.maxTilesY) * 2E-05); k++)
-					{
-						float value = (float)((double)k / ((double)(Main.maxTilesX * Main.maxTilesY) * 2E-05));
+					for (int k = 0; k < (int)((double)(Main.maxTilesX * Main.maxTilesY) * 2E-05 /** Main.setting.AltarMultiplier*/); k++)
+					{
+						float value = (float)((double)k / ((double)(Main.maxTilesX * Main.maxTilesY) * 2E-05 /** Main.setting.AltarMultiplier*/));
 						progress.Set(value);
 						bool flag2 = false;
 						int num = 0;
@@ -7181,18 +_,29 @@
 							{
 								style = 1;
 							}
-							WorldGen.Place3x2(num2, num3, 26, style);
-							if (Main.tile[num2, num3].type == 26)
+							if (Main.setting.IsCorruption == 3 || Main.setting.IsCorruption == 4)
+							{
+								style = WorldGen.genRand.Next(2); // TODO Fix altars to be correct maybe?
+							}
+							if (!Main.setting.NoAltar)
+							{
+								WorldGen.Place3x2(num2, num3, TileID.DemonAltar/*26*/, style);
+								if (Main.tile[num2, num3].type == 26)
+								{
+									flag2 = true;
+								}
+								else
+								{
+									num++;
+									if (num >= 10000)
+									{
+										flag2 = true;
+									}
+								}
+							}
+							else
 							{
 								flag2 = true;
-							}
-							else
-							{
-								num++;
-								if (num >= 10000)
-								{
-									flag2 = true;
-								}
 							}
 						}
 					}
@@ -7255,11 +_,20 @@
 				});
 			WorldGen.AddGenerationPass("Jungle Temple", delegate(GenerationProgress progress)
 				{
+					if (Main.setting.NoJungle) return;
 					progress.Message = Lang.gen[70];
 					bool flag2 = true;
 					while (flag2)
 					{
-						int num = WorldGen.genRand.Next((int)Main.rockLayer, Main.maxTilesY - 500);
+						int num;
+						if (Main.maxTilesY < 1000)
+						{
+							num = WorldGen.genRand.Next((int)Main.rockLayer, Main.maxTilesY - 200);
+						}
+						else
+						{
+							num = WorldGen.genRand.Next((int)Main.rockLayer, Main.maxTilesY - 500);
+						}
 						int num2;
 						if (dungeonSide < 0)
 						{
@@ -7269,18 +_,24 @@
 						{
 							num2 = WorldGen.genRand.Next((int)((double)Main.maxTilesX * 0.15), (int)((double)Main.maxTilesX * 0.4));
 						}
-						if (Main.tile[num2, num].active() && Main.tile[num2, num].type == 60)
+						if (Main.tile[num2, num].active() && Main.tile[num2, num].type == 60) //jungleGrass
 						{
 							flag2 = false;
-							WorldGen.makeTemple(num2, num);
+							if (!Main.setting.NoTemple)
+							{
+								WorldGen.makeTemple(num2, num);
+							}
 						}
 					}
 				});
 			WorldGen.AddGenerationPass("Hives", delegate(GenerationProgress progress)
 				{
+					if (Main.setting.NoHive || Main.setting.NoJungle) return;
+					// TODO Hives Ammount
 					progress.Message = Lang.gen[71];
-					float num = (float)(Main.maxTilesX / 4200);
+					float num = ((float)Main.maxTilesX / 4200);
 					float num2 = (float)(1 + WorldGen.genRand.Next((int)(5f * num), (int)(8f * num)));
+					num2 *= Main.setting.HiveMultiplier;
 					int num3 = 10000;
 					while (num2 > 0f && num3 > 0)
 					{
@@ -7309,10 +_,20 @@
 				});
 			WorldGen.AddGenerationPass("Jungle Chests", delegate(GenerationProgress progress)
 				{
+					if (Main.setting.NoJungle) return;
 					int num = WorldGen.genRand.Next(40, Main.maxTilesX - 40);
-					int num2 = WorldGen.genRand.Next((int)(Main.worldSurface + Main.rockLayer) / 2, Main.maxTilesY - 400);
+					int num2;
+					if (Main.maxTilesY < 1000)
+					{
+						num2 = WorldGen.genRand.Next((int)(Main.worldSurface + Main.rockLayer) / 2, Main.maxTilesY - 100);
+					}
+					else
+					{
+						num2 = WorldGen.genRand.Next((int)(Main.worldSurface + Main.rockLayer) / 2, Main.maxTilesY - 400);
+					}
 					float num3 = (float)WorldGen.genRand.Next(7, 12);
-					num3 *= (float)(Main.maxTilesX / 4200);
+					num3 *= ((float)Main.maxTilesX / 4200);
+					num3 *= Main.setting.JungleShrineMultiplier;
 					int num4 = 0;
 					while ((float)num4 < num3)
 					{
@@ -7349,6 +_,30 @@
 								int m = WorldGen.genRand.Next(2, 4);
 								int num6 = WorldGen.genRand.Next(2, 4);
 								int num7 = 0;
+								if (Main.setting.ShrineType == 6)
+								{
+									jungleHut = (ushort)WorldGen.genRand.Next(5);
+									if (jungleHut == 0)
+									{
+										jungleHut = 119;
+									}
+									else if (jungleHut == 1)
+									{
+										jungleHut = 120;
+									}
+									else if (jungleHut == 2)
+									{
+										jungleHut = 158;
+									}
+									else if (jungleHut == 3)
+									{
+										jungleHut = 175;
+									}
+									else if (jungleHut == 4)
+									{
+										jungleHut = 45;
+									}
+								}
 								if (jungleHut == 119)
 								{
 									num7 = 23;
@@ -7395,7 +_,7 @@
 									int num12 = WorldGen.genRand.Next(num - m, num + m + 1);
 									int num13 = WorldGen.genRand.Next(num2 - num6, num2 + num6 - 2);
 									WorldGen.PlaceTile(num12, num13, 4, true, false, -1, 3);
-									if (TileLoader.IsTorch(Main.tile[num12, num13].type))
+									if (Main.tile[num12, num13].type == 4)
 									{
 										flag3 = true;
 									}
@@ -7798,9 +_,9 @@
 			WorldGen.AddGenerationPass("Traps", delegate(GenerationProgress progress)
 				{
 					progress.Message = Lang.gen[34];
-					for (int k = 0; k < (int)((double)Main.maxTilesX * 0.05); k++)
-					{
-						float value = (float)((double)k / ((double)Main.maxTilesX * 0.05));
+					for (int k = 0; k < (int)((double)Main.maxTilesX * 0.05 * Main.setting.TrapMultiplier); k++)
+					{
+						float value = (float)((double)k / ((double)Main.maxTilesX * 0.05 * Main.setting.TrapMultiplier));
 						progress.Set(value);
 						for (int l = 0; l < 1150; l++)
 						{
@@ -7812,14 +_,75 @@
 							}
 						}
 					}
+					progress.Message = "Placing more traps: Dart";
+					for (int k = 0; k < (int)((double)Main.maxTilesX * 0.05 * Main.setting.AdditionalDartTrapMultiplier); k++)
+					{
+						float value = (float)((double)k / ((double)Main.maxTilesX * 0.05 * Main.setting.AdditionalDartTrapMultiplier));
+						progress.Set(value);
+						for (int l = 0; l < 1000; l++)
+						{
+							int num = WorldGen.genRand.Next(200, Main.maxTilesX - 200);
+							int num2 = WorldGen.genRand.Next((int)Main.worldSurface, Main.maxTilesY - 300);
+							if (Main.tile[num, num2].wall == 0 && WorldGen.placeTrap(num, num2, 0))
+							{
+								break;
+							}
+						}
+					}
+					progress.Message = "Placing more traps: Boulder";
+					for (int k = 0; k < (int)((double)Main.maxTilesX * 0.05 * Main.setting.AdditionalBoulderTrapMultiplier); k++)
+					{
+						float value = (float)((double)k / ((double)Main.maxTilesX * 0.05 * Main.setting.AdditionalBoulderTrapMultiplier));
+						progress.Set(value);
+						for (int l = 0; l < 1000; l++)
+						{
+							int num = WorldGen.genRand.Next(200, Main.maxTilesX - 200);
+							int num2 = WorldGen.genRand.Next((int)Main.worldSurface, Main.maxTilesY - 300);
+							if (Main.tile[num, num2].wall == 0 && WorldGen.placeTrap(num, num2, 1))
+							{
+								break;
+							}
+						}
+					}
+					progress.Message = "Placing more traps: Explosive";
+					for (int k = 0; k < (int)((double)Main.maxTilesX * 0.05 * Main.setting.AdditionalExplosiveTrapMultiplier); k++)
+					{
+						float value = (float)((double)k / ((double)Main.maxTilesX * 0.05 * Main.setting.AdditionalExplosiveTrapMultiplier));
+						progress.Set(value);
+						for (int l = 0; l < 10000; l++)
+						{
+							int num = WorldGen.genRand.Next(200, Main.maxTilesX - 200);
+							int num2 = WorldGen.genRand.Next((int)Main.worldSurface, Main.maxTilesY - 300);
+							if (Main.tile[num, num2].wall == 0 && WorldGen.placeTrap(num, num2, 2))
+							{
+								break;
+							}
+						}
+					}
+					progress.Message = "Placing more traps: Geyser";
+					for (int k = 0; k < (int)((double)Main.maxTilesX * 0.05 * Main.setting.AdditionalGeyserTrapMultiplier); k++)
+					{
+						float value = (float)((double)k / ((double)Main.maxTilesX * 0.05 * Main.setting.AdditionalGeyserTrapMultiplier));
+						progress.Set(value);
+						for (int l = 0; l < 10000; l++)
+						{
+							int num = WorldGen.genRand.Next(200, Main.maxTilesX - 200);
+							int num2 = WorldGen.genRand.Next(WorldGen.lavaLine + 30, Main.maxTilesY - 300);
+							if (Main.tile[num, num2].wall == 0 && WorldGen.placeTrap(num, num2, 3))
+							{
+								break;
+							}
+						}
+					}
 				});
+			// TODO, boulder, dart, explosive specific. Also, randomize colors or not....hmmm
 			WorldGen.AddGenerationPass("Life Crystals", delegate(GenerationProgress progress)
 				{
 					dub2 = (float)(Main.maxTilesX / 4200);
 					progress.Message = Lang.gen[28];
-					for (int k = 0; k < (int)((double)(Main.maxTilesX * Main.maxTilesY) * 2E-05); k++)
-					{
-						float value = (float)((double)k / ((double)(Main.maxTilesX * Main.maxTilesY) * 2E-05));
+					for (int k = 0; k < (int)((double)(Main.maxTilesX * Main.maxTilesY) * 2E-05 * Main.setting.CrystalHeartMultiplier); k++)
+					{
+						float value = (float)((double)k / ((double)(Main.maxTilesX * Main.maxTilesY) * 2E-05 * Main.setting.CrystalHeartMultiplier));
 						progress.Set(value);
 						bool flag2 = false;
 						int num = 0;
@@ -7843,9 +_,10 @@
 				});
 			WorldGen.AddGenerationPass("Statues", delegate(GenerationProgress progress)
 				{
+					//dub2 = ((float)Main.maxTilesX / 4200);
 					progress.Message = Lang.gen[29];
 					int num = 0;
-					int num2 = (int)((float)(WorldGen.statueList.Length * 2) * dub2);
+					int num2 = (int)((float)(WorldGen.statueList.Length * 2) * dub2 * Main.setting.StatueMultiplier);
 					for (int k = 0; k < num2; k++)
 					{
 						if (num >= WorldGen.statueList.Length)
@@ -7894,15 +_,16 @@
 					Main.tileSolid[226] = true;
 					Main.tileSolid[162] = true;
 					Main.tileSolid[225] = true;
-					for (int k = 0; k < (int)((double)(Main.maxTilesX * Main.maxTilesY) * 1.6E-05); k++)
-					{
-						float value = (float)((double)k / ((double)(Main.maxTilesX * Main.maxTilesY) * 1.6E-05));
+					// Remove shadow chests from here
+					for (int k = 0; k < (int)((double)(Main.maxTilesX * Main.maxTilesY) * 1.6E-05 * Main.setting.UndergroundCabinMultiplier); k++)
+					{
+						float value = (float)((double)k / ((double)(Main.maxTilesX * Main.maxTilesY) * 1.6E-05 * Main.setting.UndergroundCabinMultiplier));
 						progress.Set(value);
 						bool flag2 = false;
 						int num = 0;
 						while (!flag2)
 						{
-							float num2 = (float)WorldGen.genRand.Next((int)(5f * dub2), (int)(8f * dub2 + 1f));
+							float num2 = (float)WorldGen.genRand.Next((int)(5f * dub2), (int)(8f * dub2 + 1f)); // number of shadow chests
 							int num3 = WorldGen.genRand.Next(20, Main.maxTilesX - 20);
 							int num4 = WorldGen.genRand.Next((int)(worldSurfaceHigh + 20.0), Main.maxTilesY - 230);
 							if ((float)k <= num2)
@@ -7933,7 +_,7 @@
 									}
 								}
 							}
-							else if (WorldGen.AddBuriedChest(num3, num4, 0, false, -1))
+							else /*if (WorldGen.AddBuriedChest(num3, num4, 0, false, -1))*/
 							{
 								flag2 = true;
 							}
@@ -7944,15 +_,41 @@
 							}
 						}
 					}
-					int num6 = (int)(2f * (float)(Main.maxTilesX * Main.maxTilesY) / 5040000f);
-					int num7 = 1000;
-					while (num7 >= 0 && num6 >= 0)
+					// Shadow only
+					float numberShadowChests = (float)WorldGen.genRand.Next((int)(5f * dub2 * Main.setting.ShadowChestMultiplier), (int)(8f * dub2 * Main.setting.ShadowChestMultiplier + 1f)); // number of shadow chests
+					for (int k = 0; k < numberShadowChests; k++)
+					{
+						bool flag2 = false;
+						int num = 0;
+						while (!flag2)
+						{
+							int num3 = WorldGen.genRand.Next(20, Main.maxTilesX - 20);
+							int num4 = WorldGen.genRand.Next(Main.maxTilesY - 200, Main.maxTilesY - 50);
+							while (Main.wallDungeon[(int)Main.tile[num3, num4].wall])
+							{
+								num3 = WorldGen.genRand.Next(1, Main.maxTilesX);
+								num4 = WorldGen.genRand.Next(Main.maxTilesY - 200, Main.maxTilesY - 50);
+							}
+							if (WorldGen.AddBuriedChest(num3, num4, 0, false, -1))
+							{
+								flag2 = true;
+							}
+							num++;
+							if (num >= 1000)
+							{
+								flag2 = true;
+							}
+						}
+					}
+					int num6 = (int)(Main.setting.UndergroundCabinMultiplier * 2f * (float)(Main.maxTilesX * Main.maxTilesY) / 5040000f);
+					int maxAttempts = 1000;
+					while (maxAttempts >= 0 && num6 >= 0)
 					{
 						if (Biomes<CaveHouseBiome>.Place(WorldGen.RandomRectanglePoint(WorldGen.UndergroundDesertLocation), structures))
 						{
 							num6--;
 						}
-						num7--;
+						maxAttempts--;
 					}
 					Main.tileSolid[226] = false;
 					Main.tileSolid[162] = false;
@@ -7961,9 +_,9 @@
 			WorldGen.AddGenerationPass("Surface Chests", delegate(GenerationProgress progress)
 				{
 					progress.Message = Lang.gen[31];
-					for (int k = 0; k < (int)((double)Main.maxTilesX * 0.005); k++)
-					{
-						float value = (float)((double)k / ((double)Main.maxTilesX * 0.005));
+					for (int k = 0; k < (int)((double)Main.maxTilesX * 0.005 * Main.setting.SurfaceChestMultiplier); k++)
+					{
+						float value = (float)((double)k / ((double)Main.maxTilesX * 0.005 * Main.setting.SurfaceChestMultiplier));
 						progress.Set(value);
 						bool flag2 = false;
 						int num = 0;
@@ -8025,12 +_,13 @@
 				});
 			WorldGen.AddGenerationPass("Water Chests", delegate(GenerationProgress progress)
 				{
+					if (Main.setting.NoChest) return;
 					progress.Message = Lang.gen[33];
 					int num = 0;
 					int num2 = 0;
-					while ((float)num2 < 9f * dub2)
-					{
-						float value = (float)num2 / (9f * dub2);
+					while ((float)num2 < 9f * dub2 * Main.setting.WaterChestMultiplier)
+					{
+						float value = (float)num2 / (9f * dub2 * Main.setting.WaterChestMultiplier);
 						progress.Set(value);
 						num++;
 						int contain;
@@ -8080,11 +_,12 @@
 				});
 			WorldGen.AddGenerationPass("Spider Caves", delegate(GenerationProgress progress)
 				{
+					if (Main.setting.NoSpiderCave) return;
 					progress.Message = Lang.gen[64];
 					WorldGen.maxTileCount = 3500;
-					for (int k = 0; k < (int)((double)Main.maxTilesX * 0.005); k++)
-					{
-						float value = (float)((double)k / ((double)Main.maxTilesX * 0.005));
+					for (int k = 0; k < (int)((double)Main.maxTilesX * 0.005 * Main.setting.SpiderCaveMultiplier); k++)
+					{
+						float value = (float)((double)k / ((double)Main.maxTilesX * 0.005 * Main.setting.SpiderCaveMultiplier));
 						progress.Set(value);
 						int num = 0;
 						int x = WorldGen.genRand.Next(200, Main.maxTilesX - 200);
@@ -8106,17 +_,19 @@
 				});
 			WorldGen.AddGenerationPass("Gem Caves", delegate(GenerationProgress progress)
 				{
-					progress.Message = Lang.gen[64];
-					WorldGen.maxTileCount = 300;
-					for (int k = 0; k < (int)((double)Main.maxTilesX * 0.003); k++)
-					{
-						float value = (float)((double)k / ((double)Main.maxTilesX * 0.003));
+					progress.Message = Lang.gen[62];
+					WorldGen.maxTileCount = (int)(300 * Main.setting.GemCaveSizeMultiplier);
+					WorldGen.countX = new int[WorldGen.maxTileCount];
+					WorldGen.countY = new int[WorldGen.maxTileCount];
+					for (int k = 0; k < (int)((double)Main.maxTilesX * 0.003 * Main.setting.GemCaveMultiplier); k++)
+					{
+						float value = (float)((double)k / ((double)Main.maxTilesX * 0.003 * Main.setting.GemCaveMultiplier));
 						progress.Set(value);
 						int num = 0;
 						int x = WorldGen.genRand.Next(200, Main.maxTilesX - 200);
 						int y = WorldGen.genRand.Next((int)Main.rockLayer + 30, Main.maxTilesY - 230);
 						int num2 = WorldGen.countTiles(x, y, false, false);
-						while ((num2 >= 300 || num2 < 50 || WorldGen.lavaCount > 0 || WorldGen.iceCount > 0 || WorldGen.rockCount == 0) && num < 1000)
+						while ((num2 >= (int)(300 * Main.setting.GemCaveSizeMultiplier) || num2 < 50 || WorldGen.lavaCount > 0 || WorldGen.iceCount > 0 || WorldGen.rockCount == 0) && num < 1000)
 						{
 							num++;
 							x = WorldGen.genRand.Next(200, Main.maxTilesX - 200);
@@ -8128,6 +_,8 @@
 							WorldGen.gemCave(x, y);
 						}
 					}
+					WorldGen.countX = new int[3500];
+					WorldGen.countY = new int[3500];
 				});
 			WorldGen.AddGenerationPass("Moss", delegate(GenerationProgress progress)
 				{
@@ -8357,7 +_,7 @@
 					{
 						for (int l = (int)Main.worldSurface - 1; l < Main.maxTilesY - 350; l++)
 						{
-							if (WorldGen.genRand.Next(10) == 0)
+							if (WorldGen.genRand.Next(10) == 0 && !Main.setting.NoTree) // The trees in underground jungle
 							{
 								WorldGen.GrowUndergroundTree(k, l);
 							}
@@ -8415,9 +_,9 @@
 					Main.tileSolid[137] = true;
 					Main.tileSolid[130] = true;
 					progress.Message = Lang.gen[35];
-					for (int k = 0; k < (int)((double)(Main.maxTilesX * Main.maxTilesY) * 0.0008); k++)
-					{
-						float num = (float)((double)k / ((double)(Main.maxTilesX * Main.maxTilesY) * 0.0008));
+					for (int k = 0; k < (int)((double)(Main.maxTilesX * Main.maxTilesY) * 0.0008 * Main.setting.PotsMultiplier); k++)
+					{
+						float num = (float)((double)k / ((double)(Main.maxTilesX * Main.maxTilesY) * 0.0008 * Main.setting.PotsMultiplier));
 						progress.Set(num);
 						bool flag2 = false;
 						int num2 = 0;
@@ -8505,6 +_,7 @@
 				});
 			WorldGen.AddGenerationPass("Hellforge", delegate(GenerationProgress progress)
 				{
+					if (Main.setting.NoUnderworld) return;
 					progress.Message = Lang.gen[36];
 					for (int k = 0; k < Main.maxTilesX / 200; k++)
 					{
@@ -9177,6 +_,7 @@
 						}
 					}
 				});
+			// TODO Random Spawn?
 			WorldGen.AddGenerationPass("Spawn Point", delegate(GenerationProgress progress)
 				{
 					int num = 5;
@@ -9366,7 +_,7 @@
 						for (int k = num2 - num3; k < num2 + num3; k++)
 						{
 							int num4 = 20;
-							while ((double)num4 < Main.worldSurface)
+							while ((double)num4 < Main.worldSurface && !Main.setting.NoTree)
 							{
 								WorldGen.GrowEpicTree(k, num4);
 								num4++;
@@ -9374,7 +_,10 @@
 						}
 						num++;
 					}
-					WorldGen.AddTrees();
+					if (!Main.setting.NoTree)
+					{
+						WorldGen.AddTrees();
+					}
 				});
 			WorldGen.AddGenerationPass("Herbs", delegate(GenerationProgress progress)
 				{
@@ -9804,6 +_,7 @@
 								{
 									if (!Main.tile[k, l].active())
 									{
+										// TODO Exposed Gems in ice.
 										WorldGen.PlaceTile(k, l, 178, true, false, -1, style);
 									}
 								}
@@ -9846,6 +_,7 @@
 							{
 								style = 5;
 							}
+							// TODO Exposed Gems.
 							WorldGen.PlaceTile(num, num2, 178, true, false, -1, style);
 						}
 					}
@@ -10114,7 +_,11 @@
 								int num7 = 0;
 								int num8 = k;
 								num7 += num6 / 2;
-								num7 = (WorldGen.crimson ? 1 : 0);
+								//num7 = (WorldGen.crimson ? 1 : 0);
+								//if (Main.setting.IsCorruption == 3 || Main.setting.IsCorruption == 4)
+								//{
+								//	num7 = WorldGen.genRand.Next(2); // TODO fix shadow orbs to be correct
+								//}
 								num6 %= 2;
 								num8 -= num6;
 								int num9 = (int)(Main.tile[k, l].frameY / 18);
@@ -10342,26 +_,33 @@
 						Main.tile[k, num2 + 2].type = 226;
 					}
 				});
+			// TODO micro biomes worldgen
 			WorldGen.AddGenerationPass("Micro Biomes", delegate(GenerationProgress progress)
 				{
 					progress.Message = Lang.gen[76] + "..Thin Ice";
 					float num = (float)(Main.maxTilesX * Main.maxTilesY) / 5040000f;
 					float num2 = (float)Main.maxTilesX / 4200f;
-					int num3 = (int)((float)WorldGen.genRand.Next(3, 6) * num);
+					int num3 = (int)((float)WorldGen.genRand.Next(3, 6) * num * Main.setting.ThinIceBiomeMultiplier);
 					int k = 0;
+					// todo Thinice
+					if (!Main.setting.NoSnow)
+					{
 					while (k < num3)
 					{
 						if (Biomes<ThinIceBiome>.Place(WorldGen.RandomWorldPoint((int)Main.worldSurface + 20, 50, 200, 50), structures))
 						{
 							k++;
 						}
+					}
 					}
 					progress.Set(0.1f);
 					progress.Message = Lang.gen[76] + "..Enchanted Swords";
-					int num4 = (int)Math.Ceiling((double)num);
+					int num4 = (int)Math.Ceiling((double)num * Main.setting.EnchantedSwordBiomeMultiplier);
 					int l = 0;
-					while (l < num4)
-					{
+					int attempts = 0;
+					while (l < num4 && attempts < 10000/*and number of attempts is low...*/)
+					{
+						attempts++;
 						Point origin;
 						origin.Y = (int)worldSurface + WorldGen.genRand.Next(50, 100);
 						if (WorldGen.genRand.Next(2) == 0)
@@ -10378,8 +_,9 @@
 						}
 					}
 					progress.Set(0.2f);
+					// TODO campsites
 					progress.Message = Lang.gen[76] + "..Campsites";
-					int num5 = (int)((float)WorldGen.genRand.Next(6, 12) * num);
+					int num5 = (int)((float)WorldGen.genRand.Next(6, 12) * num * Main.setting.CampsiteBiomeMultiplier);
 					int m = 0;
 					while (m < num5)
 					{
@@ -10390,7 +_,7 @@
 					}
 					progress.Message = Lang.gen[76] + "..Mining Explosives";
 					progress.Set(0.25f);
-					int num6 = (int)((float)WorldGen.genRand.Next(14, 30) * num);
+					int num6 = (int)((float)WorldGen.genRand.Next(14, 30) * num * Main.setting.MiningExplosiveMultiplier);
 					int n = 0;
 					while (n < num6)
 					{
@@ -10401,10 +_,10 @@
 					}
 					progress.Message = Lang.gen[76] + "..Mahogany Trees";
 					progress.Set(0.3f);
-					int num7 = (int)((float)WorldGen.genRand.Next(6, 12) * num2);
+					int num7 = (int)((float)WorldGen.genRand.Next(6, 12) * num2 * Main.setting.MahoganyTreeMultiplier);
 					int num8 = 0;
 					int num9 = 0;
-					while (num8 < num7 && num9 < 20000)
+					while (num8 < num7 && num9 < 20000 * Main.setting.MahoganyTreeMultiplier)
 					{
 						if (Biomes<MahoganyTreeBiome>.Place(WorldGen.RandomWorldPoint((int)Main.worldSurface + 50, 50, 500, 50), structures))
 						{
@@ -10412,23 +_,47 @@
 						}
 						num9++;
 					}
+					// The tiny pits that are added to already formed corruption biomes
 					progress.Message = Lang.gen[76] + "..Corruption Pits";
 					progress.Set(0.4f);
-					if (!WorldGen.crimson)
+					if ((!WorldGen.crimson || Main.setting.IsCorruption == 4) && Main.setting.IsCorruption != 5)
 					{
 						int num10 = (int)((float)WorldGen.genRand.Next(1, 3) * num);
 						int num11 = 0;
 						while (num11 < num10)
 						{
-							if (Biomes<CorruptionPitBiome>.Place(WorldGen.RandomWorldPoint((int)Main.worldSurface, 50, 500, 50), structures))
-							{
-								num11++;
+							if (Main.setting.CrimsonCorruptionAvoidJungle)
+							{
+								if (dungeonSide == -1) // dungeon on left side, so place on left side
+								{
+									//if (Biomes<CorruptionPitBiome>.Place(WorldGen.RandomWorldPoint((int)Main.worldSurface, 50, 500, 50), structures))
+									if (Biomes<CorruptionPitBiome>.Place(WorldGen.RandomWorldPoint((int)Main.worldSurface, Main.maxTilesX / 2, 500, 50), structures))
+									{
+										num11++;
+									}
+								}
+								else
+								{
+									//	if (Biomes<CorruptionPitBiome>.Place(WorldGen.RandomWorldPoint((int)Main.worldSurface, Main.maxTilesX / 2, 500, 50), structures))
+									if (Biomes<CorruptionPitBiome>.Place(WorldGen.RandomWorldPoint((int)Main.worldSurface, 50, 500, Main.maxTilesX / 2), structures))
+									{
+										num11++;
+									}
+								}
+							}
+							else
+							{
+								if (Biomes<CorruptionPitBiome>.Place(WorldGen.RandomWorldPoint((int)Main.worldSurface, 50, 500, 50), structures))
+								{
+									num11++;
+								}
 							}
 						}
 					}
 					progress.Message = Lang.gen[76] + "..Minecart Tracks";
 					progress.Set(0.5f);
-					TrackGenerator.Run((int)(10f * num), (int)(num * 25f) + 250);
+					int minTrackLength = Math.Min((int)(num * 25f) + 250, 350);
+					TrackGenerator.Run(progress, (int)(10f * num * Main.setting.MineCartMultiplier), minTrackLength);
 					progress.Set(1f);
 				});
 			WorldGen.AddGenerationPass("Final Cleanup", delegate(GenerationProgress progress)
@@ -10475,6 +_,24 @@
 							}
 						}
 					}
+					progress.Message = "Meteor Shower...";
+					for (int predropMeteors = 0; predropMeteors < Main.setting.PreDropMeteor; predropMeteors++)
+					{
+						WorldGen.dropMeteor();
+					}
+					if (Main.hardMode && Main.setting.HardmodeStripes)
+					{
+						progress.Message = "Generating hardmode stripes...";
+						smCallBack(null);
+					}
+					progress.Message = "Generating hardmode ores...";
+					int num731 = 0;
+					while ((float)num731 < Main.setting.PreSmashAltar * 50f)
+					{
+						WorldGen.SmashAltar();
+						num731++;
+					}
+					WorldGen.altarCount = 0;
 					WorldGen.noTileActions = false;
 					WorldGen.gen = false;
 					Main.AnglerQuestSwap();
@@ -10592,6 +_,10 @@
 					bool flag = false;
 					bool flag2 = false;
 					int num3 = WorldGen.genRand.Next(20, 30);
+					if (Main.setting.TreeLowerBound != 5)
+					{
+						num3 = WorldGen.genRand.Next(Main.setting.TreeLowerBound, Main.setting.TreeUpperBound + 1);
+					}
 					int num4;
 					for (int j = num - num3; j < num; j++)
 					{
@@ -11036,6 +_,7 @@
 
 		public static bool Pyramid(int i, int j)
 		{
+			WorldGen.numPyramids++;
 			ushort num = 151;
 			int num2 = j - WorldGen.genRand.Next(0, 7);
 			int num3 = WorldGen.genRand.Next(9, 13);
@@ -12183,8 +_,9 @@
 			}
 			if (Main.tile[i, num].nactive() && !Main.tile[i, num].halfBrick() && Main.tile[i, num].slope() == 0 && (Main.tile[i, num].type == 2 || Main.tile[i, num].type == 23 || Main.tile[i, num].type == 60 || Main.tile[i, num].type == 109 || Main.tile[i, num].type == 147 || Main.tile[i, num].type == 199 || Main.tile[i, num].type == 70 || TileLoader.CanGrowModTree(Main.tile[i, num].type)) && (Main.tile[i, num - 1].wall == 0 || Main.tile[i, num - 1].wall == 106 || Main.tile[i, num - 1].wall == 107 || (Main.tile[i, num - 1].wall >= 138 && Main.tile[i, num - 1].wall <= 141) || Main.tile[i, num - 1].wall == 145 || Main.tile[i, num - 1].wall == 150 || Main.tile[i, num - 1].wall == 152) && ((Main.tile[i - 1, num].active() && (Main.tile[i - 1, num].type == 2 || Main.tile[i - 1, num].type == 23 || Main.tile[i - 1, num].type == 60 || Main.tile[i - 1, num].type == 109 || Main.tile[i - 1, num].type == 147 || Main.tile[i - 1, num].type == 199 || Main.tile[i - 1, num].type == 70 || TileLoader.CanGrowModTree(Main.tile[i - 1, num].type))) || (Main.tile[i + 1, num].active() && (Main.tile[i + 1, num].type == 2 || Main.tile[i + 1, num].type == 23 || Main.tile[i + 1, num].type == 60 || Main.tile[i + 1, num].type == 109 || Main.tile[i + 1, num].type == 147 || Main.tile[i + 1, num].type == 199 || Main.tile[i + 1, num].type == 70 || TileLoader.CanGrowModTree(Main.tile[i + 1, num].type)))))
 			{
+				// desert? near spawn? near ocean, near dungeon
 				int num2 = 2;
-				int num3 = 16;
+				int num3 = Main.setting.TreeUpperBound;//16;
 				if (Main.tile[i, num].type == 60)
 				{
 					num3 += 5;
@@ -12193,7 +_,7 @@
 				{
 					bool flag = false;
 					bool flag2 = false;
-					int num4 = WorldGen.genRand.Next(5, num3 + 1);
+					int num4 = WorldGen.genRand.Next(Main.setting.TreeLowerBound/*5*/, num3 + 1);
 					int num5;
 					for (int j = num - num4; j < num; j++)
 					{
@@ -13433,7 +_,7 @@
 			{
 				NetMessage.SendData(25, -1, -1, Lang.misc[15], 255, 50f, 255f, 130f, 0, 0, 0);
 			}
-			AchievementsHelper.NotifyProgressionEvent(9);
+			//AchievementsHelper.NotifyProgressionEvent(9);
 			if (Main.netMode == 2)
 			{
 				Netplay.ResetSections();
@@ -13484,7 +_,7 @@
 				Main.tile[i, j] = new Tile();
 			}
 			int frameX = (int)Main.tile[i, j].frameX;
-			if (TileLoader.CloseDoorID(Main.tile[i, j]) < 0)
+			if (Main.tile[i, j].type != 11)
 			{
 				return false;
 			}
@@ -13638,7 +_,7 @@
 			return false;
 		}
 
-		public static void AddShadowOrb(int x, int y)
+		public static void AddShadowOrb(int x, int y, bool shadowOrb)
 		{
 			if (x < 10 || x > Main.maxTilesX - 10)
 			{
@@ -13659,10 +_,14 @@
 				}
 			}
 			short num = 0;
-			if (WorldGen.crimson)
+			if (!shadowOrb /*WorldGen.crimson*/)
 			{
 				num += 36;
 			}
+			//if (Main.setting.IsCorruption == 3 || Main.setting.IsCorruption == 4)
+			//{
+			//	num = (short)((genRand.Next(0, 2) == 0) ? 0 : 36);
+			//}
 			Main.tile[x - 1, y - 1].active(true);
 			Main.tile[x - 1, y - 1].type = 31;
 			Main.tile[x - 1, y - 1].frameX = num;
@@ -13703,6 +_,7 @@
 					{
 						wallType = 14;
 					}
+					//WallID.ObsidianBrickUnsafe == 14
 					WorldGen.HellFort(i, num2, num3, wallType);
 					i += WorldGen.genRand.Next(30, 130);
 					if (WorldGen.genRand.Next(10) == 0)
@@ -13711,7 +_,7 @@
 					}
 				}
 			}
-			float num4 = (float)(Main.maxTilesX / 4200);
+			float num4 = ((float)Main.maxTilesX / 4200);
 			int num5 = 0;
 			while ((float)num5 < 200f * num4)
 			{
@@ -13749,6 +_,7 @@
 							}
 							if (!flag2)
 							{
+								//TileID.Torches  == 4
 								WorldGen.PlaceTile(num7 + num9, num8, 4, true, true, -1, 7);
 								flag = true;
 							}
@@ -14894,8 +_,10 @@
 
 		public static void makeTemple(int x, int y)
 		{
-			Rectangle[] array = new Rectangle[40];
-			float num = (float)(Main.maxTilesX / 4200);
+			// TODO Temple size
+			Rectangle[] array = new Rectangle[400]; // 40 to 400
+			float num = ((float)Main.maxTilesX / 4200); // fix Int division
+			num *= Main.setting.TempleSizeMultiplier;//4f;
 			int num2 = WorldGen.genRand.Next((int)(num * 10f), (int)(num * 16f));
 			int num3 = 1;
 			if (WorldGen.genRand.Next(2) == 0)
@@ -15029,7 +_,7 @@
 								for (int num23 = num18; num23 < num19; num23++)
 								{
 									Main.tile[num22, num23].active(true);
-									Main.tile[num22, num23].type = 226;
+									Main.tile[num22, num23].type = 226;//lhizard brick
 									Main.tile[num22, num23].liquid = 0;
 									Main.tile[num22, num23].slope(0);
 									Main.tile[num22, num23].halfBrick(false);
@@ -15665,6 +_,7 @@
 			int num2 = WorldGen.tRooms;
 			float num3 = (float)num2 * 1.9f;
 			num3 *= 1f + (float)WorldGen.genRand.Next(-15, 16) * 0.01f;
+			num3 *= Main.setting.TempleTrapMultiplier;
 			int num4 = 0;
 			while (num3 > 0f)
 			{
@@ -15693,7 +_,7 @@
 				}
 			}
 			Main.tileSolid[232] = false;
-			float num7 = (float)num2 * 0.35f;
+			float num7 = (float)num2 * 0.35f * Main.setting.TempleChestMultiplier;
 			num7 *= 1f + (float)WorldGen.genRand.Next(-15, 16) * 0.01f;
 			int contain = 1293;
 			num4 = 0;
@@ -15847,13 +_,18 @@
 			return false;
 		}
 
-		public static void MakeDungeon(int x, int y)
+		public static void MakeDungeon(int x, int y, GenerationProgress progress)
 		{
-			int num = WorldGen.genRand.Next(3);
+			Main.setting.DungeonStyle = Main.setting.SelectDungeon;
+			if (Main.setting.DungeonStyle == 3)
+			{
+				Main.setting.DungeonStyle = WorldGen.genRand.Next(3);
+			}
+			// int num = WorldGen.genRand.Next(3);
 			WorldGen.genRand.Next(3);
 			ushort num2;
 			int num3;
-			switch (num)
+			switch (Main.setting.DungeonStyle)
 			{
 				case 0:
 					num2 = 41;
@@ -15880,7 +_,7 @@
 			WorldGen.dyStrength1 = (double)WorldGen.genRand.Next(20, 25);
 			WorldGen.dxStrength2 = (double)WorldGen.genRand.Next(35, 50);
 			WorldGen.dyStrength2 = (double)WorldGen.genRand.Next(10, 15);
-			float num4 = (float)(Main.maxTilesX / 60);
+			float num4 = (float)(Main.setting.DungeonSizeMultiplier * Main.maxTilesX / 60);
 			num4 += (float)WorldGen.genRand.Next(0, (int)(num4 / 3f));
 			float num5 = num4;
 			int num6 = 5;
@@ -15907,6 +_,7 @@
 						(int)((num5 - num4) / num5 * 60f),
 						"%"
 					});
+				progress.Message = Main.statusText;
 				if (num6 > 0)
 				{
 					num6--;
@@ -16325,7 +_,7 @@
 								float num57 = (float)Math.Abs(num53 - num55);
 								float num58 = (float)Math.Abs(num54 - num56);
 								double num59 = Math.Sqrt((double)(num57 * num57 + num58 * num58));
-								if (num59 < (double)num52 * 0.4 && Main.wallDungeon[(int)Main.tile[num55, num56].wall])
+								if (num59 < (double)num52 * 0.4 && num55 < Main.maxTilesX && Main.wallDungeon[(int)Main.tile[num55, num56].wall])
 								{
 									WorldGen.Spread.WallDungeon(num55, num56, array[num51]);
 								}
@@ -16449,7 +_,12 @@
 					}
 				}
 			}
-			for (int num78 = 0; num78 < 4; num78++)
+			int numChests = 4;
+			if (Main.setting.IsCorruption == 3 || Main.setting.IsCorruption == 4)
+				numChests++;
+			for (int round = 0; round < Main.setting.BiomeChestSets; round++)
+			{
+			for (int num78 = 0; num78 < numChests; num78++)
 			{
 				bool flag5 = false;
 				while (!flag5)
@@ -16488,9 +_,23 @@
 							style2 = 27;
 							contain = 1572;
 						}
+						else if (num78 == 4)
+						{
+							if (WorldGen.crimson)
+							{
+								style2 = 24;
+								contain = 1571;
+							}
+							else
+							{
+								style2 = 25;
+								contain = 1569;
+							}
+						}
 						flag5 = WorldGen.AddBuriedChest(num79, num80, contain, false, style2);
 					}
 				}
+			}
 			}
 			int[] array2 = new int[3];
 			array2[0] = WorldGen.genRand.Next(9, 13);
@@ -17918,7 +_,7 @@
 				}
 				int num8 = (int)(value.X + (float)WorldGen.dxStrength1 * 0.6f * (float)num7 + (float)WorldGen.dxStrength2 * (float)num7);
 				int num9 = (int)(WorldGen.dyStrength2 * 0.5);
-				if ((double)value.Y < Main.worldSurface - 5.0 && Main.tile[num8, (int)((double)value.Y - num - 6.0 + (double)num9)].wall == 0 && Main.tile[num8, (int)((double)value.Y - num - 7.0 + (double)num9)].wall == 0 && Main.tile[num8, (int)((double)value.Y - num - 8.0 + (double)num9)].wall == 0)
+				if ((double)value.Y < Main.worldSurface - 5.0 /*-300.0*/ && Main.tile[num8, (int)((double)value.Y - num - 6.0 + (double)num9)].wall == 0 && Main.tile[num8, (int)((double)value.Y - num - 7.0 + (double)num9)].wall == 0 && Main.tile[num8, (int)((double)value.Y - num - 8.0 + (double)num9)].wall == 0)
 				{
 					WorldGen.dSurface = true;
 					WorldGen.TileRunner(num8, (int)((double)value.Y - num - 6.0 + (double)num9), (double)WorldGen.genRand.Next(25, 35), WorldGen.genRand.Next(10, 20), -1, false, 0f, -1f, false, true);
@@ -18076,7 +_,7 @@
 					flag9 = false;
 					for (int num4 = i; num4 < i + num3; num4++)
 					{
-						if ((int)Main.tile[num4, j].wall == wallType)
+						if (InWorld(num4, j) && (int)Main.tile[num4, j].wall == wallType)
 						{
 							if (flag9)
 							{
@@ -19387,10 +_,32 @@
 									int stack = WorldGen.genRand.Next(8) + 3;
 									if (num7 == 0)
 									{
+										if (Main.setting.IsCopper == 3)
+										{
+											if (WorldGen.genRand.Next(2) == 0)
+											{
+												WorldGen.copperBar = 20;
+											}
+											else
+											{
+												WorldGen.copperBar = 703;
+											}
+										}
 										Main.chest[num4].item[num5].SetDefaults(WorldGen.copperBar, false);
 									}
 									if (num7 == 1)
 									{
+										if (Main.setting.IsIron == 3)
+										{
+											if (WorldGen.genRand.Next(2) == 0)
+											{
+												WorldGen.ironBar = 22;
+											}
+											else
+											{
+												WorldGen.ironBar = 704;
+											}
+										}
 										Main.chest[num4].item[num5].SetDefaults(WorldGen.ironBar, false);
 									}
 									Main.chest[num4].item[num5].stack = stack;
@@ -19778,10 +_,32 @@
 									int stack14 = WorldGen.genRand.Next(8) + 3;
 									if (num18 == 0)
 									{
+										if (Main.setting.IsGold == 3)
+										{
+											if (WorldGen.genRand.Next(2) == 0)
+											{
+												WorldGen.goldBar = 19;
+											}
+											else
+											{
+												WorldGen.goldBar = 706;
+											}
+										}
 										Main.chest[num4].item[num5].SetDefaults(WorldGen.goldBar, false);
 									}
 									if (num18 == 1)
 									{
+										if (Main.setting.IsSilver == 3)
+										{
+											if (WorldGen.genRand.Next(2) == 0)
+											{
+												WorldGen.silverBar = 21;
+											}
+											else
+											{
+												WorldGen.silverBar = 705;
+											}
+										}
 										Main.chest[num4].item[num5].SetDefaults(WorldGen.silverBar, false);
 									}
 									Main.chest[num4].item[num5].stack = stack14;
@@ -19963,6 +_,17 @@
 									}
 									if (num25 == 1)
 									{
+										if (Main.setting.IsGold == 3)
+										{
+											if (WorldGen.genRand.Next(2) == 0)
+											{
+												WorldGen.goldBar = 19;
+											}
+											else
+											{
+												WorldGen.goldBar = 706;
+											}
+										}
 										Main.chest[num4].item[num5].SetDefaults(WorldGen.goldBar, false);
 									}
 									Main.chest[num4].item[num5].stack = stack21;
@@ -26326,27 +_,27 @@
 			}
 		}
 
-		public static void SmashAltar(int i, int j)
+		public static void SmashAltar(/*int i, int j*/)
 		{
-			if (Main.netMode == 1)
-			{
-				return;
-			}
-			if (!Main.hardMode)
-			{
-				return;
-			}
-			if (WorldGen.noTileActions)
-			{
-				return;
-			}
-			if (WorldGen.gen)
-			{
-				return;
-			}
+			//if (Main.netMode == 1)
+			//{
+			//	return;
+			//}
+			//if (!Main.hardMode)
+			//{
+			//	return;
+			//}
+			//if (WorldGen.noTileActions)
+			//{
+			//	return;
+			//}
+			//if (WorldGen.gen)
+			//{
+			//	return;
+			//}
 			int num = WorldGen.altarCount % 3;
 			int num2 = WorldGen.altarCount / 3 + 1;
-			float num3 = (float)(Main.maxTilesX / 4200);
+			float num3 = ((float)Main.maxTilesX / 4200);
 			int num4 = 1 - num;
 			num3 = num3 * 310f - (float)(85 * num);
 			num3 *= 0.85f;
@@ -26376,6 +_,11 @@
 					NetMessage.SendData(25, -1, -1, Lang.misc[num5], 255, 50f, 255f, 130f, 0, 0, 0);
 				}
 				num = WorldGen.oreTier1;
+				num = num == 107 ? 221 : 107; // For presmash, flip it.
+				if (Main.setting.PreSmashAltarOreAlternates && WorldGen.genRand.Next(2) == 0)
+				{
+					num = num == 107 ? 221 : 107; // if both, flip again maybe
+				}
 				num3 *= 1.05f;
 			}
 			else if (num == 1)
@@ -26403,6 +_,11 @@
 					NetMessage.SendData(25, -1, -1, Lang.misc[num6], 255, 50f, 255f, 130f, 0, 0, 0);
 				}
 				num = WorldGen.oreTier2;
+				num = num == 108 ? 222 : 108;
+				if (Main.setting.PreSmashAltarOreAlternates && WorldGen.genRand.Next(2) == 0)
+				{
+					num = num == 108 ? 222 : 108;
+				}
 			}
 			else
 			{
@@ -26429,6 +_,11 @@
 					NetMessage.SendData(25, -1, -1, Lang.misc[num7], 255, 50f, 255f, 130f, 0, 0, 0);
 				}
 				num = WorldGen.oreTier3;
+				num = num == 111 ? 223 : 111;
+				if (Main.setting.PreSmashAltarOreAlternates && WorldGen.genRand.Next(2) == 0)
+				{
+					num = num == 111 ? 223 : 111;
+				}
 			}
 			int num8 = 0;
 			while ((float)num8 < num3)
@@ -26449,7 +_,10 @@
 			}
 			int num10 = WorldGen.genRand.Next(3);
 			int num11 = 0;
-			while (num10 != 2 && num11++ < 1000)
+			// TODO option to not spread crimson on presmashaltar
+			if (!Main.setting.PreSmashAltarPreventPatches)
+			{
+			while (num10 != 2 && num11++ < 1000)  // 1/3 nothing, 1/3 crim/corruption 1/3 Hallo
 			{
 				int num12 = WorldGen.genRand.Next(100, Main.maxTilesX - 100);
 				int num13 = WorldGen.genRand.Next((int)Main.rockLayer + 50, Main.maxTilesY - 300);
@@ -26459,16 +_,16 @@
 					{
 						if (WorldGen.crimson)
 						{
-							Main.tile[num12, num13].type = 203;
+							Main.tile[num12, num13].type = 203; //TileID.Crimstone
 						}
 						else
 						{
-							Main.tile[num12, num13].type = 25;
+							Main.tile[num12, num13].type = 25; //TileID.Ebonstone
 						}
 					}
 					else
 					{
-						Main.tile[num12, num13].type = 117;
+						Main.tile[num12, num13].type = 117; //TileID.Pearlstone
 					}
 					if (Main.netMode == 2)
 					{
@@ -26478,16 +_,17 @@
 					break;
 				}
 			}
+			}
 			if (Main.netMode != 1)
 			{
 				int num14 = Main.rand.Next(2) + 1;
 				for (int k = 0; k < num14; k++)
 				{
-					NPC.SpawnOnPlayer((int)Player.FindClosest(new Vector2((float)(i * 16), (float)(j * 16)), 16, 16), 82);
+					//NPC.SpawnOnPlayer((int)Player.FindClosest(new Vector2((float)(i * 16), (float)(j * 16)), 16, 16), 82);
 				}
 			}
 			WorldGen.altarCount++;
-			AchievementsHelper.NotifyProgressionEvent(6);
+			//AchievementsHelper.NotifyProgressionEvent(6);
 		}
 
 		public static void Check3x1(int i, int j, int type)
@@ -26764,7 +_,7 @@
 				{
 					if (!WorldGen.noTileActions && !WorldGen.IsGeneratingHardMode)
 					{
-						WorldGen.SmashAltar(i, j);
+						WorldGen.SmashAltar();
 					}
 				}
 				else if (type == 298)
@@ -30658,6 +_,8 @@
 
 		public static bool PlacePot(int x, int y, ushort type = 28, int style = 0)
 		{
+			if (!Main.setting.NoPot)
+			{
 			bool flag = true;
 			for (int i = x; i < x + 2; i++)
 			{
@@ -30698,6 +_,7 @@
 					}
 				}
 				return true;
+			}
 			}
 			return false;
 		}
@@ -33646,7 +_,7 @@
 						WorldGen.PlaceOnTable1x1(i, j, type, style);
 						WorldGen.SquareTileFrame(i, j, true);
 					}
-					else if (type == 14 || type == 26 || type == 86 || type == 87 || TileLoader.IsDresser(type) || type == 89 || type == 114 || type == 186 || type == 187 || type == 215 || type == 217 || type == 218 || type == 377)
+					else if (type == 14 /*|| type == 26*/ || type == 86 || type == 87 || TileLoader.IsDresser(type) || type == 89 || type == 114 || type == 186 || type == 187 || type == 215 || type == 217 || type == 218 || type == 377)
 					{
 						WorldGen.Place3x2(i, j, (ushort)type, style);
 						WorldGen.SquareTileFrame(i, j, true);
@@ -41720,7 +_,7 @@
 								NetMessage.SendTileSquare(-1, num7, num8, 3, TileChangeType.None);
 							}
 						}
-						else if (Main.tile[num7, num8].type == 20 && WorldGen.genRand.Next(20) == 0)
+						else if (Main.tile[num7, num8].type == 20 && WorldGen.genRand.Next(20) == 0 && !Main.setting.NoTree)
 						{
 							bool flag3 = WorldGen.PlayerLOS(num7, num8);
 							bool flag4;
@@ -42012,7 +_,7 @@
 									NetMessage.SendTileSquare(-1, num7, num11, 1, TileChangeType.None);
 								}
 							}
-							if (WorldGen.genRand.Next(100) == 0)
+							if (WorldGen.genRand.Next(100) == 0 && !Main.setting.NoTree)
 							{
 								bool flag10 = WorldGen.PlayerLOS(num7, num8);
 								bool flag11 = WorldGen.GrowTree(num7, num8);
@@ -42057,7 +_,7 @@
 									NetMessage.SendTileSquare(-1, num7, num11, 1, TileChangeType.None);
 								}
 							}
-							else if (WorldGen.genRand.Next(500) == 0 && (!Main.tile[num7, num11].active() || Main.tile[num7, num11].type == 61 || Main.tile[num7, num11].type == 74 || Main.tile[num7, num11].type == 69))
+							else if (WorldGen.genRand.Next(500) == 0 && (!Main.tile[num7, num11].active() || Main.tile[num7, num11].type == 61 || Main.tile[num7, num11].type == 74 || Main.tile[num7, num11].type == 69) && !Main.setting.NoTree)
 							{
 								bool flag13 = WorldGen.GrowTree(num7, num8);
 								if (flag13 && WorldGen.PlayerLOS(num7, num8))
@@ -43448,7 +_,7 @@
 		{
 			int crimDir = 1;
 			WorldGen.heartCount = 0;
-			WorldGen.crimson = true;
+			//	WorldGen.crimson = true;
 			int num = j;
 			if ((double)num > Main.worldSurface)
 			{
@@ -43676,7 +_,7 @@
 			}
 			for (int num35 = 0; num35 < WorldGen.heartCount; num35++)
 			{
-				WorldGen.AddShadowOrb((int)WorldGen.heartPos[num35].X, (int)WorldGen.heartPos[num35].Y);
+				WorldGen.AddShadowOrb((int)WorldGen.heartPos[num35].X, (int)WorldGen.heartPos[num35].Y, false);
 			}
 			int num36 = Main.maxTilesX;
 			int num37 = 0;
@@ -43974,10 +_,10 @@
 				}
 				if (num <= 0f)
 				{
-					if (!flag2)
+					if (!flag2 && !Main.setting.NoOrbHeart)
 					{
 						flag2 = true;
-						WorldGen.AddShadowOrb((int)value.X, (int)value.Y);
+						WorldGen.AddShadowOrb((int)value.X, (int)value.Y, true);
 					}
 					else if (!flag3)
 					{
@@ -44006,18 +_,25 @@
 							}
 							if ((double)num10 > Main.worldSurface)
 							{
-								WorldGen.Place3x2(num9, num10, 26, 0);
-								if (Main.tile[num9, num10].type == 26)
+								if (!Main.setting.NoAltar)
+								{
+									WorldGen.Place3x2(num9, num10, 26, 0);
+									if (Main.tile[num9, num10].type == 26)
+									{
+										flag4 = true;
+									}
+									else
+									{
+										num8++;
+										if (num8 >= 10000)
+										{
+											flag4 = true;
+										}
+									}
+								}
+								else
 								{
 									flag4 = true;
-								}
-								else
-								{
-									num8++;
-									if (num8 >= 10000)
-									{
-										flag4 = true;
-									}
 								}
 							}
 							else
@@ -44202,7 +_,7 @@
 		public static void GERunner(int i, int j, float speedX = 0f, float speedY = 0f, bool good = true)
 		{
 			int num = WorldGen.genRand.Next(200, 250);
-			float num2 = (float)(Main.maxTilesX / 4200);
+			float num2 = ((float)Main.maxTilesX / 4200);
 			num = (int)((float)num * num2);
 			double num3 = (double)num;
 			Vector2 value;

