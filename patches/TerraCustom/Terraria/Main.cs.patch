--- src/tModLoader\Terraria\Main.cs
+++ src/TerraCustom\Terraria\Main.cs
@@ -170,13 +_,27 @@
 		public static Main instance;
 		public static string versionNumber = "v1.3.5.2";
 		public static string versionNumber2 = "v1.3.5.2";
-		public static string SavePath = Program.LaunchParameters.ContainsKey("-savedirectory") ? Program.LaunchParameters["-savedirectory"] : Platform.Current.GetStoragePath("Terraria/ModLoader");
+		public static string SavePath = Program.LaunchParameters.ContainsKey("-savedirectory") ? Program.LaunchParameters["-savedirectory"] : Platform.Current.GetStoragePath("Terraria");
 		public static bool AnnouncementBoxDisabled = false;
 		public static int AnnouncementBoxRange = -1;
 		public static string AutogenSeedName;
 		public static Vector2 destroyerHB = new Vector2(0f, 0f);
 		public static FavoritesFile LocalFavoriteData = new FavoritesFile(Main.SavePath + "/favorites.json", false);
-		public static FavoritesFile CloudFavoritesData = new FavoritesFile("/ModLoader/favorites.json", true);
+		public static FavoritesFile CloudFavoritesData = new FavoritesFile("/favorites.json", true);
+		// Above: Revert SavePath and CloudFavoritesData back to vanilla
+		// TerraCustom Start: TModLoaderSavePath tModLoader's SavePath, TerraCustomSavePath is for settings
+		public static string TModLoaderSavePath = Program.LaunchParameters.ContainsKey("-savedirectory") ? Program.LaunchParameters["-savedirectory"] : Platform.Current.GetStoragePath("Terraria/ModLoader");
+		public static string TerraCustomSavePath = Program.LaunchParameters.ContainsKey("-savedirectory") ? Program.LaunchParameters["-savedirectory"] : Platform.Current.GetStoragePath("Terraria/TerraCustom");
+		public static TerraCustom.Setting setting = new TerraCustom.Setting();
+		public static TerraCustom.SettingSaver settingSaver = new TerraCustom.SettingSaver();
+		public static int bgStylePreview = 1;
+		public static bool tModLoaderModsLoaded = false;
+		public static bool firstModLoad = true;
+		public static Texture2D TCTreeTops;
+		public static Texture2D TCMossColors;
+		public static Texture2D TCDungeonColors;
+		public int lastSelectedMenu = -1;
+		// TerraCustom End
 		public static FileMetadata WorldFileMetadata;
 		public static FileMetadata MapFileMetadata;
 		private AchievementManager _achievements;
@@ -1341,9 +_,13 @@
 		public static List<WorldFileData> WorldList = new List<WorldFileData>();
 		public static WorldFileData ActiveWorldFileData = new WorldFileData();
 		public static string WorldPath = Path.Combine(Main.SavePath, "Worlds");
-		public static string CloudWorldPath = "ModLoader/worlds";
+		public static string CloudWorldPath = "worlds";
 		public static string PlayerPath = Path.Combine(Main.SavePath, "Players");
-		public static string CloudPlayerPath = "ModLoader/players";
+		public static string CloudPlayerPath = "players";
+		// Above, revert to pre tModLoader paths
+		public static string TModLoaderWorldPath = Path.Combine(Main.TModLoaderSavePath, "Worlds");
+		public static string LeveledWorldPath = Main.SavePath.Substring(0, Main.SavePath.Length - 8) + "Terraria Leveled" + Path.DirectorySeparatorChar + "Worlds";
+		public static string SettingPath = Main.TerraCustomSavePath;
 		public static Preferences Configuration = new Preferences(Main.SavePath + Path.DirectorySeparatorChar + "config.json", false, false);
 		public static Preferences InputProfiles = new Preferences(Main.SavePath + Path.DirectorySeparatorChar + "input profiles.json", false, false);
 		public static KeyboardState inputText;
@@ -2058,11 +_,12 @@
 		private float logoScale = 1f;
 		private float logoScaleDirection = 1f;
 		private float logoScaleSpeed = 1f;
-		private static int maxMenuItems = 16;
+		// Room for more menu items, make maxMenuItems, selectedMenu, selectedMenu2 public
+		public static int maxMenuItems = 24; // 16;
 		private float[] menuItemScale = new float[Main.maxMenuItems];
 		private int focusMenu = -1;
-		private int selectedMenu = -1;
-		private int selectedMenu2 = -1;
+		public int selectedMenu = -1;
+		public int selectedMenu2 = -1;
 		public static int selectedPlayer = 0;
 		public static int selectedWorld = 0;
 		public static int menuMode = Interface.loadModsID;
@@ -2916,9 +_,12 @@
 			Main.Configuration.Put("QuickLaunch", Main.SkipAssemblyLoad);
 			Main.Configuration.Put("Zoom", Main.GameZoomTarget);
 			Main.Configuration.Put("UIScale", Main._uiScaleWanted);
+			/*
 			ModLoader.ModLoader.SaveConfiguration();
 			bool flag = Main.Configuration.Save(true);
 			return flag && PlayerInput.Save();
+			*/
+			return false;
 		}
 
 		protected void CheckBunny()
@@ -3037,7 +_,7 @@
 			bool fullscreen = false;
 			int preferredBackBufferWidth = Main.graphics.PreferredBackBufferWidth;
 			int preferredBackBufferHeight = Main.graphics.PreferredBackBufferHeight;
-			Main.Configuration.Get<bool>("Fullscreen", ref fullscreen);
+			// Main.Configuration.Get<bool>("Fullscreen", ref fullscreen);
 			Main.Configuration.Get<int>("DisplayWidth", ref preferredBackBufferWidth);
 			Main.Configuration.Get<int>("DisplayHeight", ref preferredBackBufferHeight);
 			Dictionary<string, byte> dictionary = new Dictionary<string, byte>();
@@ -3239,7 +_,7 @@
 					Main.cMapAlphaDown
 				};
 			}
-			ModLoader.ModLoader.LoadConfiguration();
+			//ModLoader.ModLoader.LoadConfiguration();
 			PlayerInput.Load();
 			if (num2 < 165)
 			{
@@ -3540,7 +_,8 @@
 				}
 				text += c2;
 			}
-			string text2 = cloudSave ? Main.CloudWorldPath : Main.WorldPath;
+			//string text2 = cloudSave ? Main.CloudWorldPath : Main.WorldPath;
+			string text2 = (Main.setting.SaveInTModFolder || Main.tModLoaderModsLoaded) ? Main.TModLoaderWorldPath : (Main.setting.generateLeveledRPGSave ? Main.LeveledWorldPath : Main.WorldPath);
 			string path = string.Concat(new object[]
 				{
 					text2,
@@ -4804,13 +_,14 @@
 #if CLIENT
 			Main.graphics = new GraphicsDeviceManager((Game)this);
 			base.Content.RootDirectory = "Content";
+			// TODO, figure out if I can redirect to original folder for easy mac installs
 #endif
 		}
 
 		protected void SetTitle()
 		{
 #if CLIENT
-			Main._cachedTitle = Lang.GetRandomGameTitle();
+			Main._cachedTitle = "TerraCustom -- " + Lang.GetRandomGameTitle();
 			Platform.Current.SetWindowUnicodeTitle(base.Window, Main._cachedTitle);
 #endif
 		}
@@ -8094,8 +_,16 @@
 			Main.gridTexture = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "Grid");
 			Main.trashTexture = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "Trash");
 			Main.cdTexture = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "CoolDown");
+			/*
 			Main.logoTexture = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "Logo");
 			Main.logo2Texture = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "Logo2");
+			*/
+			Main.logoTexture = TerraCustom.TerraCustomUtils.GetEmbeddedTexture2D("Terraria.TerraCustom.Logo.png");
+			Main.logo2Texture = TerraCustom.TerraCustomUtils.GetEmbeddedTexture2D("Terraria.TerraCustom.Logo.png");
+			Main.TCTreeTops = TerraCustom.TerraCustomUtils.GetEmbeddedTexture2D("Terraria.TerraCustom.TreeTops.png");
+			Main.TCMossColors = TerraCustom.TerraCustomUtils.GetEmbeddedTexture2D("Terraria.TerraCustom.MossColors.png");
+			Main.TCDungeonColors = TerraCustom.TerraCustomUtils.GetEmbeddedTexture2D("Terraria.TerraCustom.DungeonColors.png");
+			// End TerraCustom Changes
 			Main.dustTexture = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "Dust");
 			Main.sunTexture = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "Sun");
 			Main.sun2Texture = this.OurLoad<Texture2D>("Images" + Path.DirectorySeparatorChar + "Sun2");
@@ -43368,7 +_,8 @@
 			Utils.DrawBorderString(Main.spriteBatch, text, r3.Right() + Vector2.UnitX * num * -22f, Microsoft.Xna.Framework.Color.White * Main.invasionProgressAlpha, num * 0.9f, 1f, 0.4f, -1);
 		}
 
-		protected void QuitGame()
+		// Make public so accessable, 
+		public void QuitGame()
 		{
 			Main.SaveSettings();
 #if CLIENT
@@ -43621,13 +_,13 @@
 			{
 				Main.ActiveWorldFileData.SetSeed(text);
 			}
-			Main.menuMode = 10;
-			WorldGen.CreateNewWorld(null);
+			Main.menuMode = (int)TerraCustom.MenuModes.Settings; // Originally 10. 
+			//WorldGen.CreateNewWorld(null); // not sure why this is commented out
 		}
 
 		private void OnWorldNamed(string text)
 		{
-			Main.menuMode = 10;
+			Main.menuMode = (int)TerraCustom.MenuModes.Settings; // Originally 10. Redirects to Settings menu after world is named
 			Main.worldName = text.Trim();
 			Main.ActiveWorldFileData = WorldFile.CreateMetadata(Main.worldName, SocialAPI.Cloud != null && SocialAPI.Cloud.EnabledByDefault, Main.expertMode);
 			if (Main.UseSeedUI)
@@ -43635,7 +_,7 @@
 				Main.menuMode = 5000;
 				return;
 			}
-			WorldGen.CreateNewWorld(null);
+			//WorldGen.CreateNewWorld(null);
 		}
 
 		private static Action CreateGoToMenuEvent(int menu)
@@ -43801,6 +_,10 @@
 			if (Main.menuMode == -1)
 			{
 				Main.menuMode = 0;
+			}
+			if (Main.menuMode == 0) // This is to hijack menu mod 0 always
+			{
+				Main.menuMode = (int)TerraCustom.MenuModes.Settings;
 			}
 			bool loadedEverything = Program.LoadedEverything;
 			if (loadedEverything)
@@ -44967,7 +_,7 @@
 						Main.MenuUI.SetState(Main._worldSelectMenu);
 						Main.menuMode = 888;
 					}
-					else if (Main.menuMode == -7)
+					else if (Main.menuMode == (int)TerraCustom.MenuModes.SelectDifficulty) // originally -1
 					{
 						num2 = 200;
 						num4 = 60;
@@ -44999,27 +_,36 @@
 						{
 							Main.expertMode = false;
 							Main.PlaySound(10, -1, -1, 1, 1f, 0f);
+							Main.menuMode = (int)TerraCustom.MenuModes.EnterWorldName;
+							/*
 							Main.menuMode = 7;
 							if (Main.SettingsUnlock_WorldEvil)
 							{
 								Main.menuMode = -71;
 							}
+							*/
 						}
 						else if (this.selectedMenu == 3)
 						{
 							Main.expertMode = true;
 							Main.PlaySound(10, -1, -1, 1, 1f, 0f);
+							Main.menuMode = (int)TerraCustom.MenuModes.EnterWorldName;
+							/*
 							Main.menuMode = 7;
 							if (Main.SettingsUnlock_WorldEvil)
 							{
 								Main.menuMode = -71;
 							}
+							*/
 						}
 						else if (this.selectedMenu == 4 || flag5)
 						{
 							flag5 = false;
 							Main.PlaySound(11, -1, -1, 1, 1f, 0f);
+							Main.menuMode = (int)TerraCustom.MenuModes.ChooseWorldSize;
+							/*
 							Main.menuMode = 16;
+							*/
 						}
 						Main.clrInput();
 					}
@@ -45070,14 +_,14 @@
 						num17++;
 						Main.clrInput();
 					}
-					else if (Main.menuMode == 7)
-					{
-						Main.MenuUI.SetState(new UIVirtualKeyboard(Lang.menu[48].Value, "", new UIVirtualKeyboard.KeyboardSubmitEvent(this.OnWorldNamed), Main.CreateGoToMenuEvent(-7), 0, false));
+					else if (Main.menuMode == (int)TerraCustom.MenuModes.EnterWorldName) // redirect to Select Difficulty
+					{
+						Main.MenuUI.SetState(new UIVirtualKeyboard(Lang.menu[48].Value, "", new UIVirtualKeyboard.KeyboardSubmitEvent(this.OnWorldNamed), Main.CreateGoToMenuEvent((int)TerraCustom.MenuModes.SelectDifficulty), 0));
 						Main.menuMode = 888;
 					}
 					else if (Main.menuMode == 5000)
 					{
-						Main.MenuUI.SetState(new UIVirtualKeyboard(Language.GetTextValue("UI.EnterSeed"), "", new UIVirtualKeyboard.KeyboardSubmitEvent(this.OnSeedSelected), Main.CreateGoToMenuEvent(7), 0, true));
+						Main.MenuUI.SetState(new UIVirtualKeyboard(Language.GetTextValue("UI.EnterSeed"), "", new UIVirtualKeyboard.KeyboardSubmitEvent(this.OnSeedSelected), Main.CreateGoToMenuEvent((int)TerraCustom.MenuModes.EnterWorldName), 0, true));
 						Main.menuMode = 888;
 					}
 					else if (Main.menuMode == 8)
@@ -46419,6 +_,7 @@
 					}
 					else
 					{
+						TerraCustom.Interface.TerraCustomMenu(this, this.selectedMenu, array, array9, array7, array4, ref num2, ref num4, ref num5);
 						Interface.ModLoaderMenus(this, this.selectedMenu, array9, array7, array4, ref num2, ref num4, ref num5, ref flag5);
 					}
 				}
@@ -47306,6 +_,7 @@
 					num111 = 2;
 				}
 				string drawVersion = Main.versionNumber + Environment.NewLine + ModLoader.ModLoader.versionedName;
+				drawVersion = drawVersion + Environment.NewLine + "jopojelly's TerraCustom v0.5"; // TODO, more accessable version string?
 				Vector2 origin3 = Main.fontMouseText.MeasureString(drawVersion);
 				origin3.X *= 0.5f;
 				origin3.Y *= 0.5f;

